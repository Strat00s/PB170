
My_First_NoisII.elf:     file format elf32-littlenios2
My_First_NoisII.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x000101b4

Program Header:
    LOAD off    0x00001000 vaddr 0x00010000 paddr 0x00010000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00010020 paddr 0x00010020 align 2**12
         filesz 0x00005524 memsz 0x00005524 flags r-x
    LOAD off    0x00006544 vaddr 0x00015544 paddr 0x00016f8c align 2**12
         filesz 0x00001a48 memsz 0x00001a48 flags rw-
    LOAD off    0x000089d4 vaddr 0x000189d4 paddr 0x000189d4 align 2**12
         filesz 0x00000000 memsz 0x000002e0 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00010000  00010000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000194  00010020  00010020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00005348  000101b4  000101b4  000011b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000048  000154fc  000154fc  000064fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001a48  00015544  00016f8c  00006544  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000002e0  000189d4  000189d4  000089d4  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000026  00000000  00000000  00007f8c  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 000008d8  00000000  00000000  00007fb8  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 00000d1a  00000000  00000000  00008890  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   000194cf  00000000  00000000  000095aa  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00004ddb  00000000  00000000  00022a79  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000c428  00000000  00000000  00027854  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00000fcc  00000000  00000000  00033c7c  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00001712  00000000  00000000  00034c48  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00003e18  00000000  00000000  0003635a  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  0003a174  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000002f8  00000000  00000000  0003a188  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0003c871  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  0003c874  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0003c877  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0003c878  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  0003c879  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  0003c87d  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  0003c881  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000009  00000000  00000000  0003c885  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000009  00000000  00000000  0003c88e  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000009  00000000  00000000  0003c897  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 00000008  00000000  00000000  0003c8a0  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 0000002e  00000000  00000000  0003c8a8  2**0
                  CONTENTS, READONLY
 29 .jdi          000044b1  00000000  00000000  0003c8d6  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00010000 l    d  .entry	00000000 .entry
00010020 l    d  .exceptions	00000000 .exceptions
000101b4 l    d  .text	00000000 .text
000154fc l    d  .rodata	00000000 .rodata
00015544 l    d  .rwdata	00000000 .rwdata
000189d4 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
000101ec l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 impure.c
00015544 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00011b90 l     F .text	00000058 std
00011c9c l     F .text	00000008 __fp_lock
00011ca4 l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_close.c
00012cd4 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
00012d34 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
00012e38 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
00012f5c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0001303c l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0001319c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
000133cc l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00016f7c l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
00013684 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00015ef4 l     O .rwdata	00001060 jtag_uart
0001375c l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0001399c l     F .text	00000228 altera_avalon_jtag_uart_irq
00013bc4 l     F .text	000000b0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00014464 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00014874 l     F .text	000000d8 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
000149c4 l     F .text	000000f8 alt_file_locked
00014c48 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
000152e4 l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 alt_exit.c
00015498 l     F .text	00000040 alt_sim_halt
00012a3c g     F .text	00000070 _isatty_r
000131fc g     F .text	0000006c alt_main
00010258 g     F .text	000000a0 _puts_r
00018a24 g     O .bss	00000100 alt_irq
00012aac g     F .text	00000078 _lseek_r
00016f8c g       *ABS*	00000000 __flash_rwdata_start
00018cb4 g       *ABS*	00000000 __alt_heap_start
00012678 g     F .text	00000068 __sseek
00011bf8 g     F .text	000000a4 __sinit
00011cf8 g     F .text	0000009c __sfmoreglue
00013288 g     F .text	00000020 __malloc_unlock
000110e0 g     F .text	000000e0 memmove
00011ce8 g     F .text	00000010 _cleanup
00000000  w      *UND*	00000000 __errno
00010000 g     F .entry	0000000c __reset
00010020 g       *ABS*	00000000 __flash_exceptions_start
000129c8 g     F .text	00000074 _fstat_r
000189e0 g     O .bss	00000004 errno
000189e8 g     O .bss	00000004 alt_argv
0001ef54 g       *ABS*	00000000 _gp
00015d74 g     O .rwdata	00000180 alt_fd_list
00014e6c g     F .text	00000094 alt_find_dev
00011040 g     F .text	000000a0 memcpy
00011cdc g     F .text	0000000c _cleanup_r
0001494c g     F .text	00000078 alt_io_redirect
000154fc g       *ABS*	00000000 __DTOR_END__
000102f8 g     F .text	00000014 puts
00013ddc g     F .text	00000224 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
00012e98 g     F .text	000000c4 isatty
000189d4 g     O .bss	00000004 __malloc_top_pad
00010380 g     F .text	0000049c __sfvwrite_r
000117b4 g     F .text	00000070 _sbrk_r
00012b24 g     F .text	00000078 _read_r
00016f74 g     O .rwdata	00000004 alt_max_fd
000128a4 g     F .text	00000110 _fclose_r
00011b5c g     F .text	00000034 fflush
000189d8 g     O .bss	00000004 __malloc_max_sbrked_mem
000130a8 g     F .text	000000f4 lseek
00016f58 g     O .rwdata	00000004 _global_impure_ptr
000111c0 g     F .text	000005f4 _realloc_r
00018cb4 g       *ABS*	00000000 __bss_end
0001477c g     F .text	000000f8 alt_iic_isr_register
00014d40 g     F .text	0000010c alt_tick
00011cc4 g     F .text	00000018 __fp_lock_all
00014734 g     F .text	00000048 alt_ic_irq_enabled
00014ca8 g     F .text	00000098 alt_alarm_stop
000189f0 g     O .bss	00000004 alt_irq_active
000100ec g     F .exceptions	000000c8 alt_irq_handler
00015d4c g     O .rwdata	00000028 alt_dev_null
00014394 g     F .text	0000001c alt_dcache_flush_all
00016f8c g       *ABS*	00000000 __ram_rwdata_end
00010000 g       *ABS*	00000000 __alt_mem_onchip_memory
00016f6c g     O .rwdata	00000008 alt_dev_list
00013560 g     F .text	00000124 write
00015544 g       *ABS*	00000000 __ram_rodata_end
00012d60 g     F .text	000000d8 fstat
00018cb4 g       *ABS*	00000000 end
000138dc g     F .text	000000c0 altera_avalon_jtag_uart_init
000154f8 g       *ABS*	00000000 __CTOR_LIST__
0001a000 g       *ABS*	00000000 __alt_stack_pointer
00014000 g     F .text	00000240 altera_avalon_jtag_uart_write
00011be8 g     F .text	00000004 __sfp_lock_acquire
00010f5c g     F .text	000000e4 memchr
00011fb0 g     F .text	00000314 _free_r
000152e8 g     F .text	000001b0 __call_exitprocs
00016f60 g     O .rwdata	00000004 __malloc_sbrk_base
000101b4 g     F .text	0000003c _start
000189f4 g     O .bss	00000004 _alt_tick_rate
000189f8 g     O .bss	00000004 _alt_nticks
000132a8 g     F .text	00000124 read
00013718 g     F .text	00000044 alt_sys_init
000151b0 g     F .text	00000134 __register_exitproc
00013c74 g     F .text	00000074 altera_avalon_jtag_uart_close
00012b9c g     F .text	00000038 __mulsi3
00015544 g       *ABS*	00000000 __ram_rwdata_start
000154fc g       *ABS*	00000000 __ram_rodata_start
000189fc g     O .bss	00000028 __malloc_current_mallinfo
00013794 g     F .text	00000058 altera_avalon_jtag_uart_read_fd
00015020 g     F .text	000000d0 alt_get_fd
00012834 g     F .text	00000070 _close_r
0001513c g     F .text	00000074 memcmp
00013844 g     F .text	00000048 altera_avalon_jtag_uart_close_fd
00018cb4 g       *ABS*	00000000 __alt_stack_base
0001388c g     F .text	00000050 altera_avalon_jtag_uart_ioctl_fd
00011824 g     F .text	0000013c __swsetup_r
00011d94 g     F .text	000000f0 __sfp
00015944 g     O .rwdata	00000408 __malloc_av_
00011bf4 g     F .text	00000004 __sinit_lock_release
0001275c g     F .text	00000060 __sread
00014f00 g     F .text	00000120 alt_find_file
000143b0 g     F .text	000000b4 alt_dev_llist_insert
00013268 g     F .text	00000020 __malloc_lock
000134a4 g     F .text	000000bc sbrk
00011960 g     F .text	000001fc _fflush_r
000189d4 g       *ABS*	00000000 __bss_start
000125d8 g     F .text	00000098 memset
000101f0 g     F .text	00000068 main
000189ec g     O .bss	00000004 alt_envp
000189dc g     O .bss	00000004 __malloc_max_total_mem
000137ec g     F .text	00000058 altera_avalon_jtag_uart_write_fd
00012670 g     F .text	00000008 __sclose
0001a000 g       *ABS*	00000000 __alt_heap_limit
000129b4 g     F .text	00000014 fclose
00018b24 g     O .bss	00000190 _atexit0
0001081c g     F .text	00000740 _malloc_r
00016f78 g     O .rwdata	00000004 alt_errno
0001238c g     F .text	000000b8 _fwalk
00011e84 g     F .text	0000012c _malloc_trim_r
000154fc g       *ABS*	00000000 __CTOR_END__
000154fc g       *ABS*	00000000 __flash_rodata_start
000154fc g       *ABS*	00000000 __DTOR_LIST__
000136e4 g     F .text	00000034 alt_irq_init
0001342c g     F .text	00000078 alt_release_fd
000150f0 g     F .text	00000014 atexit
000127bc g     F .text	00000078 _write_r
00016f54 g     O .rwdata	00000004 _impure_ptr
000189e4 g     O .bss	00000004 alt_argc
00014528 g     F .text	00000064 _do_dtors
00010020 g       .exceptions	00000000 alt_irq_entry
00011cac g     F .text	00000018 __fp_unlock_all
00016f64 g     O .rwdata	00000008 alt_fs_list
00010020 g       *ABS*	00000000 __ram_exceptions_start
000145a8 g     F .text	00000050 alt_ic_isr_register
00016f8c g       *ABS*	00000000 _edata
00018cb4 g       *ABS*	00000000 _end
000101b4 g       *ABS*	00000000 __ram_exceptions_end
00013ce8 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
00014694 g     F .text	000000a0 alt_ic_irq_disable
000126e0 g     F .text	0000007c __swrite
00016f5c g     O .rwdata	00000004 __malloc_trim_threshold
00014e4c g     F .text	00000020 altera_nios2_qsys_irq_init
00015104 g     F .text	00000038 exit
000122c4 g     F .text	000000c8 _fwalk_reent
0001a000 g       *ABS*	00000000 __alt_data_end
00010020 g     F .exceptions	00000000 alt_exception
00011bec g     F .text	00000004 __sfp_lock_release
000154d8 g     F .text	00000020 _exit
00014240 g     F .text	00000154 alt_alarm_start
00012444 g     F .text	00000194 __smakebuf_r
0001030c g     F .text	00000074 strlen
00014abc g     F .text	0000018c open
0001458c g     F .text	0000001c alt_icache_flush_all
00016f80 g     O .rwdata	00000004 alt_priority_mask
000145f8 g     F .text	0000009c alt_ic_irq_enable
00016f84 g     O .rwdata	00000008 alt_alarm_list
000144c4 g     F .text	00000064 _do_ctors
00012bd4 g     F .text	00000100 close
00012fbc g     F .text	00000080 alt_load
00000000  w      *UND*	00000000 free
00011bf0 g     F .text	00000004 __sinit_lock_acquire



Disassembly of section .entry:

00010000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   10000:	00400074 	movhi	at,1
    ori r1, r1, %lo(_start)
   10004:	08406d14 	ori	at,at,436
    jmp r1
   10008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00010020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
   10020:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
   10024:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
   10028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   1002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   10030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   10034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   10038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   1003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   10040:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
   10044:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
   10048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   1004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   10050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   10054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   10058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   1005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   10060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   10064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   10068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   1006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   10070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   10074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   10078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   1007c:	10000326 	beq	r2,zero,1008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   10080:	20000226 	beq	r4,zero,1008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   10084:	00100ec0 	call	100ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   10088:	00000306 	br	10098 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
   1008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
   10090:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
   10094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   10098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   1009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   100a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   100a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   100a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   100ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   100b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   100b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   100b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   100bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   100c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
   100c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   100c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   100cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   100d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   100d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   100d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   100dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   100e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
   100e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   100e8:	ef80083a 	eret

000100ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   100ec:	defff904 	addi	sp,sp,-28
   100f0:	dfc00615 	stw	ra,24(sp)
   100f4:	df000515 	stw	fp,20(sp)
   100f8:	df000504 	addi	fp,sp,20
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   100fc:	0005313a 	rdctl	r2,ipending
   10100:	e0bffc15 	stw	r2,-16(fp)

  return active;
   10104:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   10108:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
   1010c:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   10110:	00800044 	movi	r2,1
   10114:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   10118:	e0ffff17 	ldw	r3,-4(fp)
   1011c:	e0bffe17 	ldw	r2,-8(fp)
   10120:	1884703a 	and	r2,r3,r2
   10124:	1005003a 	cmpeq	r2,r2,zero
   10128:	1000161e 	bne	r2,zero,10184 <alt_irq_handler+0x98>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   1012c:	e0bffd17 	ldw	r2,-12(fp)
   10130:	00c000b4 	movhi	r3,2
   10134:	18e28904 	addi	r3,r3,-30172
   10138:	100490fa 	slli	r2,r2,3
   1013c:	10c5883a 	add	r2,r2,r3
   10140:	11400017 	ldw	r5,0(r2)
   10144:	e0bffd17 	ldw	r2,-12(fp)
   10148:	00c000b4 	movhi	r3,2
   1014c:	18e28904 	addi	r3,r3,-30172
   10150:	100490fa 	slli	r2,r2,3
   10154:	10c5883a 	add	r2,r2,r3
   10158:	10800104 	addi	r2,r2,4
   1015c:	11000017 	ldw	r4,0(r2)
   10160:	283ee83a 	callr	r5
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   10164:	0005313a 	rdctl	r2,ipending
   10168:	e0bffb15 	stw	r2,-20(fp)

  return active;
   1016c:	e0bffb17 	ldw	r2,-20(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
   10170:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
   10174:	e0bfff17 	ldw	r2,-4(fp)
   10178:	1004c03a 	cmpne	r2,r2,zero
   1017c:	103fe31e 	bne	r2,zero,1010c <alt_irq_handler+0x20>
   10180:	00000706 	br	101a0 <alt_irq_handler+0xb4>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
   10184:	e0bffe17 	ldw	r2,-8(fp)
   10188:	1085883a 	add	r2,r2,r2
   1018c:	e0bffe15 	stw	r2,-8(fp)
      i++;
   10190:	e0bffd17 	ldw	r2,-12(fp)
   10194:	10800044 	addi	r2,r2,1
   10198:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
   1019c:	003fde06 	br	10118 <alt_irq_handler+0x2c>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
   101a0:	e037883a 	mov	sp,fp
   101a4:	dfc00117 	ldw	ra,4(sp)
   101a8:	df000017 	ldw	fp,0(sp)
   101ac:	dec00204 	addi	sp,sp,8
   101b0:	f800283a 	ret

Disassembly of section .text:

000101b4 <_start>:
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   101b4:	06c00074 	movhi	sp,1
    ori sp, sp, %lo(__alt_stack_pointer)
   101b8:	dee80014 	ori	sp,sp,40960

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
   101bc:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
   101c0:	d6bbd514 	ori	gp,gp,61268
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   101c4:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
   101c8:	10a27514 	ori	r2,r2,35284

    movhi r3, %hi(__bss_end)
   101cc:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
   101d0:	18e32d14 	ori	r3,r3,36020

    beq r2, r3, 1f
   101d4:	10c00326 	beq	r2,r3,101e4 <_start+0x30>

0:
    stw zero, (r2)
   101d8:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   101dc:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   101e0:	10fffd36 	bltu	r2,r3,101d8 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   101e4:	0012fbc0 	call	12fbc <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   101e8:	00131fc0 	call	131fc <alt_main>

000101ec <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   101ec:	003fff06 	br	101ec <alt_after_alt_main>

000101f0 <main>:
 */
#include <stdio.h>
#include "system.h"
#include "altera_avalon_pio_regs.h"
int main()
{
   101f0:	defffc04 	addi	sp,sp,-16
   101f4:	dfc00315 	stw	ra,12(sp)
   101f8:	df000215 	stw	fp,8(sp)
   101fc:	df000204 	addi	fp,sp,8
	printf("Hello from Nios II!\n");
   10200:	01000074 	movhi	r4,1
   10204:	21153f04 	addi	r4,r4,21756
   10208:	00102f80 	call	102f8 <puts>
	int count = 0;
   1020c:	e03fff15 	stw	zero,-4(fp)
	int delay;
	while(1)
	{
		IOWR_ALTERA_AVALON_PIO_DATA(LED_BASE, count & 0x01);
   10210:	e0bfff17 	ldw	r2,-4(fp)
   10214:	10c0004c 	andi	r3,r2,1
   10218:	008000b4 	movhi	r2,2
   1021c:	10840004 	addi	r2,r2,4096
   10220:	10c00035 	stwio	r3,0(r2)
		delay = 0;
   10224:	e03ffe15 	stw	zero,-8(fp)
		while(delay < 1000000)
   10228:	00000306 	br	10238 <main+0x48>
		{
			delay++;
   1022c:	e0bffe17 	ldw	r2,-8(fp)
   10230:	10800044 	addi	r2,r2,1
   10234:	e0bffe15 	stw	r2,-8(fp)
	int delay;
	while(1)
	{
		IOWR_ALTERA_AVALON_PIO_DATA(LED_BASE, count & 0x01);
		delay = 0;
		while(delay < 1000000)
   10238:	e0fffe17 	ldw	r3,-8(fp)
   1023c:	008003f4 	movhi	r2,15
   10240:	10908fc4 	addi	r2,r2,16959
   10244:	10fff90e 	bge	r2,r3,1022c <main+0x3c>
		{
			delay++;
		}
		count++;
   10248:	e0bfff17 	ldw	r2,-4(fp)
   1024c:	10800044 	addi	r2,r2,1
   10250:	e0bfff15 	stw	r2,-4(fp)
	}
   10254:	003fee06 	br	10210 <main+0x20>

00010258 <_puts_r>:
   10258:	defff604 	addi	sp,sp,-40
   1025c:	dc400715 	stw	r17,28(sp)
   10260:	2023883a 	mov	r17,r4
   10264:	2809883a 	mov	r4,r5
   10268:	dfc00915 	stw	ra,36(sp)
   1026c:	dcc00815 	stw	r19,32(sp)
   10270:	2827883a 	mov	r19,r5
   10274:	001030c0 	call	1030c <strlen>
   10278:	89400217 	ldw	r5,8(r17)
   1027c:	00c00074 	movhi	r3,1
   10280:	18d54404 	addi	r3,r3,21776
   10284:	01c00044 	movi	r7,1
   10288:	12000044 	addi	r8,r2,1
   1028c:	d8c00515 	stw	r3,20(sp)
   10290:	d9c00615 	stw	r7,24(sp)
   10294:	d8c00304 	addi	r3,sp,12
   10298:	01c00084 	movi	r7,2
   1029c:	8809883a 	mov	r4,r17
   102a0:	d80d883a 	mov	r6,sp
   102a4:	d8c00015 	stw	r3,0(sp)
   102a8:	dcc00315 	stw	r19,12(sp)
   102ac:	da000215 	stw	r8,8(sp)
   102b0:	d9c00115 	stw	r7,4(sp)
   102b4:	d8800415 	stw	r2,16(sp)
   102b8:	00103800 	call	10380 <__sfvwrite_r>
   102bc:	00ffffc4 	movi	r3,-1
   102c0:	10000626 	beq	r2,zero,102dc <_puts_r+0x84>
   102c4:	1805883a 	mov	r2,r3
   102c8:	dfc00917 	ldw	ra,36(sp)
   102cc:	dcc00817 	ldw	r19,32(sp)
   102d0:	dc400717 	ldw	r17,28(sp)
   102d4:	dec00a04 	addi	sp,sp,40
   102d8:	f800283a 	ret
   102dc:	00c00284 	movi	r3,10
   102e0:	1805883a 	mov	r2,r3
   102e4:	dfc00917 	ldw	ra,36(sp)
   102e8:	dcc00817 	ldw	r19,32(sp)
   102ec:	dc400717 	ldw	r17,28(sp)
   102f0:	dec00a04 	addi	sp,sp,40
   102f4:	f800283a 	ret

000102f8 <puts>:
   102f8:	00800074 	movhi	r2,1
   102fc:	109bd504 	addi	r2,r2,28500
   10300:	200b883a 	mov	r5,r4
   10304:	11000017 	ldw	r4,0(r2)
   10308:	00102581 	jmpi	10258 <_puts_r>

0001030c <strlen>:
   1030c:	208000cc 	andi	r2,r4,3
   10310:	2011883a 	mov	r8,r4
   10314:	1000161e 	bne	r2,zero,10370 <strlen+0x64>
   10318:	20c00017 	ldw	r3,0(r4)
   1031c:	017fbff4 	movhi	r5,65279
   10320:	297fbfc4 	addi	r5,r5,-257
   10324:	01e02074 	movhi	r7,32897
   10328:	39e02004 	addi	r7,r7,-32640
   1032c:	1945883a 	add	r2,r3,r5
   10330:	11c4703a 	and	r2,r2,r7
   10334:	00c6303a 	nor	r3,zero,r3
   10338:	1886703a 	and	r3,r3,r2
   1033c:	18000c1e 	bne	r3,zero,10370 <strlen+0x64>
   10340:	280d883a 	mov	r6,r5
   10344:	380b883a 	mov	r5,r7
   10348:	21000104 	addi	r4,r4,4
   1034c:	20800017 	ldw	r2,0(r4)
   10350:	1187883a 	add	r3,r2,r6
   10354:	1946703a 	and	r3,r3,r5
   10358:	0084303a 	nor	r2,zero,r2
   1035c:	10c4703a 	and	r2,r2,r3
   10360:	103ff926 	beq	r2,zero,10348 <strlen+0x3c>
   10364:	20800007 	ldb	r2,0(r4)
   10368:	10000326 	beq	r2,zero,10378 <strlen+0x6c>
   1036c:	21000044 	addi	r4,r4,1
   10370:	20800007 	ldb	r2,0(r4)
   10374:	103ffd1e 	bne	r2,zero,1036c <strlen+0x60>
   10378:	2205c83a 	sub	r2,r4,r8
   1037c:	f800283a 	ret

00010380 <__sfvwrite_r>:
   10380:	30800217 	ldw	r2,8(r6)
   10384:	defff504 	addi	sp,sp,-44
   10388:	df000915 	stw	fp,36(sp)
   1038c:	dd800715 	stw	r22,28(sp)
   10390:	dc800315 	stw	r18,12(sp)
   10394:	dfc00a15 	stw	ra,40(sp)
   10398:	ddc00815 	stw	r23,32(sp)
   1039c:	dd400615 	stw	r21,24(sp)
   103a0:	dd000515 	stw	r20,20(sp)
   103a4:	dcc00415 	stw	r19,16(sp)
   103a8:	dc400215 	stw	r17,8(sp)
   103ac:	dc000115 	stw	r16,4(sp)
   103b0:	302d883a 	mov	r22,r6
   103b4:	2039883a 	mov	fp,r4
   103b8:	2825883a 	mov	r18,r5
   103bc:	10001c26 	beq	r2,zero,10430 <__sfvwrite_r+0xb0>
   103c0:	29c0030b 	ldhu	r7,12(r5)
   103c4:	3880020c 	andi	r2,r7,8
   103c8:	10002726 	beq	r2,zero,10468 <__sfvwrite_r+0xe8>
   103cc:	28800417 	ldw	r2,16(r5)
   103d0:	10002526 	beq	r2,zero,10468 <__sfvwrite_r+0xe8>
   103d4:	3880008c 	andi	r2,r7,2
   103d8:	b5400017 	ldw	r21,0(r22)
   103dc:	10002826 	beq	r2,zero,10480 <__sfvwrite_r+0x100>
   103e0:	0021883a 	mov	r16,zero
   103e4:	0023883a 	mov	r17,zero
   103e8:	880d883a 	mov	r6,r17
   103ec:	e009883a 	mov	r4,fp
   103f0:	00810004 	movi	r2,1024
   103f4:	80006e26 	beq	r16,zero,105b0 <__sfvwrite_r+0x230>
   103f8:	800f883a 	mov	r7,r16
   103fc:	91400717 	ldw	r5,28(r18)
   10400:	1400012e 	bgeu	r2,r16,10408 <__sfvwrite_r+0x88>
   10404:	100f883a 	mov	r7,r2
   10408:	90c00917 	ldw	r3,36(r18)
   1040c:	183ee83a 	callr	r3
   10410:	1007883a 	mov	r3,r2
   10414:	80a1c83a 	sub	r16,r16,r2
   10418:	88a3883a 	add	r17,r17,r2
   1041c:	00806d0e 	bge	zero,r2,105d4 <__sfvwrite_r+0x254>
   10420:	b0800217 	ldw	r2,8(r22)
   10424:	10c5c83a 	sub	r2,r2,r3
   10428:	b0800215 	stw	r2,8(r22)
   1042c:	103fee1e 	bne	r2,zero,103e8 <__sfvwrite_r+0x68>
   10430:	0009883a 	mov	r4,zero
   10434:	2005883a 	mov	r2,r4
   10438:	dfc00a17 	ldw	ra,40(sp)
   1043c:	df000917 	ldw	fp,36(sp)
   10440:	ddc00817 	ldw	r23,32(sp)
   10444:	dd800717 	ldw	r22,28(sp)
   10448:	dd400617 	ldw	r21,24(sp)
   1044c:	dd000517 	ldw	r20,20(sp)
   10450:	dcc00417 	ldw	r19,16(sp)
   10454:	dc800317 	ldw	r18,12(sp)
   10458:	dc400217 	ldw	r17,8(sp)
   1045c:	dc000117 	ldw	r16,4(sp)
   10460:	dec00b04 	addi	sp,sp,44
   10464:	f800283a 	ret
   10468:	00118240 	call	11824 <__swsetup_r>
   1046c:	1000e41e 	bne	r2,zero,10800 <__sfvwrite_r+0x480>
   10470:	91c0030b 	ldhu	r7,12(r18)
   10474:	b5400017 	ldw	r21,0(r22)
   10478:	3880008c 	andi	r2,r7,2
   1047c:	103fd81e 	bne	r2,zero,103e0 <__sfvwrite_r+0x60>
   10480:	3880004c 	andi	r2,r7,1
   10484:	1005003a 	cmpeq	r2,r2,zero
   10488:	10005726 	beq	r2,zero,105e8 <__sfvwrite_r+0x268>
   1048c:	0029883a 	mov	r20,zero
   10490:	002f883a 	mov	r23,zero
   10494:	a0004226 	beq	r20,zero,105a0 <__sfvwrite_r+0x220>
   10498:	3880800c 	andi	r2,r7,512
   1049c:	94000217 	ldw	r16,8(r18)
   104a0:	10008b26 	beq	r2,zero,106d0 <__sfvwrite_r+0x350>
   104a4:	800d883a 	mov	r6,r16
   104a8:	a400a536 	bltu	r20,r16,10740 <__sfvwrite_r+0x3c0>
   104ac:	3881200c 	andi	r2,r7,1152
   104b0:	10002726 	beq	r2,zero,10550 <__sfvwrite_r+0x1d0>
   104b4:	90800517 	ldw	r2,20(r18)
   104b8:	92000417 	ldw	r8,16(r18)
   104bc:	91400017 	ldw	r5,0(r18)
   104c0:	1087883a 	add	r3,r2,r2
   104c4:	1887883a 	add	r3,r3,r2
   104c8:	1808d7fa 	srli	r4,r3,31
   104cc:	2a21c83a 	sub	r16,r5,r8
   104d0:	80800044 	addi	r2,r16,1
   104d4:	20c9883a 	add	r4,r4,r3
   104d8:	2027d07a 	srai	r19,r4,1
   104dc:	a085883a 	add	r2,r20,r2
   104e0:	980d883a 	mov	r6,r19
   104e4:	9880022e 	bgeu	r19,r2,104f0 <__sfvwrite_r+0x170>
   104e8:	1027883a 	mov	r19,r2
   104ec:	100d883a 	mov	r6,r2
   104f0:	3881000c 	andi	r2,r7,1024
   104f4:	1000b826 	beq	r2,zero,107d8 <__sfvwrite_r+0x458>
   104f8:	300b883a 	mov	r5,r6
   104fc:	e009883a 	mov	r4,fp
   10500:	001081c0 	call	1081c <_malloc_r>
   10504:	10003126 	beq	r2,zero,105cc <__sfvwrite_r+0x24c>
   10508:	91400417 	ldw	r5,16(r18)
   1050c:	1009883a 	mov	r4,r2
   10510:	800d883a 	mov	r6,r16
   10514:	1023883a 	mov	r17,r2
   10518:	00110400 	call	11040 <memcpy>
   1051c:	90c0030b 	ldhu	r3,12(r18)
   10520:	00beffc4 	movi	r2,-1025
   10524:	1886703a 	and	r3,r3,r2
   10528:	18c02014 	ori	r3,r3,128
   1052c:	90c0030d 	sth	r3,12(r18)
   10530:	9c07c83a 	sub	r3,r19,r16
   10534:	8c05883a 	add	r2,r17,r16
   10538:	a00d883a 	mov	r6,r20
   1053c:	a021883a 	mov	r16,r20
   10540:	90800015 	stw	r2,0(r18)
   10544:	90c00215 	stw	r3,8(r18)
   10548:	94400415 	stw	r17,16(r18)
   1054c:	94c00515 	stw	r19,20(r18)
   10550:	91000017 	ldw	r4,0(r18)
   10554:	b80b883a 	mov	r5,r23
   10558:	a023883a 	mov	r17,r20
   1055c:	00110e00 	call	110e0 <memmove>
   10560:	90c00217 	ldw	r3,8(r18)
   10564:	90800017 	ldw	r2,0(r18)
   10568:	a027883a 	mov	r19,r20
   1056c:	1c07c83a 	sub	r3,r3,r16
   10570:	1405883a 	add	r2,r2,r16
   10574:	90c00215 	stw	r3,8(r18)
   10578:	a021883a 	mov	r16,r20
   1057c:	90800015 	stw	r2,0(r18)
   10580:	b0800217 	ldw	r2,8(r22)
   10584:	1405c83a 	sub	r2,r2,r16
   10588:	b0800215 	stw	r2,8(r22)
   1058c:	103fa826 	beq	r2,zero,10430 <__sfvwrite_r+0xb0>
   10590:	a469c83a 	sub	r20,r20,r17
   10594:	91c0030b 	ldhu	r7,12(r18)
   10598:	bcef883a 	add	r23,r23,r19
   1059c:	a03fbe1e 	bne	r20,zero,10498 <__sfvwrite_r+0x118>
   105a0:	adc00017 	ldw	r23,0(r21)
   105a4:	ad000117 	ldw	r20,4(r21)
   105a8:	ad400204 	addi	r21,r21,8
   105ac:	003fb906 	br	10494 <__sfvwrite_r+0x114>
   105b0:	ac400017 	ldw	r17,0(r21)
   105b4:	ac000117 	ldw	r16,4(r21)
   105b8:	ad400204 	addi	r21,r21,8
   105bc:	003f8a06 	br	103e8 <__sfvwrite_r+0x68>
   105c0:	91400417 	ldw	r5,16(r18)
   105c4:	e009883a 	mov	r4,fp
   105c8:	0011fb00 	call	11fb0 <_free_r>
   105cc:	00800304 	movi	r2,12
   105d0:	e0800015 	stw	r2,0(fp)
   105d4:	9080030b 	ldhu	r2,12(r18)
   105d8:	013fffc4 	movi	r4,-1
   105dc:	10801014 	ori	r2,r2,64
   105e0:	9080030d 	sth	r2,12(r18)
   105e4:	003f9306 	br	10434 <__sfvwrite_r+0xb4>
   105e8:	0027883a 	mov	r19,zero
   105ec:	002f883a 	mov	r23,zero
   105f0:	d8000015 	stw	zero,0(sp)
   105f4:	0029883a 	mov	r20,zero
   105f8:	98001e26 	beq	r19,zero,10674 <__sfvwrite_r+0x2f4>
   105fc:	d8c00017 	ldw	r3,0(sp)
   10600:	1804c03a 	cmpne	r2,r3,zero
   10604:	10005e26 	beq	r2,zero,10780 <__sfvwrite_r+0x400>
   10608:	9821883a 	mov	r16,r19
   1060c:	a4c0012e 	bgeu	r20,r19,10614 <__sfvwrite_r+0x294>
   10610:	a021883a 	mov	r16,r20
   10614:	91000017 	ldw	r4,0(r18)
   10618:	90800417 	ldw	r2,16(r18)
   1061c:	91800217 	ldw	r6,8(r18)
   10620:	91c00517 	ldw	r7,20(r18)
   10624:	1100022e 	bgeu	r2,r4,10630 <__sfvwrite_r+0x2b0>
   10628:	31e3883a 	add	r17,r6,r7
   1062c:	8c001616 	blt	r17,r16,10688 <__sfvwrite_r+0x308>
   10630:	81c03816 	blt	r16,r7,10714 <__sfvwrite_r+0x394>
   10634:	90c00917 	ldw	r3,36(r18)
   10638:	91400717 	ldw	r5,28(r18)
   1063c:	e009883a 	mov	r4,fp
   10640:	b80d883a 	mov	r6,r23
   10644:	183ee83a 	callr	r3
   10648:	1023883a 	mov	r17,r2
   1064c:	00bfe10e 	bge	zero,r2,105d4 <__sfvwrite_r+0x254>
   10650:	a469c83a 	sub	r20,r20,r17
   10654:	a0001826 	beq	r20,zero,106b8 <__sfvwrite_r+0x338>
   10658:	b0800217 	ldw	r2,8(r22)
   1065c:	1445c83a 	sub	r2,r2,r17
   10660:	b0800215 	stw	r2,8(r22)
   10664:	103f7226 	beq	r2,zero,10430 <__sfvwrite_r+0xb0>
   10668:	9c67c83a 	sub	r19,r19,r17
   1066c:	bc6f883a 	add	r23,r23,r17
   10670:	983fe21e 	bne	r19,zero,105fc <__sfvwrite_r+0x27c>
   10674:	adc00017 	ldw	r23,0(r21)
   10678:	acc00117 	ldw	r19,4(r21)
   1067c:	ad400204 	addi	r21,r21,8
   10680:	d8000015 	stw	zero,0(sp)
   10684:	003fdc06 	br	105f8 <__sfvwrite_r+0x278>
   10688:	b80b883a 	mov	r5,r23
   1068c:	880d883a 	mov	r6,r17
   10690:	00110e00 	call	110e0 <memmove>
   10694:	90c00017 	ldw	r3,0(r18)
   10698:	e009883a 	mov	r4,fp
   1069c:	900b883a 	mov	r5,r18
   106a0:	1c47883a 	add	r3,r3,r17
   106a4:	90c00015 	stw	r3,0(r18)
   106a8:	00119600 	call	11960 <_fflush_r>
   106ac:	103fc91e 	bne	r2,zero,105d4 <__sfvwrite_r+0x254>
   106b0:	a469c83a 	sub	r20,r20,r17
   106b4:	a03fe81e 	bne	r20,zero,10658 <__sfvwrite_r+0x2d8>
   106b8:	e009883a 	mov	r4,fp
   106bc:	900b883a 	mov	r5,r18
   106c0:	00119600 	call	11960 <_fflush_r>
   106c4:	103fc31e 	bne	r2,zero,105d4 <__sfvwrite_r+0x254>
   106c8:	d8000015 	stw	zero,0(sp)
   106cc:	003fe206 	br	10658 <__sfvwrite_r+0x2d8>
   106d0:	91000017 	ldw	r4,0(r18)
   106d4:	90800417 	ldw	r2,16(r18)
   106d8:	1100022e 	bgeu	r2,r4,106e4 <__sfvwrite_r+0x364>
   106dc:	8023883a 	mov	r17,r16
   106e0:	85003136 	bltu	r16,r20,107a8 <__sfvwrite_r+0x428>
   106e4:	91c00517 	ldw	r7,20(r18)
   106e8:	a1c01836 	bltu	r20,r7,1074c <__sfvwrite_r+0x3cc>
   106ec:	90c00917 	ldw	r3,36(r18)
   106f0:	91400717 	ldw	r5,28(r18)
   106f4:	e009883a 	mov	r4,fp
   106f8:	b80d883a 	mov	r6,r23
   106fc:	183ee83a 	callr	r3
   10700:	1021883a 	mov	r16,r2
   10704:	00bfb30e 	bge	zero,r2,105d4 <__sfvwrite_r+0x254>
   10708:	1023883a 	mov	r17,r2
   1070c:	1027883a 	mov	r19,r2
   10710:	003f9b06 	br	10580 <__sfvwrite_r+0x200>
   10714:	b80b883a 	mov	r5,r23
   10718:	800d883a 	mov	r6,r16
   1071c:	00110e00 	call	110e0 <memmove>
   10720:	90c00217 	ldw	r3,8(r18)
   10724:	90800017 	ldw	r2,0(r18)
   10728:	8023883a 	mov	r17,r16
   1072c:	1c07c83a 	sub	r3,r3,r16
   10730:	1405883a 	add	r2,r2,r16
   10734:	90c00215 	stw	r3,8(r18)
   10738:	90800015 	stw	r2,0(r18)
   1073c:	003fc406 	br	10650 <__sfvwrite_r+0x2d0>
   10740:	a00d883a 	mov	r6,r20
   10744:	a021883a 	mov	r16,r20
   10748:	003f8106 	br	10550 <__sfvwrite_r+0x1d0>
   1074c:	b80b883a 	mov	r5,r23
   10750:	a00d883a 	mov	r6,r20
   10754:	00110e00 	call	110e0 <memmove>
   10758:	90c00217 	ldw	r3,8(r18)
   1075c:	90800017 	ldw	r2,0(r18)
   10760:	a021883a 	mov	r16,r20
   10764:	1d07c83a 	sub	r3,r3,r20
   10768:	1505883a 	add	r2,r2,r20
   1076c:	a023883a 	mov	r17,r20
   10770:	a027883a 	mov	r19,r20
   10774:	90c00215 	stw	r3,8(r18)
   10778:	90800015 	stw	r2,0(r18)
   1077c:	003f8006 	br	10580 <__sfvwrite_r+0x200>
   10780:	b809883a 	mov	r4,r23
   10784:	01400284 	movi	r5,10
   10788:	980d883a 	mov	r6,r19
   1078c:	0010f5c0 	call	10f5c <memchr>
   10790:	10001726 	beq	r2,zero,107f0 <__sfvwrite_r+0x470>
   10794:	15c5c83a 	sub	r2,r2,r23
   10798:	15000044 	addi	r20,r2,1
   1079c:	00800044 	movi	r2,1
   107a0:	d8800015 	stw	r2,0(sp)
   107a4:	003f9806 	br	10608 <__sfvwrite_r+0x288>
   107a8:	b80b883a 	mov	r5,r23
   107ac:	800d883a 	mov	r6,r16
   107b0:	00110e00 	call	110e0 <memmove>
   107b4:	90c00017 	ldw	r3,0(r18)
   107b8:	e009883a 	mov	r4,fp
   107bc:	900b883a 	mov	r5,r18
   107c0:	1c07883a 	add	r3,r3,r16
   107c4:	90c00015 	stw	r3,0(r18)
   107c8:	8027883a 	mov	r19,r16
   107cc:	00119600 	call	11960 <_fflush_r>
   107d0:	103f6b26 	beq	r2,zero,10580 <__sfvwrite_r+0x200>
   107d4:	003f7f06 	br	105d4 <__sfvwrite_r+0x254>
   107d8:	400b883a 	mov	r5,r8
   107dc:	e009883a 	mov	r4,fp
   107e0:	00111c00 	call	111c0 <_realloc_r>
   107e4:	103f7626 	beq	r2,zero,105c0 <__sfvwrite_r+0x240>
   107e8:	1023883a 	mov	r17,r2
   107ec:	003f5006 	br	10530 <__sfvwrite_r+0x1b0>
   107f0:	00c00044 	movi	r3,1
   107f4:	9d000044 	addi	r20,r19,1
   107f8:	d8c00015 	stw	r3,0(sp)
   107fc:	003f8206 	br	10608 <__sfvwrite_r+0x288>
   10800:	9080030b 	ldhu	r2,12(r18)
   10804:	00c00244 	movi	r3,9
   10808:	013fffc4 	movi	r4,-1
   1080c:	10801014 	ori	r2,r2,64
   10810:	9080030d 	sth	r2,12(r18)
   10814:	e0c00015 	stw	r3,0(fp)
   10818:	003f0606 	br	10434 <__sfvwrite_r+0xb4>

0001081c <_malloc_r>:
   1081c:	defff604 	addi	sp,sp,-40
   10820:	28c002c4 	addi	r3,r5,11
   10824:	00800584 	movi	r2,22
   10828:	dc800215 	stw	r18,8(sp)
   1082c:	dfc00915 	stw	ra,36(sp)
   10830:	df000815 	stw	fp,32(sp)
   10834:	ddc00715 	stw	r23,28(sp)
   10838:	dd800615 	stw	r22,24(sp)
   1083c:	dd400515 	stw	r21,20(sp)
   10840:	dd000415 	stw	r20,16(sp)
   10844:	dcc00315 	stw	r19,12(sp)
   10848:	dc400115 	stw	r17,4(sp)
   1084c:	dc000015 	stw	r16,0(sp)
   10850:	2025883a 	mov	r18,r4
   10854:	10c01236 	bltu	r2,r3,108a0 <_malloc_r+0x84>
   10858:	04400404 	movi	r17,16
   1085c:	8940142e 	bgeu	r17,r5,108b0 <_malloc_r+0x94>
   10860:	00800304 	movi	r2,12
   10864:	0007883a 	mov	r3,zero
   10868:	90800015 	stw	r2,0(r18)
   1086c:	1805883a 	mov	r2,r3
   10870:	dfc00917 	ldw	ra,36(sp)
   10874:	df000817 	ldw	fp,32(sp)
   10878:	ddc00717 	ldw	r23,28(sp)
   1087c:	dd800617 	ldw	r22,24(sp)
   10880:	dd400517 	ldw	r21,20(sp)
   10884:	dd000417 	ldw	r20,16(sp)
   10888:	dcc00317 	ldw	r19,12(sp)
   1088c:	dc800217 	ldw	r18,8(sp)
   10890:	dc400117 	ldw	r17,4(sp)
   10894:	dc000017 	ldw	r16,0(sp)
   10898:	dec00a04 	addi	sp,sp,40
   1089c:	f800283a 	ret
   108a0:	00bffe04 	movi	r2,-8
   108a4:	18a2703a 	and	r17,r3,r2
   108a8:	883fed16 	blt	r17,zero,10860 <_malloc_r+0x44>
   108ac:	897fec36 	bltu	r17,r5,10860 <_malloc_r+0x44>
   108b0:	9009883a 	mov	r4,r18
   108b4:	00132680 	call	13268 <__malloc_lock>
   108b8:	00807dc4 	movi	r2,503
   108bc:	14402b2e 	bgeu	r2,r17,1096c <_malloc_r+0x150>
   108c0:	8806d27a 	srli	r3,r17,9
   108c4:	18003f1e 	bne	r3,zero,109c4 <_malloc_r+0x1a8>
   108c8:	880cd0fa 	srli	r6,r17,3
   108cc:	300490fa 	slli	r2,r6,3
   108d0:	02c00074 	movhi	r11,1
   108d4:	5ad65104 	addi	r11,r11,22852
   108d8:	12cb883a 	add	r5,r2,r11
   108dc:	2c000317 	ldw	r16,12(r5)
   108e0:	580f883a 	mov	r7,r11
   108e4:	2c00041e 	bne	r5,r16,108f8 <_malloc_r+0xdc>
   108e8:	00000a06 	br	10914 <_malloc_r+0xf8>
   108ec:	1800860e 	bge	r3,zero,10b08 <_malloc_r+0x2ec>
   108f0:	84000317 	ldw	r16,12(r16)
   108f4:	2c000726 	beq	r5,r16,10914 <_malloc_r+0xf8>
   108f8:	80800117 	ldw	r2,4(r16)
   108fc:	00ffff04 	movi	r3,-4
   10900:	10c8703a 	and	r4,r2,r3
   10904:	2447c83a 	sub	r3,r4,r17
   10908:	008003c4 	movi	r2,15
   1090c:	10fff70e 	bge	r2,r3,108ec <_malloc_r+0xd0>
   10910:	31bfffc4 	addi	r6,r6,-1
   10914:	32400044 	addi	r9,r6,1
   10918:	02800074 	movhi	r10,1
   1091c:	52965304 	addi	r10,r10,22860
   10920:	54000217 	ldw	r16,8(r10)
   10924:	8280a026 	beq	r16,r10,10ba8 <_malloc_r+0x38c>
   10928:	80800117 	ldw	r2,4(r16)
   1092c:	00ffff04 	movi	r3,-4
   10930:	10ca703a 	and	r5,r2,r3
   10934:	2c4dc83a 	sub	r6,r5,r17
   10938:	008003c4 	movi	r2,15
   1093c:	11808316 	blt	r2,r6,10b4c <_malloc_r+0x330>
   10940:	52800315 	stw	r10,12(r10)
   10944:	52800215 	stw	r10,8(r10)
   10948:	30002916 	blt	r6,zero,109f0 <_malloc_r+0x1d4>
   1094c:	8147883a 	add	r3,r16,r5
   10950:	18800117 	ldw	r2,4(r3)
   10954:	9009883a 	mov	r4,r18
   10958:	10800054 	ori	r2,r2,1
   1095c:	18800115 	stw	r2,4(r3)
   10960:	00132880 	call	13288 <__malloc_unlock>
   10964:	80c00204 	addi	r3,r16,8
   10968:	003fc006 	br	1086c <_malloc_r+0x50>
   1096c:	02c00074 	movhi	r11,1
   10970:	5ad65104 	addi	r11,r11,22852
   10974:	8ac5883a 	add	r2,r17,r11
   10978:	14000317 	ldw	r16,12(r2)
   1097c:	580f883a 	mov	r7,r11
   10980:	8806d0fa 	srli	r3,r17,3
   10984:	14006c26 	beq	r2,r16,10b38 <_malloc_r+0x31c>
   10988:	80c00117 	ldw	r3,4(r16)
   1098c:	00bfff04 	movi	r2,-4
   10990:	81800317 	ldw	r6,12(r16)
   10994:	1886703a 	and	r3,r3,r2
   10998:	80c7883a 	add	r3,r16,r3
   1099c:	18800117 	ldw	r2,4(r3)
   109a0:	81400217 	ldw	r5,8(r16)
   109a4:	9009883a 	mov	r4,r18
   109a8:	10800054 	ori	r2,r2,1
   109ac:	18800115 	stw	r2,4(r3)
   109b0:	31400215 	stw	r5,8(r6)
   109b4:	29800315 	stw	r6,12(r5)
   109b8:	00132880 	call	13288 <__malloc_unlock>
   109bc:	80c00204 	addi	r3,r16,8
   109c0:	003faa06 	br	1086c <_malloc_r+0x50>
   109c4:	00800104 	movi	r2,4
   109c8:	10c0052e 	bgeu	r2,r3,109e0 <_malloc_r+0x1c4>
   109cc:	00800504 	movi	r2,20
   109d0:	10c07836 	bltu	r2,r3,10bb4 <_malloc_r+0x398>
   109d4:	198016c4 	addi	r6,r3,91
   109d8:	300490fa 	slli	r2,r6,3
   109dc:	003fbc06 	br	108d0 <_malloc_r+0xb4>
   109e0:	8804d1ba 	srli	r2,r17,6
   109e4:	11800e04 	addi	r6,r2,56
   109e8:	300490fa 	slli	r2,r6,3
   109ec:	003fb806 	br	108d0 <_malloc_r+0xb4>
   109f0:	00807fc4 	movi	r2,511
   109f4:	1140bb36 	bltu	r2,r5,10ce4 <_malloc_r+0x4c8>
   109f8:	2806d0fa 	srli	r3,r5,3
   109fc:	573ffe04 	addi	fp,r10,-8
   10a00:	00800044 	movi	r2,1
   10a04:	180890fa 	slli	r4,r3,3
   10a08:	1807d0ba 	srai	r3,r3,2
   10a0c:	e1c00117 	ldw	r7,4(fp)
   10a10:	5909883a 	add	r4,r11,r4
   10a14:	21400217 	ldw	r5,8(r4)
   10a18:	10c4983a 	sll	r2,r2,r3
   10a1c:	81000315 	stw	r4,12(r16)
   10a20:	81400215 	stw	r5,8(r16)
   10a24:	388eb03a 	or	r7,r7,r2
   10a28:	2c000315 	stw	r16,12(r5)
   10a2c:	24000215 	stw	r16,8(r4)
   10a30:	e1c00115 	stw	r7,4(fp)
   10a34:	4807883a 	mov	r3,r9
   10a38:	4800cd16 	blt	r9,zero,10d70 <_malloc_r+0x554>
   10a3c:	1807d0ba 	srai	r3,r3,2
   10a40:	00800044 	movi	r2,1
   10a44:	10c8983a 	sll	r4,r2,r3
   10a48:	39004436 	bltu	r7,r4,10b5c <_malloc_r+0x340>
   10a4c:	21c4703a 	and	r2,r4,r7
   10a50:	10000a1e 	bne	r2,zero,10a7c <_malloc_r+0x260>
   10a54:	2109883a 	add	r4,r4,r4
   10a58:	00bfff04 	movi	r2,-4
   10a5c:	4884703a 	and	r2,r9,r2
   10a60:	3906703a 	and	r3,r7,r4
   10a64:	12400104 	addi	r9,r2,4
   10a68:	1800041e 	bne	r3,zero,10a7c <_malloc_r+0x260>
   10a6c:	2109883a 	add	r4,r4,r4
   10a70:	3904703a 	and	r2,r7,r4
   10a74:	4a400104 	addi	r9,r9,4
   10a78:	103ffc26 	beq	r2,zero,10a6c <_malloc_r+0x250>
   10a7c:	480490fa 	slli	r2,r9,3
   10a80:	4819883a 	mov	r12,r9
   10a84:	023fff04 	movi	r8,-4
   10a88:	589b883a 	add	r13,r11,r2
   10a8c:	6807883a 	mov	r3,r13
   10a90:	014003c4 	movi	r5,15
   10a94:	1c000317 	ldw	r16,12(r3)
   10a98:	1c00041e 	bne	r3,r16,10aac <_malloc_r+0x290>
   10a9c:	0000a706 	br	10d3c <_malloc_r+0x520>
   10aa0:	3000ab0e 	bge	r6,zero,10d50 <_malloc_r+0x534>
   10aa4:	84000317 	ldw	r16,12(r16)
   10aa8:	1c00a426 	beq	r3,r16,10d3c <_malloc_r+0x520>
   10aac:	80800117 	ldw	r2,4(r16)
   10ab0:	1204703a 	and	r2,r2,r8
   10ab4:	144dc83a 	sub	r6,r2,r17
   10ab8:	29bff90e 	bge	r5,r6,10aa0 <_malloc_r+0x284>
   10abc:	81000317 	ldw	r4,12(r16)
   10ac0:	80c00217 	ldw	r3,8(r16)
   10ac4:	89400054 	ori	r5,r17,1
   10ac8:	8445883a 	add	r2,r16,r17
   10acc:	20c00215 	stw	r3,8(r4)
   10ad0:	19000315 	stw	r4,12(r3)
   10ad4:	81400115 	stw	r5,4(r16)
   10ad8:	1187883a 	add	r3,r2,r6
   10adc:	31000054 	ori	r4,r6,1
   10ae0:	50800315 	stw	r2,12(r10)
   10ae4:	50800215 	stw	r2,8(r10)
   10ae8:	19800015 	stw	r6,0(r3)
   10aec:	11000115 	stw	r4,4(r2)
   10af0:	12800215 	stw	r10,8(r2)
   10af4:	12800315 	stw	r10,12(r2)
   10af8:	9009883a 	mov	r4,r18
   10afc:	00132880 	call	13288 <__malloc_unlock>
   10b00:	80c00204 	addi	r3,r16,8
   10b04:	003f5906 	br	1086c <_malloc_r+0x50>
   10b08:	8109883a 	add	r4,r16,r4
   10b0c:	20800117 	ldw	r2,4(r4)
   10b10:	80c00217 	ldw	r3,8(r16)
   10b14:	81400317 	ldw	r5,12(r16)
   10b18:	10800054 	ori	r2,r2,1
   10b1c:	20800115 	stw	r2,4(r4)
   10b20:	28c00215 	stw	r3,8(r5)
   10b24:	19400315 	stw	r5,12(r3)
   10b28:	9009883a 	mov	r4,r18
   10b2c:	00132880 	call	13288 <__malloc_unlock>
   10b30:	80c00204 	addi	r3,r16,8
   10b34:	003f4d06 	br	1086c <_malloc_r+0x50>
   10b38:	80800204 	addi	r2,r16,8
   10b3c:	14000317 	ldw	r16,12(r2)
   10b40:	143f911e 	bne	r2,r16,10988 <_malloc_r+0x16c>
   10b44:	1a400084 	addi	r9,r3,2
   10b48:	003f7306 	br	10918 <_malloc_r+0xfc>
   10b4c:	88c00054 	ori	r3,r17,1
   10b50:	8445883a 	add	r2,r16,r17
   10b54:	80c00115 	stw	r3,4(r16)
   10b58:	003fdf06 	br	10ad8 <_malloc_r+0x2bc>
   10b5c:	e4000217 	ldw	r16,8(fp)
   10b60:	00bfff04 	movi	r2,-4
   10b64:	80c00117 	ldw	r3,4(r16)
   10b68:	802d883a 	mov	r22,r16
   10b6c:	18aa703a 	and	r21,r3,r2
   10b70:	ac401636 	bltu	r21,r17,10bcc <_malloc_r+0x3b0>
   10b74:	ac49c83a 	sub	r4,r21,r17
   10b78:	008003c4 	movi	r2,15
   10b7c:	1100130e 	bge	r2,r4,10bcc <_malloc_r+0x3b0>
   10b80:	88800054 	ori	r2,r17,1
   10b84:	8447883a 	add	r3,r16,r17
   10b88:	80800115 	stw	r2,4(r16)
   10b8c:	20800054 	ori	r2,r4,1
   10b90:	18800115 	stw	r2,4(r3)
   10b94:	e0c00215 	stw	r3,8(fp)
   10b98:	9009883a 	mov	r4,r18
   10b9c:	00132880 	call	13288 <__malloc_unlock>
   10ba0:	80c00204 	addi	r3,r16,8
   10ba4:	003f3106 	br	1086c <_malloc_r+0x50>
   10ba8:	39c00117 	ldw	r7,4(r7)
   10bac:	573ffe04 	addi	fp,r10,-8
   10bb0:	003fa006 	br	10a34 <_malloc_r+0x218>
   10bb4:	00801504 	movi	r2,84
   10bb8:	10c06736 	bltu	r2,r3,10d58 <_malloc_r+0x53c>
   10bbc:	8804d33a 	srli	r2,r17,12
   10bc0:	11801b84 	addi	r6,r2,110
   10bc4:	300490fa 	slli	r2,r6,3
   10bc8:	003f4106 	br	108d0 <_malloc_r+0xb4>
   10bcc:	d0a6a017 	ldw	r2,-25984(gp)
   10bd0:	d0e00317 	ldw	r3,-32756(gp)
   10bd4:	053fffc4 	movi	r20,-1
   10bd8:	10800404 	addi	r2,r2,16
   10bdc:	88a7883a 	add	r19,r17,r2
   10be0:	1d000326 	beq	r3,r20,10bf0 <_malloc_r+0x3d4>
   10be4:	98c3ffc4 	addi	r3,r19,4095
   10be8:	00bc0004 	movi	r2,-4096
   10bec:	18a6703a 	and	r19,r3,r2
   10bf0:	9009883a 	mov	r4,r18
   10bf4:	980b883a 	mov	r5,r19
   10bf8:	00117b40 	call	117b4 <_sbrk_r>
   10bfc:	1009883a 	mov	r4,r2
   10c00:	15000426 	beq	r2,r20,10c14 <_malloc_r+0x3f8>
   10c04:	854b883a 	add	r5,r16,r21
   10c08:	1029883a 	mov	r20,r2
   10c0c:	11405a2e 	bgeu	r2,r5,10d78 <_malloc_r+0x55c>
   10c10:	87000c26 	beq	r16,fp,10c44 <_malloc_r+0x428>
   10c14:	e4000217 	ldw	r16,8(fp)
   10c18:	80c00117 	ldw	r3,4(r16)
   10c1c:	00bfff04 	movi	r2,-4
   10c20:	1884703a 	and	r2,r3,r2
   10c24:	14400336 	bltu	r2,r17,10c34 <_malloc_r+0x418>
   10c28:	1449c83a 	sub	r4,r2,r17
   10c2c:	008003c4 	movi	r2,15
   10c30:	113fd316 	blt	r2,r4,10b80 <_malloc_r+0x364>
   10c34:	9009883a 	mov	r4,r18
   10c38:	00132880 	call	13288 <__malloc_unlock>
   10c3c:	0007883a 	mov	r3,zero
   10c40:	003f0a06 	br	1086c <_malloc_r+0x50>
   10c44:	05c000b4 	movhi	r23,2
   10c48:	bde27f04 	addi	r23,r23,-30212
   10c4c:	b8800017 	ldw	r2,0(r23)
   10c50:	988d883a 	add	r6,r19,r2
   10c54:	b9800015 	stw	r6,0(r23)
   10c58:	d0e00317 	ldw	r3,-32756(gp)
   10c5c:	00bfffc4 	movi	r2,-1
   10c60:	18808e26 	beq	r3,r2,10e9c <_malloc_r+0x680>
   10c64:	2145c83a 	sub	r2,r4,r5
   10c68:	3085883a 	add	r2,r6,r2
   10c6c:	b8800015 	stw	r2,0(r23)
   10c70:	20c001cc 	andi	r3,r4,7
   10c74:	18005f1e 	bne	r3,zero,10df4 <_malloc_r+0x5d8>
   10c78:	000b883a 	mov	r5,zero
   10c7c:	a4c5883a 	add	r2,r20,r19
   10c80:	1083ffcc 	andi	r2,r2,4095
   10c84:	00c40004 	movi	r3,4096
   10c88:	1887c83a 	sub	r3,r3,r2
   10c8c:	28e7883a 	add	r19,r5,r3
   10c90:	9009883a 	mov	r4,r18
   10c94:	980b883a 	mov	r5,r19
   10c98:	00117b40 	call	117b4 <_sbrk_r>
   10c9c:	1007883a 	mov	r3,r2
   10ca0:	00bfffc4 	movi	r2,-1
   10ca4:	18807a26 	beq	r3,r2,10e90 <_malloc_r+0x674>
   10ca8:	1d05c83a 	sub	r2,r3,r20
   10cac:	9885883a 	add	r2,r19,r2
   10cb0:	10c00054 	ori	r3,r2,1
   10cb4:	b8800017 	ldw	r2,0(r23)
   10cb8:	a021883a 	mov	r16,r20
   10cbc:	a0c00115 	stw	r3,4(r20)
   10cc0:	9885883a 	add	r2,r19,r2
   10cc4:	b8800015 	stw	r2,0(r23)
   10cc8:	e5000215 	stw	r20,8(fp)
   10ccc:	b7003626 	beq	r22,fp,10da8 <_malloc_r+0x58c>
   10cd0:	018003c4 	movi	r6,15
   10cd4:	35404b36 	bltu	r6,r21,10e04 <_malloc_r+0x5e8>
   10cd8:	00800044 	movi	r2,1
   10cdc:	a0800115 	stw	r2,4(r20)
   10ce0:	003fcd06 	br	10c18 <_malloc_r+0x3fc>
   10ce4:	2808d27a 	srli	r4,r5,9
   10ce8:	2000371e 	bne	r4,zero,10dc8 <_malloc_r+0x5ac>
   10cec:	2808d0fa 	srli	r4,r5,3
   10cf0:	200690fa 	slli	r3,r4,3
   10cf4:	1ad1883a 	add	r8,r3,r11
   10cf8:	41800217 	ldw	r6,8(r8)
   10cfc:	41805b26 	beq	r8,r6,10e6c <_malloc_r+0x650>
   10d00:	30800117 	ldw	r2,4(r6)
   10d04:	00ffff04 	movi	r3,-4
   10d08:	10c4703a 	and	r2,r2,r3
   10d0c:	2880022e 	bgeu	r5,r2,10d18 <_malloc_r+0x4fc>
   10d10:	31800217 	ldw	r6,8(r6)
   10d14:	41bffa1e 	bne	r8,r6,10d00 <_malloc_r+0x4e4>
   10d18:	32000317 	ldw	r8,12(r6)
   10d1c:	39c00117 	ldw	r7,4(r7)
   10d20:	82000315 	stw	r8,12(r16)
   10d24:	81800215 	stw	r6,8(r16)
   10d28:	07000074 	movhi	fp,1
   10d2c:	e7165104 	addi	fp,fp,22852
   10d30:	34000315 	stw	r16,12(r6)
   10d34:	44000215 	stw	r16,8(r8)
   10d38:	003f3e06 	br	10a34 <_malloc_r+0x218>
   10d3c:	63000044 	addi	r12,r12,1
   10d40:	608000cc 	andi	r2,r12,3
   10d44:	10005d26 	beq	r2,zero,10ebc <_malloc_r+0x6a0>
   10d48:	18c00204 	addi	r3,r3,8
   10d4c:	003f5106 	br	10a94 <_malloc_r+0x278>
   10d50:	8089883a 	add	r4,r16,r2
   10d54:	003f6d06 	br	10b0c <_malloc_r+0x2f0>
   10d58:	00805504 	movi	r2,340
   10d5c:	10c02036 	bltu	r2,r3,10de0 <_malloc_r+0x5c4>
   10d60:	8804d3fa 	srli	r2,r17,15
   10d64:	11801dc4 	addi	r6,r2,119
   10d68:	300490fa 	slli	r2,r6,3
   10d6c:	003ed806 	br	108d0 <_malloc_r+0xb4>
   10d70:	48c000c4 	addi	r3,r9,3
   10d74:	003f3106 	br	10a3c <_malloc_r+0x220>
   10d78:	05c000b4 	movhi	r23,2
   10d7c:	bde27f04 	addi	r23,r23,-30212
   10d80:	b8800017 	ldw	r2,0(r23)
   10d84:	988d883a 	add	r6,r19,r2
   10d88:	b9800015 	stw	r6,0(r23)
   10d8c:	293fb21e 	bne	r5,r4,10c58 <_malloc_r+0x43c>
   10d90:	2083ffcc 	andi	r2,r4,4095
   10d94:	103fb01e 	bne	r2,zero,10c58 <_malloc_r+0x43c>
   10d98:	e4000217 	ldw	r16,8(fp)
   10d9c:	9d45883a 	add	r2,r19,r21
   10da0:	10800054 	ori	r2,r2,1
   10da4:	80800115 	stw	r2,4(r16)
   10da8:	b8c00017 	ldw	r3,0(r23)
   10dac:	d0a6a117 	ldw	r2,-25980(gp)
   10db0:	10c0012e 	bgeu	r2,r3,10db8 <_malloc_r+0x59c>
   10db4:	d0e6a115 	stw	r3,-25980(gp)
   10db8:	d0a6a217 	ldw	r2,-25976(gp)
   10dbc:	10ff962e 	bgeu	r2,r3,10c18 <_malloc_r+0x3fc>
   10dc0:	d0e6a215 	stw	r3,-25976(gp)
   10dc4:	003f9406 	br	10c18 <_malloc_r+0x3fc>
   10dc8:	00800104 	movi	r2,4
   10dcc:	11001e36 	bltu	r2,r4,10e48 <_malloc_r+0x62c>
   10dd0:	2804d1ba 	srli	r2,r5,6
   10dd4:	11000e04 	addi	r4,r2,56
   10dd8:	200690fa 	slli	r3,r4,3
   10ddc:	003fc506 	br	10cf4 <_malloc_r+0x4d8>
   10de0:	00815504 	movi	r2,1364
   10de4:	10c01d2e 	bgeu	r2,r3,10e5c <_malloc_r+0x640>
   10de8:	01801f84 	movi	r6,126
   10dec:	0080fc04 	movi	r2,1008
   10df0:	003eb706 	br	108d0 <_malloc_r+0xb4>
   10df4:	00800204 	movi	r2,8
   10df8:	10cbc83a 	sub	r5,r2,r3
   10dfc:	2169883a 	add	r20,r4,r5
   10e00:	003f9e06 	br	10c7c <_malloc_r+0x460>
   10e04:	00bffe04 	movi	r2,-8
   10e08:	a93ffd04 	addi	r4,r21,-12
   10e0c:	2088703a 	and	r4,r4,r2
   10e10:	b10b883a 	add	r5,r22,r4
   10e14:	00c00144 	movi	r3,5
   10e18:	28c00215 	stw	r3,8(r5)
   10e1c:	28c00115 	stw	r3,4(r5)
   10e20:	b0800117 	ldw	r2,4(r22)
   10e24:	1080004c 	andi	r2,r2,1
   10e28:	2084b03a 	or	r2,r4,r2
   10e2c:	b0800115 	stw	r2,4(r22)
   10e30:	313fdd2e 	bgeu	r6,r4,10da8 <_malloc_r+0x58c>
   10e34:	b1400204 	addi	r5,r22,8
   10e38:	9009883a 	mov	r4,r18
   10e3c:	0011fb00 	call	11fb0 <_free_r>
   10e40:	e4000217 	ldw	r16,8(fp)
   10e44:	003fd806 	br	10da8 <_malloc_r+0x58c>
   10e48:	00800504 	movi	r2,20
   10e4c:	11001536 	bltu	r2,r4,10ea4 <_malloc_r+0x688>
   10e50:	210016c4 	addi	r4,r4,91
   10e54:	200690fa 	slli	r3,r4,3
   10e58:	003fa606 	br	10cf4 <_malloc_r+0x4d8>
   10e5c:	8804d4ba 	srli	r2,r17,18
   10e60:	11801f04 	addi	r6,r2,124
   10e64:	300490fa 	slli	r2,r6,3
   10e68:	003e9906 	br	108d0 <_malloc_r+0xb4>
   10e6c:	2009d0ba 	srai	r4,r4,2
   10e70:	01400074 	movhi	r5,1
   10e74:	29565104 	addi	r5,r5,22852
   10e78:	00c00044 	movi	r3,1
   10e7c:	28800117 	ldw	r2,4(r5)
   10e80:	1906983a 	sll	r3,r3,r4
   10e84:	10c4b03a 	or	r2,r2,r3
   10e88:	28800115 	stw	r2,4(r5)
   10e8c:	003fa306 	br	10d1c <_malloc_r+0x500>
   10e90:	0027883a 	mov	r19,zero
   10e94:	00c00044 	movi	r3,1
   10e98:	003f8606 	br	10cb4 <_malloc_r+0x498>
   10e9c:	d1200315 	stw	r4,-32756(gp)
   10ea0:	003f7306 	br	10c70 <_malloc_r+0x454>
   10ea4:	00801504 	movi	r2,84
   10ea8:	11001936 	bltu	r2,r4,10f10 <_malloc_r+0x6f4>
   10eac:	2804d33a 	srli	r2,r5,12
   10eb0:	11001b84 	addi	r4,r2,110
   10eb4:	200690fa 	slli	r3,r4,3
   10eb8:	003f8e06 	br	10cf4 <_malloc_r+0x4d8>
   10ebc:	480b883a 	mov	r5,r9
   10ec0:	6807883a 	mov	r3,r13
   10ec4:	288000cc 	andi	r2,r5,3
   10ec8:	18fffe04 	addi	r3,r3,-8
   10ecc:	297fffc4 	addi	r5,r5,-1
   10ed0:	10001526 	beq	r2,zero,10f28 <_malloc_r+0x70c>
   10ed4:	18800217 	ldw	r2,8(r3)
   10ed8:	10fffa26 	beq	r2,r3,10ec4 <_malloc_r+0x6a8>
   10edc:	2109883a 	add	r4,r4,r4
   10ee0:	393f1e36 	bltu	r7,r4,10b5c <_malloc_r+0x340>
   10ee4:	203f1d26 	beq	r4,zero,10b5c <_malloc_r+0x340>
   10ee8:	21c4703a 	and	r2,r4,r7
   10eec:	10000226 	beq	r2,zero,10ef8 <_malloc_r+0x6dc>
   10ef0:	6013883a 	mov	r9,r12
   10ef4:	003ee106 	br	10a7c <_malloc_r+0x260>
   10ef8:	2109883a 	add	r4,r4,r4
   10efc:	3904703a 	and	r2,r7,r4
   10f00:	63000104 	addi	r12,r12,4
   10f04:	103ffc26 	beq	r2,zero,10ef8 <_malloc_r+0x6dc>
   10f08:	6013883a 	mov	r9,r12
   10f0c:	003edb06 	br	10a7c <_malloc_r+0x260>
   10f10:	00805504 	movi	r2,340
   10f14:	11000836 	bltu	r2,r4,10f38 <_malloc_r+0x71c>
   10f18:	2804d3fa 	srli	r2,r5,15
   10f1c:	11001dc4 	addi	r4,r2,119
   10f20:	200690fa 	slli	r3,r4,3
   10f24:	003f7306 	br	10cf4 <_malloc_r+0x4d8>
   10f28:	0104303a 	nor	r2,zero,r4
   10f2c:	388e703a 	and	r7,r7,r2
   10f30:	e1c00115 	stw	r7,4(fp)
   10f34:	003fe906 	br	10edc <_malloc_r+0x6c0>
   10f38:	00815504 	movi	r2,1364
   10f3c:	1100032e 	bgeu	r2,r4,10f4c <_malloc_r+0x730>
   10f40:	01001f84 	movi	r4,126
   10f44:	00c0fc04 	movi	r3,1008
   10f48:	003f6a06 	br	10cf4 <_malloc_r+0x4d8>
   10f4c:	2804d4ba 	srli	r2,r5,18
   10f50:	11001f04 	addi	r4,r2,124
   10f54:	200690fa 	slli	r3,r4,3
   10f58:	003f6606 	br	10cf4 <_malloc_r+0x4d8>

00010f5c <memchr>:
   10f5c:	008000c4 	movi	r2,3
   10f60:	29403fcc 	andi	r5,r5,255
   10f64:	2007883a 	mov	r3,r4
   10f68:	1180022e 	bgeu	r2,r6,10f74 <memchr+0x18>
   10f6c:	2084703a 	and	r2,r4,r2
   10f70:	10000b26 	beq	r2,zero,10fa0 <memchr+0x44>
   10f74:	313fffc4 	addi	r4,r6,-1
   10f78:	3000051e 	bne	r6,zero,10f90 <memchr+0x34>
   10f7c:	00002c06 	br	11030 <memchr+0xd4>
   10f80:	213fffc4 	addi	r4,r4,-1
   10f84:	00bfffc4 	movi	r2,-1
   10f88:	18c00044 	addi	r3,r3,1
   10f8c:	20802826 	beq	r4,r2,11030 <memchr+0xd4>
   10f90:	18800003 	ldbu	r2,0(r3)
   10f94:	28bffa1e 	bne	r5,r2,10f80 <memchr+0x24>
   10f98:	1805883a 	mov	r2,r3
   10f9c:	f800283a 	ret
   10fa0:	0011883a 	mov	r8,zero
   10fa4:	0007883a 	mov	r3,zero
   10fa8:	01c00104 	movi	r7,4
   10fac:	4004923a 	slli	r2,r8,8
   10fb0:	18c00044 	addi	r3,r3,1
   10fb4:	1151883a 	add	r8,r2,r5
   10fb8:	19fffc1e 	bne	r3,r7,10fac <memchr+0x50>
   10fbc:	02bfbff4 	movhi	r10,65279
   10fc0:	52bfbfc4 	addi	r10,r10,-257
   10fc4:	02602074 	movhi	r9,32897
   10fc8:	4a602004 	addi	r9,r9,-32640
   10fcc:	02c000c4 	movi	r11,3
   10fd0:	20800017 	ldw	r2,0(r4)
   10fd4:	31bfff04 	addi	r6,r6,-4
   10fd8:	200f883a 	mov	r7,r4
   10fdc:	1204f03a 	xor	r2,r2,r8
   10fe0:	1287883a 	add	r3,r2,r10
   10fe4:	1a46703a 	and	r3,r3,r9
   10fe8:	0084303a 	nor	r2,zero,r2
   10fec:	10c4703a 	and	r2,r2,r3
   10ff0:	10000b26 	beq	r2,zero,11020 <memchr+0xc4>
   10ff4:	20800003 	ldbu	r2,0(r4)
   10ff8:	28800f26 	beq	r5,r2,11038 <memchr+0xdc>
   10ffc:	20800043 	ldbu	r2,1(r4)
   11000:	21c00044 	addi	r7,r4,1
   11004:	28800c26 	beq	r5,r2,11038 <memchr+0xdc>
   11008:	20800083 	ldbu	r2,2(r4)
   1100c:	21c00084 	addi	r7,r4,2
   11010:	28800926 	beq	r5,r2,11038 <memchr+0xdc>
   11014:	208000c3 	ldbu	r2,3(r4)
   11018:	21c000c4 	addi	r7,r4,3
   1101c:	28800626 	beq	r5,r2,11038 <memchr+0xdc>
   11020:	21000104 	addi	r4,r4,4
   11024:	59bfea36 	bltu	r11,r6,10fd0 <memchr+0x74>
   11028:	2007883a 	mov	r3,r4
   1102c:	003fd106 	br	10f74 <memchr+0x18>
   11030:	0005883a 	mov	r2,zero
   11034:	f800283a 	ret
   11038:	3805883a 	mov	r2,r7
   1103c:	f800283a 	ret

00011040 <memcpy>:
   11040:	01c003c4 	movi	r7,15
   11044:	2007883a 	mov	r3,r4
   11048:	3980032e 	bgeu	r7,r6,11058 <memcpy+0x18>
   1104c:	2904b03a 	or	r2,r5,r4
   11050:	108000cc 	andi	r2,r2,3
   11054:	10000926 	beq	r2,zero,1107c <memcpy+0x3c>
   11058:	30000626 	beq	r6,zero,11074 <memcpy+0x34>
   1105c:	30cd883a 	add	r6,r6,r3
   11060:	28800003 	ldbu	r2,0(r5)
   11064:	29400044 	addi	r5,r5,1
   11068:	18800005 	stb	r2,0(r3)
   1106c:	18c00044 	addi	r3,r3,1
   11070:	30fffb1e 	bne	r6,r3,11060 <memcpy+0x20>
   11074:	2005883a 	mov	r2,r4
   11078:	f800283a 	ret
   1107c:	3811883a 	mov	r8,r7
   11080:	200f883a 	mov	r7,r4
   11084:	28c00017 	ldw	r3,0(r5)
   11088:	31bffc04 	addi	r6,r6,-16
   1108c:	38c00015 	stw	r3,0(r7)
   11090:	28800117 	ldw	r2,4(r5)
   11094:	38800115 	stw	r2,4(r7)
   11098:	28c00217 	ldw	r3,8(r5)
   1109c:	38c00215 	stw	r3,8(r7)
   110a0:	28800317 	ldw	r2,12(r5)
   110a4:	29400404 	addi	r5,r5,16
   110a8:	38800315 	stw	r2,12(r7)
   110ac:	39c00404 	addi	r7,r7,16
   110b0:	41bff436 	bltu	r8,r6,11084 <memcpy+0x44>
   110b4:	008000c4 	movi	r2,3
   110b8:	1180072e 	bgeu	r2,r6,110d8 <memcpy+0x98>
   110bc:	1007883a 	mov	r3,r2
   110c0:	28800017 	ldw	r2,0(r5)
   110c4:	31bfff04 	addi	r6,r6,-4
   110c8:	29400104 	addi	r5,r5,4
   110cc:	38800015 	stw	r2,0(r7)
   110d0:	39c00104 	addi	r7,r7,4
   110d4:	19bffa36 	bltu	r3,r6,110c0 <memcpy+0x80>
   110d8:	3807883a 	mov	r3,r7
   110dc:	003fde06 	br	11058 <memcpy+0x18>

000110e0 <memmove>:
   110e0:	2807883a 	mov	r3,r5
   110e4:	2011883a 	mov	r8,r4
   110e8:	29000c2e 	bgeu	r5,r4,1111c <memmove+0x3c>
   110ec:	298f883a 	add	r7,r5,r6
   110f0:	21c00a2e 	bgeu	r4,r7,1111c <memmove+0x3c>
   110f4:	30000726 	beq	r6,zero,11114 <memmove+0x34>
   110f8:	2187883a 	add	r3,r4,r6
   110fc:	198dc83a 	sub	r6,r3,r6
   11100:	39ffffc4 	addi	r7,r7,-1
   11104:	38800003 	ldbu	r2,0(r7)
   11108:	18ffffc4 	addi	r3,r3,-1
   1110c:	18800005 	stb	r2,0(r3)
   11110:	19bffb1e 	bne	r3,r6,11100 <memmove+0x20>
   11114:	2005883a 	mov	r2,r4
   11118:	f800283a 	ret
   1111c:	01c003c4 	movi	r7,15
   11120:	39800a36 	bltu	r7,r6,1114c <memmove+0x6c>
   11124:	303ffb26 	beq	r6,zero,11114 <memmove+0x34>
   11128:	400f883a 	mov	r7,r8
   1112c:	320d883a 	add	r6,r6,r8
   11130:	28800003 	ldbu	r2,0(r5)
   11134:	29400044 	addi	r5,r5,1
   11138:	38800005 	stb	r2,0(r7)
   1113c:	39c00044 	addi	r7,r7,1
   11140:	39bffb1e 	bne	r7,r6,11130 <memmove+0x50>
   11144:	2005883a 	mov	r2,r4
   11148:	f800283a 	ret
   1114c:	1904b03a 	or	r2,r3,r4
   11150:	108000cc 	andi	r2,r2,3
   11154:	103ff31e 	bne	r2,zero,11124 <memmove+0x44>
   11158:	3811883a 	mov	r8,r7
   1115c:	180b883a 	mov	r5,r3
   11160:	200f883a 	mov	r7,r4
   11164:	28c00017 	ldw	r3,0(r5)
   11168:	31bffc04 	addi	r6,r6,-16
   1116c:	38c00015 	stw	r3,0(r7)
   11170:	28800117 	ldw	r2,4(r5)
   11174:	38800115 	stw	r2,4(r7)
   11178:	28c00217 	ldw	r3,8(r5)
   1117c:	38c00215 	stw	r3,8(r7)
   11180:	28800317 	ldw	r2,12(r5)
   11184:	29400404 	addi	r5,r5,16
   11188:	38800315 	stw	r2,12(r7)
   1118c:	39c00404 	addi	r7,r7,16
   11190:	41bff436 	bltu	r8,r6,11164 <memmove+0x84>
   11194:	008000c4 	movi	r2,3
   11198:	1180072e 	bgeu	r2,r6,111b8 <memmove+0xd8>
   1119c:	1007883a 	mov	r3,r2
   111a0:	28800017 	ldw	r2,0(r5)
   111a4:	31bfff04 	addi	r6,r6,-4
   111a8:	29400104 	addi	r5,r5,4
   111ac:	38800015 	stw	r2,0(r7)
   111b0:	39c00104 	addi	r7,r7,4
   111b4:	19bffa36 	bltu	r3,r6,111a0 <memmove+0xc0>
   111b8:	3811883a 	mov	r8,r7
   111bc:	003fd906 	br	11124 <memmove+0x44>

000111c0 <_realloc_r>:
   111c0:	defff404 	addi	sp,sp,-48
   111c4:	dd800815 	stw	r22,32(sp)
   111c8:	dc800415 	stw	r18,16(sp)
   111cc:	dc400315 	stw	r17,12(sp)
   111d0:	dfc00b15 	stw	ra,44(sp)
   111d4:	df000a15 	stw	fp,40(sp)
   111d8:	ddc00915 	stw	r23,36(sp)
   111dc:	dd400715 	stw	r21,28(sp)
   111e0:	dd000615 	stw	r20,24(sp)
   111e4:	dcc00515 	stw	r19,20(sp)
   111e8:	dc000215 	stw	r16,8(sp)
   111ec:	2825883a 	mov	r18,r5
   111f0:	3023883a 	mov	r17,r6
   111f4:	202d883a 	mov	r22,r4
   111f8:	2800c926 	beq	r5,zero,11520 <_realloc_r+0x360>
   111fc:	00132680 	call	13268 <__malloc_lock>
   11200:	943ffe04 	addi	r16,r18,-8
   11204:	88c002c4 	addi	r3,r17,11
   11208:	00800584 	movi	r2,22
   1120c:	82000117 	ldw	r8,4(r16)
   11210:	10c01b2e 	bgeu	r2,r3,11280 <_realloc_r+0xc0>
   11214:	00bffe04 	movi	r2,-8
   11218:	188e703a 	and	r7,r3,r2
   1121c:	3839883a 	mov	fp,r7
   11220:	38001a16 	blt	r7,zero,1128c <_realloc_r+0xcc>
   11224:	e4401936 	bltu	fp,r17,1128c <_realloc_r+0xcc>
   11228:	013fff04 	movi	r4,-4
   1122c:	4126703a 	and	r19,r8,r4
   11230:	99c02616 	blt	r19,r7,112cc <_realloc_r+0x10c>
   11234:	802b883a 	mov	r21,r16
   11238:	9829883a 	mov	r20,r19
   1123c:	84000204 	addi	r16,r16,8
   11240:	a80f883a 	mov	r7,r21
   11244:	a70dc83a 	sub	r6,r20,fp
   11248:	008003c4 	movi	r2,15
   1124c:	1180c136 	bltu	r2,r6,11554 <_realloc_r+0x394>
   11250:	38800117 	ldw	r2,4(r7)
   11254:	a549883a 	add	r4,r20,r21
   11258:	1080004c 	andi	r2,r2,1
   1125c:	a084b03a 	or	r2,r20,r2
   11260:	38800115 	stw	r2,4(r7)
   11264:	20c00117 	ldw	r3,4(r4)
   11268:	18c00054 	ori	r3,r3,1
   1126c:	20c00115 	stw	r3,4(r4)
   11270:	b009883a 	mov	r4,r22
   11274:	00132880 	call	13288 <__malloc_unlock>
   11278:	8023883a 	mov	r17,r16
   1127c:	00000606 	br	11298 <_realloc_r+0xd8>
   11280:	01c00404 	movi	r7,16
   11284:	3839883a 	mov	fp,r7
   11288:	e47fe72e 	bgeu	fp,r17,11228 <_realloc_r+0x68>
   1128c:	00800304 	movi	r2,12
   11290:	0023883a 	mov	r17,zero
   11294:	b0800015 	stw	r2,0(r22)
   11298:	8805883a 	mov	r2,r17
   1129c:	dfc00b17 	ldw	ra,44(sp)
   112a0:	df000a17 	ldw	fp,40(sp)
   112a4:	ddc00917 	ldw	r23,36(sp)
   112a8:	dd800817 	ldw	r22,32(sp)
   112ac:	dd400717 	ldw	r21,28(sp)
   112b0:	dd000617 	ldw	r20,24(sp)
   112b4:	dcc00517 	ldw	r19,20(sp)
   112b8:	dc800417 	ldw	r18,16(sp)
   112bc:	dc400317 	ldw	r17,12(sp)
   112c0:	dc000217 	ldw	r16,8(sp)
   112c4:	dec00c04 	addi	sp,sp,48
   112c8:	f800283a 	ret
   112cc:	00800074 	movhi	r2,1
   112d0:	10965104 	addi	r2,r2,22852
   112d4:	12400217 	ldw	r9,8(r2)
   112d8:	84cd883a 	add	r6,r16,r19
   112dc:	802b883a 	mov	r21,r16
   112e0:	3240b926 	beq	r6,r9,115c8 <_realloc_r+0x408>
   112e4:	31400117 	ldw	r5,4(r6)
   112e8:	00bfff84 	movi	r2,-2
   112ec:	2884703a 	and	r2,r5,r2
   112f0:	1185883a 	add	r2,r2,r6
   112f4:	10c00117 	ldw	r3,4(r2)
   112f8:	18c0004c 	andi	r3,r3,1
   112fc:	1807003a 	cmpeq	r3,r3,zero
   11300:	1800a326 	beq	r3,zero,11590 <_realloc_r+0x3d0>
   11304:	2908703a 	and	r4,r5,r4
   11308:	9929883a 	add	r20,r19,r4
   1130c:	a1c0a30e 	bge	r20,r7,1159c <_realloc_r+0x3dc>
   11310:	4080004c 	andi	r2,r8,1
   11314:	1000551e 	bne	r2,zero,1146c <_realloc_r+0x2ac>
   11318:	80800017 	ldw	r2,0(r16)
   1131c:	80afc83a 	sub	r23,r16,r2
   11320:	b8c00117 	ldw	r3,4(r23)
   11324:	00bfff04 	movi	r2,-4
   11328:	1884703a 	and	r2,r3,r2
   1132c:	30002e26 	beq	r6,zero,113e8 <_realloc_r+0x228>
   11330:	3240b926 	beq	r6,r9,11618 <_realloc_r+0x458>
   11334:	98a9883a 	add	r20,r19,r2
   11338:	2509883a 	add	r4,r4,r20
   1133c:	d9000015 	stw	r4,0(sp)
   11340:	21c02a16 	blt	r4,r7,113ec <_realloc_r+0x22c>
   11344:	30800317 	ldw	r2,12(r6)
   11348:	30c00217 	ldw	r3,8(r6)
   1134c:	01400904 	movi	r5,36
   11350:	99bfff04 	addi	r6,r19,-4
   11354:	18800315 	stw	r2,12(r3)
   11358:	10c00215 	stw	r3,8(r2)
   1135c:	b9000317 	ldw	r4,12(r23)
   11360:	b8800217 	ldw	r2,8(r23)
   11364:	b82b883a 	mov	r21,r23
   11368:	bc000204 	addi	r16,r23,8
   1136c:	20800215 	stw	r2,8(r4)
   11370:	11000315 	stw	r4,12(r2)
   11374:	2980e436 	bltu	r5,r6,11708 <_realloc_r+0x548>
   11378:	008004c4 	movi	r2,19
   1137c:	9009883a 	mov	r4,r18
   11380:	8011883a 	mov	r8,r16
   11384:	11800f2e 	bgeu	r2,r6,113c4 <_realloc_r+0x204>
   11388:	90800017 	ldw	r2,0(r18)
   1138c:	ba000404 	addi	r8,r23,16
   11390:	91000204 	addi	r4,r18,8
   11394:	b8800215 	stw	r2,8(r23)
   11398:	90c00117 	ldw	r3,4(r18)
   1139c:	008006c4 	movi	r2,27
   113a0:	b8c00315 	stw	r3,12(r23)
   113a4:	1180072e 	bgeu	r2,r6,113c4 <_realloc_r+0x204>
   113a8:	90c00217 	ldw	r3,8(r18)
   113ac:	ba000604 	addi	r8,r23,24
   113b0:	91000404 	addi	r4,r18,16
   113b4:	b8c00415 	stw	r3,16(r23)
   113b8:	90800317 	ldw	r2,12(r18)
   113bc:	b8800515 	stw	r2,20(r23)
   113c0:	3140e726 	beq	r6,r5,11760 <_realloc_r+0x5a0>
   113c4:	20800017 	ldw	r2,0(r4)
   113c8:	dd000017 	ldw	r20,0(sp)
   113cc:	b80f883a 	mov	r7,r23
   113d0:	40800015 	stw	r2,0(r8)
   113d4:	20c00117 	ldw	r3,4(r4)
   113d8:	40c00115 	stw	r3,4(r8)
   113dc:	20800217 	ldw	r2,8(r4)
   113e0:	40800215 	stw	r2,8(r8)
   113e4:	003f9706 	br	11244 <_realloc_r+0x84>
   113e8:	98a9883a 	add	r20,r19,r2
   113ec:	a1c01f16 	blt	r20,r7,1146c <_realloc_r+0x2ac>
   113f0:	b8c00317 	ldw	r3,12(r23)
   113f4:	b8800217 	ldw	r2,8(r23)
   113f8:	99bfff04 	addi	r6,r19,-4
   113fc:	01400904 	movi	r5,36
   11400:	b82b883a 	mov	r21,r23
   11404:	18800215 	stw	r2,8(r3)
   11408:	10c00315 	stw	r3,12(r2)
   1140c:	bc000204 	addi	r16,r23,8
   11410:	2980c336 	bltu	r5,r6,11720 <_realloc_r+0x560>
   11414:	008004c4 	movi	r2,19
   11418:	9009883a 	mov	r4,r18
   1141c:	8011883a 	mov	r8,r16
   11420:	11800f2e 	bgeu	r2,r6,11460 <_realloc_r+0x2a0>
   11424:	90800017 	ldw	r2,0(r18)
   11428:	ba000404 	addi	r8,r23,16
   1142c:	91000204 	addi	r4,r18,8
   11430:	b8800215 	stw	r2,8(r23)
   11434:	90c00117 	ldw	r3,4(r18)
   11438:	008006c4 	movi	r2,27
   1143c:	b8c00315 	stw	r3,12(r23)
   11440:	1180072e 	bgeu	r2,r6,11460 <_realloc_r+0x2a0>
   11444:	90c00217 	ldw	r3,8(r18)
   11448:	ba000604 	addi	r8,r23,24
   1144c:	91000404 	addi	r4,r18,16
   11450:	b8c00415 	stw	r3,16(r23)
   11454:	90800317 	ldw	r2,12(r18)
   11458:	b8800515 	stw	r2,20(r23)
   1145c:	3140c726 	beq	r6,r5,1177c <_realloc_r+0x5bc>
   11460:	20800017 	ldw	r2,0(r4)
   11464:	b80f883a 	mov	r7,r23
   11468:	003fd906 	br	113d0 <_realloc_r+0x210>
   1146c:	880b883a 	mov	r5,r17
   11470:	b009883a 	mov	r4,r22
   11474:	001081c0 	call	1081c <_malloc_r>
   11478:	1023883a 	mov	r17,r2
   1147c:	10002526 	beq	r2,zero,11514 <_realloc_r+0x354>
   11480:	80800117 	ldw	r2,4(r16)
   11484:	00ffff84 	movi	r3,-2
   11488:	893ffe04 	addi	r4,r17,-8
   1148c:	10c4703a 	and	r2,r2,r3
   11490:	8085883a 	add	r2,r16,r2
   11494:	20809526 	beq	r4,r2,116ec <_realloc_r+0x52c>
   11498:	99bfff04 	addi	r6,r19,-4
   1149c:	01c00904 	movi	r7,36
   114a0:	39804536 	bltu	r7,r6,115b8 <_realloc_r+0x3f8>
   114a4:	008004c4 	movi	r2,19
   114a8:	9009883a 	mov	r4,r18
   114ac:	880b883a 	mov	r5,r17
   114b0:	11800f2e 	bgeu	r2,r6,114f0 <_realloc_r+0x330>
   114b4:	90800017 	ldw	r2,0(r18)
   114b8:	89400204 	addi	r5,r17,8
   114bc:	91000204 	addi	r4,r18,8
   114c0:	88800015 	stw	r2,0(r17)
   114c4:	90c00117 	ldw	r3,4(r18)
   114c8:	008006c4 	movi	r2,27
   114cc:	88c00115 	stw	r3,4(r17)
   114d0:	1180072e 	bgeu	r2,r6,114f0 <_realloc_r+0x330>
   114d4:	90c00217 	ldw	r3,8(r18)
   114d8:	89400404 	addi	r5,r17,16
   114dc:	91000404 	addi	r4,r18,16
   114e0:	88c00215 	stw	r3,8(r17)
   114e4:	90800317 	ldw	r2,12(r18)
   114e8:	88800315 	stw	r2,12(r17)
   114ec:	31c09126 	beq	r6,r7,11734 <_realloc_r+0x574>
   114f0:	20800017 	ldw	r2,0(r4)
   114f4:	28800015 	stw	r2,0(r5)
   114f8:	20c00117 	ldw	r3,4(r4)
   114fc:	28c00115 	stw	r3,4(r5)
   11500:	20800217 	ldw	r2,8(r4)
   11504:	28800215 	stw	r2,8(r5)
   11508:	900b883a 	mov	r5,r18
   1150c:	b009883a 	mov	r4,r22
   11510:	0011fb00 	call	11fb0 <_free_r>
   11514:	b009883a 	mov	r4,r22
   11518:	00132880 	call	13288 <__malloc_unlock>
   1151c:	003f5e06 	br	11298 <_realloc_r+0xd8>
   11520:	300b883a 	mov	r5,r6
   11524:	dfc00b17 	ldw	ra,44(sp)
   11528:	df000a17 	ldw	fp,40(sp)
   1152c:	ddc00917 	ldw	r23,36(sp)
   11530:	dd800817 	ldw	r22,32(sp)
   11534:	dd400717 	ldw	r21,28(sp)
   11538:	dd000617 	ldw	r20,24(sp)
   1153c:	dcc00517 	ldw	r19,20(sp)
   11540:	dc800417 	ldw	r18,16(sp)
   11544:	dc400317 	ldw	r17,12(sp)
   11548:	dc000217 	ldw	r16,8(sp)
   1154c:	dec00c04 	addi	sp,sp,48
   11550:	001081c1 	jmpi	1081c <_malloc_r>
   11554:	38800117 	ldw	r2,4(r7)
   11558:	e54b883a 	add	r5,fp,r21
   1155c:	31000054 	ori	r4,r6,1
   11560:	1080004c 	andi	r2,r2,1
   11564:	1704b03a 	or	r2,r2,fp
   11568:	38800115 	stw	r2,4(r7)
   1156c:	29000115 	stw	r4,4(r5)
   11570:	2987883a 	add	r3,r5,r6
   11574:	18800117 	ldw	r2,4(r3)
   11578:	29400204 	addi	r5,r5,8
   1157c:	b009883a 	mov	r4,r22
   11580:	10800054 	ori	r2,r2,1
   11584:	18800115 	stw	r2,4(r3)
   11588:	0011fb00 	call	11fb0 <_free_r>
   1158c:	003f3806 	br	11270 <_realloc_r+0xb0>
   11590:	000d883a 	mov	r6,zero
   11594:	0009883a 	mov	r4,zero
   11598:	003f5d06 	br	11310 <_realloc_r+0x150>
   1159c:	30c00217 	ldw	r3,8(r6)
   115a0:	30800317 	ldw	r2,12(r6)
   115a4:	800f883a 	mov	r7,r16
   115a8:	84000204 	addi	r16,r16,8
   115ac:	10c00215 	stw	r3,8(r2)
   115b0:	18800315 	stw	r2,12(r3)
   115b4:	003f2306 	br	11244 <_realloc_r+0x84>
   115b8:	8809883a 	mov	r4,r17
   115bc:	900b883a 	mov	r5,r18
   115c0:	00110e00 	call	110e0 <memmove>
   115c4:	003fd006 	br	11508 <_realloc_r+0x348>
   115c8:	30800117 	ldw	r2,4(r6)
   115cc:	e0c00404 	addi	r3,fp,16
   115d0:	1108703a 	and	r4,r2,r4
   115d4:	9905883a 	add	r2,r19,r4
   115d8:	10ff4d16 	blt	r2,r3,11310 <_realloc_r+0x150>
   115dc:	1705c83a 	sub	r2,r2,fp
   115e0:	870b883a 	add	r5,r16,fp
   115e4:	10800054 	ori	r2,r2,1
   115e8:	28800115 	stw	r2,4(r5)
   115ec:	80c00117 	ldw	r3,4(r16)
   115f0:	00800074 	movhi	r2,1
   115f4:	10965104 	addi	r2,r2,22852
   115f8:	b009883a 	mov	r4,r22
   115fc:	18c0004c 	andi	r3,r3,1
   11600:	e0c6b03a 	or	r3,fp,r3
   11604:	11400215 	stw	r5,8(r2)
   11608:	80c00115 	stw	r3,4(r16)
   1160c:	00132880 	call	13288 <__malloc_unlock>
   11610:	84400204 	addi	r17,r16,8
   11614:	003f2006 	br	11298 <_realloc_r+0xd8>
   11618:	98a9883a 	add	r20,r19,r2
   1161c:	2509883a 	add	r4,r4,r20
   11620:	e0800404 	addi	r2,fp,16
   11624:	d9000115 	stw	r4,4(sp)
   11628:	20bf7016 	blt	r4,r2,113ec <_realloc_r+0x22c>
   1162c:	b8c00317 	ldw	r3,12(r23)
   11630:	b8800217 	ldw	r2,8(r23)
   11634:	99bfff04 	addi	r6,r19,-4
   11638:	01400904 	movi	r5,36
   1163c:	18800215 	stw	r2,8(r3)
   11640:	10c00315 	stw	r3,12(r2)
   11644:	bc400204 	addi	r17,r23,8
   11648:	29804136 	bltu	r5,r6,11750 <_realloc_r+0x590>
   1164c:	008004c4 	movi	r2,19
   11650:	9009883a 	mov	r4,r18
   11654:	880f883a 	mov	r7,r17
   11658:	11800f2e 	bgeu	r2,r6,11698 <_realloc_r+0x4d8>
   1165c:	90800017 	ldw	r2,0(r18)
   11660:	b9c00404 	addi	r7,r23,16
   11664:	91000204 	addi	r4,r18,8
   11668:	b8800215 	stw	r2,8(r23)
   1166c:	90c00117 	ldw	r3,4(r18)
   11670:	008006c4 	movi	r2,27
   11674:	b8c00315 	stw	r3,12(r23)
   11678:	1180072e 	bgeu	r2,r6,11698 <_realloc_r+0x4d8>
   1167c:	90c00217 	ldw	r3,8(r18)
   11680:	b9c00604 	addi	r7,r23,24
   11684:	91000404 	addi	r4,r18,16
   11688:	b8c00415 	stw	r3,16(r23)
   1168c:	90800317 	ldw	r2,12(r18)
   11690:	b8800515 	stw	r2,20(r23)
   11694:	31404026 	beq	r6,r5,11798 <_realloc_r+0x5d8>
   11698:	20800017 	ldw	r2,0(r4)
   1169c:	38800015 	stw	r2,0(r7)
   116a0:	20c00117 	ldw	r3,4(r4)
   116a4:	38c00115 	stw	r3,4(r7)
   116a8:	20800217 	ldw	r2,8(r4)
   116ac:	38800215 	stw	r2,8(r7)
   116b0:	d8c00117 	ldw	r3,4(sp)
   116b4:	bf0b883a 	add	r5,r23,fp
   116b8:	b009883a 	mov	r4,r22
   116bc:	1f05c83a 	sub	r2,r3,fp
   116c0:	10800054 	ori	r2,r2,1
   116c4:	28800115 	stw	r2,4(r5)
   116c8:	b8c00117 	ldw	r3,4(r23)
   116cc:	00800074 	movhi	r2,1
   116d0:	10965104 	addi	r2,r2,22852
   116d4:	11400215 	stw	r5,8(r2)
   116d8:	18c0004c 	andi	r3,r3,1
   116dc:	e0c6b03a 	or	r3,fp,r3
   116e0:	b8c00115 	stw	r3,4(r23)
   116e4:	00132880 	call	13288 <__malloc_unlock>
   116e8:	003eeb06 	br	11298 <_realloc_r+0xd8>
   116ec:	20800117 	ldw	r2,4(r4)
   116f0:	00ffff04 	movi	r3,-4
   116f4:	800f883a 	mov	r7,r16
   116f8:	10c4703a 	and	r2,r2,r3
   116fc:	98a9883a 	add	r20,r19,r2
   11700:	84000204 	addi	r16,r16,8
   11704:	003ecf06 	br	11244 <_realloc_r+0x84>
   11708:	900b883a 	mov	r5,r18
   1170c:	8009883a 	mov	r4,r16
   11710:	00110e00 	call	110e0 <memmove>
   11714:	dd000017 	ldw	r20,0(sp)
   11718:	b80f883a 	mov	r7,r23
   1171c:	003ec906 	br	11244 <_realloc_r+0x84>
   11720:	900b883a 	mov	r5,r18
   11724:	8009883a 	mov	r4,r16
   11728:	00110e00 	call	110e0 <memmove>
   1172c:	b80f883a 	mov	r7,r23
   11730:	003ec406 	br	11244 <_realloc_r+0x84>
   11734:	90c00417 	ldw	r3,16(r18)
   11738:	89400604 	addi	r5,r17,24
   1173c:	91000604 	addi	r4,r18,24
   11740:	88c00415 	stw	r3,16(r17)
   11744:	90800517 	ldw	r2,20(r18)
   11748:	88800515 	stw	r2,20(r17)
   1174c:	003f6806 	br	114f0 <_realloc_r+0x330>
   11750:	900b883a 	mov	r5,r18
   11754:	8809883a 	mov	r4,r17
   11758:	00110e00 	call	110e0 <memmove>
   1175c:	003fd406 	br	116b0 <_realloc_r+0x4f0>
   11760:	90c00417 	ldw	r3,16(r18)
   11764:	91000604 	addi	r4,r18,24
   11768:	ba000804 	addi	r8,r23,32
   1176c:	b8c00615 	stw	r3,24(r23)
   11770:	90800517 	ldw	r2,20(r18)
   11774:	b8800715 	stw	r2,28(r23)
   11778:	003f1206 	br	113c4 <_realloc_r+0x204>
   1177c:	90c00417 	ldw	r3,16(r18)
   11780:	91000604 	addi	r4,r18,24
   11784:	ba000804 	addi	r8,r23,32
   11788:	b8c00615 	stw	r3,24(r23)
   1178c:	90800517 	ldw	r2,20(r18)
   11790:	b8800715 	stw	r2,28(r23)
   11794:	003f3206 	br	11460 <_realloc_r+0x2a0>
   11798:	90c00417 	ldw	r3,16(r18)
   1179c:	91000604 	addi	r4,r18,24
   117a0:	b9c00804 	addi	r7,r23,32
   117a4:	b8c00615 	stw	r3,24(r23)
   117a8:	90800517 	ldw	r2,20(r18)
   117ac:	b8800715 	stw	r2,28(r23)
   117b0:	003fb906 	br	11698 <_realloc_r+0x4d8>

000117b4 <_sbrk_r>:
   117b4:	defffd04 	addi	sp,sp,-12
   117b8:	dc000015 	stw	r16,0(sp)
   117bc:	040000b4 	movhi	r16,2
   117c0:	84227804 	addi	r16,r16,-30240
   117c4:	dc400115 	stw	r17,4(sp)
   117c8:	80000015 	stw	zero,0(r16)
   117cc:	2023883a 	mov	r17,r4
   117d0:	2809883a 	mov	r4,r5
   117d4:	dfc00215 	stw	ra,8(sp)
   117d8:	00134a40 	call	134a4 <sbrk>
   117dc:	1007883a 	mov	r3,r2
   117e0:	00bfffc4 	movi	r2,-1
   117e4:	18800626 	beq	r3,r2,11800 <_sbrk_r+0x4c>
   117e8:	1805883a 	mov	r2,r3
   117ec:	dfc00217 	ldw	ra,8(sp)
   117f0:	dc400117 	ldw	r17,4(sp)
   117f4:	dc000017 	ldw	r16,0(sp)
   117f8:	dec00304 	addi	sp,sp,12
   117fc:	f800283a 	ret
   11800:	80800017 	ldw	r2,0(r16)
   11804:	103ff826 	beq	r2,zero,117e8 <_sbrk_r+0x34>
   11808:	88800015 	stw	r2,0(r17)
   1180c:	1805883a 	mov	r2,r3
   11810:	dfc00217 	ldw	ra,8(sp)
   11814:	dc400117 	ldw	r17,4(sp)
   11818:	dc000017 	ldw	r16,0(sp)
   1181c:	dec00304 	addi	sp,sp,12
   11820:	f800283a 	ret

00011824 <__swsetup_r>:
   11824:	00800074 	movhi	r2,1
   11828:	109bd504 	addi	r2,r2,28500
   1182c:	10c00017 	ldw	r3,0(r2)
   11830:	defffd04 	addi	sp,sp,-12
   11834:	dc400115 	stw	r17,4(sp)
   11838:	dc000015 	stw	r16,0(sp)
   1183c:	dfc00215 	stw	ra,8(sp)
   11840:	2023883a 	mov	r17,r4
   11844:	2821883a 	mov	r16,r5
   11848:	18000226 	beq	r3,zero,11854 <__swsetup_r+0x30>
   1184c:	18800e17 	ldw	r2,56(r3)
   11850:	10001f26 	beq	r2,zero,118d0 <__swsetup_r+0xac>
   11854:	8100030b 	ldhu	r4,12(r16)
   11858:	2080020c 	andi	r2,r4,8
   1185c:	10002826 	beq	r2,zero,11900 <__swsetup_r+0xdc>
   11860:	81400417 	ldw	r5,16(r16)
   11864:	28001d26 	beq	r5,zero,118dc <__swsetup_r+0xb8>
   11868:	2080004c 	andi	r2,r4,1
   1186c:	1005003a 	cmpeq	r2,r2,zero
   11870:	10000b26 	beq	r2,zero,118a0 <__swsetup_r+0x7c>
   11874:	2080008c 	andi	r2,r4,2
   11878:	10001226 	beq	r2,zero,118c4 <__swsetup_r+0xa0>
   1187c:	0005883a 	mov	r2,zero
   11880:	80800215 	stw	r2,8(r16)
   11884:	28000b26 	beq	r5,zero,118b4 <__swsetup_r+0x90>
   11888:	0005883a 	mov	r2,zero
   1188c:	dfc00217 	ldw	ra,8(sp)
   11890:	dc400117 	ldw	r17,4(sp)
   11894:	dc000017 	ldw	r16,0(sp)
   11898:	dec00304 	addi	sp,sp,12
   1189c:	f800283a 	ret
   118a0:	80800517 	ldw	r2,20(r16)
   118a4:	80000215 	stw	zero,8(r16)
   118a8:	0085c83a 	sub	r2,zero,r2
   118ac:	80800615 	stw	r2,24(r16)
   118b0:	283ff51e 	bne	r5,zero,11888 <__swsetup_r+0x64>
   118b4:	2080200c 	andi	r2,r4,128
   118b8:	103ff326 	beq	r2,zero,11888 <__swsetup_r+0x64>
   118bc:	00bfffc4 	movi	r2,-1
   118c0:	003ff206 	br	1188c <__swsetup_r+0x68>
   118c4:	80800517 	ldw	r2,20(r16)
   118c8:	80800215 	stw	r2,8(r16)
   118cc:	003fed06 	br	11884 <__swsetup_r+0x60>
   118d0:	1809883a 	mov	r4,r3
   118d4:	0011bf80 	call	11bf8 <__sinit>
   118d8:	003fde06 	br	11854 <__swsetup_r+0x30>
   118dc:	20c0a00c 	andi	r3,r4,640
   118e0:	00808004 	movi	r2,512
   118e4:	18bfe026 	beq	r3,r2,11868 <__swsetup_r+0x44>
   118e8:	8809883a 	mov	r4,r17
   118ec:	800b883a 	mov	r5,r16
   118f0:	00124440 	call	12444 <__smakebuf_r>
   118f4:	8100030b 	ldhu	r4,12(r16)
   118f8:	81400417 	ldw	r5,16(r16)
   118fc:	003fda06 	br	11868 <__swsetup_r+0x44>
   11900:	2080040c 	andi	r2,r4,16
   11904:	103fed26 	beq	r2,zero,118bc <__swsetup_r+0x98>
   11908:	2080010c 	andi	r2,r4,4
   1190c:	10001226 	beq	r2,zero,11958 <__swsetup_r+0x134>
   11910:	81400c17 	ldw	r5,48(r16)
   11914:	28000526 	beq	r5,zero,1192c <__swsetup_r+0x108>
   11918:	80801004 	addi	r2,r16,64
   1191c:	28800226 	beq	r5,r2,11928 <__swsetup_r+0x104>
   11920:	8809883a 	mov	r4,r17
   11924:	0011fb00 	call	11fb0 <_free_r>
   11928:	80000c15 	stw	zero,48(r16)
   1192c:	8080030b 	ldhu	r2,12(r16)
   11930:	81400417 	ldw	r5,16(r16)
   11934:	80000115 	stw	zero,4(r16)
   11938:	10bff6cc 	andi	r2,r2,65499
   1193c:	8080030d 	sth	r2,12(r16)
   11940:	81400015 	stw	r5,0(r16)
   11944:	8080030b 	ldhu	r2,12(r16)
   11948:	10800214 	ori	r2,r2,8
   1194c:	113fffcc 	andi	r4,r2,65535
   11950:	8080030d 	sth	r2,12(r16)
   11954:	003fc306 	br	11864 <__swsetup_r+0x40>
   11958:	81400417 	ldw	r5,16(r16)
   1195c:	003ff906 	br	11944 <__swsetup_r+0x120>

00011960 <_fflush_r>:
   11960:	defffb04 	addi	sp,sp,-20
   11964:	dcc00315 	stw	r19,12(sp)
   11968:	dc800215 	stw	r18,8(sp)
   1196c:	dfc00415 	stw	ra,16(sp)
   11970:	dc400115 	stw	r17,4(sp)
   11974:	dc000015 	stw	r16,0(sp)
   11978:	2027883a 	mov	r19,r4
   1197c:	2825883a 	mov	r18,r5
   11980:	20000226 	beq	r4,zero,1198c <_fflush_r+0x2c>
   11984:	20800e17 	ldw	r2,56(r4)
   11988:	10005626 	beq	r2,zero,11ae4 <_fflush_r+0x184>
   1198c:	9100030b 	ldhu	r4,12(r18)
   11990:	20ffffcc 	andi	r3,r4,65535
   11994:	18e0001c 	xori	r3,r3,32768
   11998:	18e00004 	addi	r3,r3,-32768
   1199c:	1880020c 	andi	r2,r3,8
   119a0:	1000261e 	bne	r2,zero,11a3c <_fflush_r+0xdc>
   119a4:	90c00117 	ldw	r3,4(r18)
   119a8:	20820014 	ori	r2,r4,2048
   119ac:	9080030d 	sth	r2,12(r18)
   119b0:	1009883a 	mov	r4,r2
   119b4:	00c0400e 	bge	zero,r3,11ab8 <_fflush_r+0x158>
   119b8:	92000a17 	ldw	r8,40(r18)
   119bc:	40004026 	beq	r8,zero,11ac0 <_fflush_r+0x160>
   119c0:	2084000c 	andi	r2,r4,4096
   119c4:	10005326 	beq	r2,zero,11b14 <_fflush_r+0x1b4>
   119c8:	94001417 	ldw	r16,80(r18)
   119cc:	9080030b 	ldhu	r2,12(r18)
   119d0:	1080010c 	andi	r2,r2,4
   119d4:	1000481e 	bne	r2,zero,11af8 <_fflush_r+0x198>
   119d8:	91400717 	ldw	r5,28(r18)
   119dc:	9809883a 	mov	r4,r19
   119e0:	800d883a 	mov	r6,r16
   119e4:	000f883a 	mov	r7,zero
   119e8:	403ee83a 	callr	r8
   119ec:	8080261e 	bne	r16,r2,11a88 <_fflush_r+0x128>
   119f0:	9080030b 	ldhu	r2,12(r18)
   119f4:	91000417 	ldw	r4,16(r18)
   119f8:	90000115 	stw	zero,4(r18)
   119fc:	10bdffcc 	andi	r2,r2,63487
   11a00:	10ffffcc 	andi	r3,r2,65535
   11a04:	18c4000c 	andi	r3,r3,4096
   11a08:	9080030d 	sth	r2,12(r18)
   11a0c:	91000015 	stw	r4,0(r18)
   11a10:	18002b26 	beq	r3,zero,11ac0 <_fflush_r+0x160>
   11a14:	0007883a 	mov	r3,zero
   11a18:	1805883a 	mov	r2,r3
   11a1c:	94001415 	stw	r16,80(r18)
   11a20:	dfc00417 	ldw	ra,16(sp)
   11a24:	dcc00317 	ldw	r19,12(sp)
   11a28:	dc800217 	ldw	r18,8(sp)
   11a2c:	dc400117 	ldw	r17,4(sp)
   11a30:	dc000017 	ldw	r16,0(sp)
   11a34:	dec00504 	addi	sp,sp,20
   11a38:	f800283a 	ret
   11a3c:	94400417 	ldw	r17,16(r18)
   11a40:	88001f26 	beq	r17,zero,11ac0 <_fflush_r+0x160>
   11a44:	90800017 	ldw	r2,0(r18)
   11a48:	18c000cc 	andi	r3,r3,3
   11a4c:	94400015 	stw	r17,0(r18)
   11a50:	1461c83a 	sub	r16,r2,r17
   11a54:	18002526 	beq	r3,zero,11aec <_fflush_r+0x18c>
   11a58:	0005883a 	mov	r2,zero
   11a5c:	90800215 	stw	r2,8(r18)
   11a60:	0400170e 	bge	zero,r16,11ac0 <_fflush_r+0x160>
   11a64:	90c00917 	ldw	r3,36(r18)
   11a68:	91400717 	ldw	r5,28(r18)
   11a6c:	880d883a 	mov	r6,r17
   11a70:	800f883a 	mov	r7,r16
   11a74:	9809883a 	mov	r4,r19
   11a78:	183ee83a 	callr	r3
   11a7c:	88a3883a 	add	r17,r17,r2
   11a80:	80a1c83a 	sub	r16,r16,r2
   11a84:	00bff616 	blt	zero,r2,11a60 <_fflush_r+0x100>
   11a88:	9080030b 	ldhu	r2,12(r18)
   11a8c:	00ffffc4 	movi	r3,-1
   11a90:	10801014 	ori	r2,r2,64
   11a94:	9080030d 	sth	r2,12(r18)
   11a98:	1805883a 	mov	r2,r3
   11a9c:	dfc00417 	ldw	ra,16(sp)
   11aa0:	dcc00317 	ldw	r19,12(sp)
   11aa4:	dc800217 	ldw	r18,8(sp)
   11aa8:	dc400117 	ldw	r17,4(sp)
   11aac:	dc000017 	ldw	r16,0(sp)
   11ab0:	dec00504 	addi	sp,sp,20
   11ab4:	f800283a 	ret
   11ab8:	90800f17 	ldw	r2,60(r18)
   11abc:	00bfbe16 	blt	zero,r2,119b8 <_fflush_r+0x58>
   11ac0:	0007883a 	mov	r3,zero
   11ac4:	1805883a 	mov	r2,r3
   11ac8:	dfc00417 	ldw	ra,16(sp)
   11acc:	dcc00317 	ldw	r19,12(sp)
   11ad0:	dc800217 	ldw	r18,8(sp)
   11ad4:	dc400117 	ldw	r17,4(sp)
   11ad8:	dc000017 	ldw	r16,0(sp)
   11adc:	dec00504 	addi	sp,sp,20
   11ae0:	f800283a 	ret
   11ae4:	0011bf80 	call	11bf8 <__sinit>
   11ae8:	003fa806 	br	1198c <_fflush_r+0x2c>
   11aec:	90800517 	ldw	r2,20(r18)
   11af0:	90800215 	stw	r2,8(r18)
   11af4:	003fda06 	br	11a60 <_fflush_r+0x100>
   11af8:	90800117 	ldw	r2,4(r18)
   11afc:	90c00c17 	ldw	r3,48(r18)
   11b00:	80a1c83a 	sub	r16,r16,r2
   11b04:	183fb426 	beq	r3,zero,119d8 <_fflush_r+0x78>
   11b08:	90800f17 	ldw	r2,60(r18)
   11b0c:	80a1c83a 	sub	r16,r16,r2
   11b10:	003fb106 	br	119d8 <_fflush_r+0x78>
   11b14:	91400717 	ldw	r5,28(r18)
   11b18:	9809883a 	mov	r4,r19
   11b1c:	000d883a 	mov	r6,zero
   11b20:	01c00044 	movi	r7,1
   11b24:	403ee83a 	callr	r8
   11b28:	1021883a 	mov	r16,r2
   11b2c:	00bfffc4 	movi	r2,-1
   11b30:	80800226 	beq	r16,r2,11b3c <_fflush_r+0x1dc>
   11b34:	92000a17 	ldw	r8,40(r18)
   11b38:	003fa406 	br	119cc <_fflush_r+0x6c>
   11b3c:	98c00017 	ldw	r3,0(r19)
   11b40:	00800744 	movi	r2,29
   11b44:	18bfde26 	beq	r3,r2,11ac0 <_fflush_r+0x160>
   11b48:	9080030b 	ldhu	r2,12(r18)
   11b4c:	8007883a 	mov	r3,r16
   11b50:	10801014 	ori	r2,r2,64
   11b54:	9080030d 	sth	r2,12(r18)
   11b58:	003fcf06 	br	11a98 <_fflush_r+0x138>

00011b5c <fflush>:
   11b5c:	01400074 	movhi	r5,1
   11b60:	29465804 	addi	r5,r5,6496
   11b64:	2007883a 	mov	r3,r4
   11b68:	20000526 	beq	r4,zero,11b80 <fflush+0x24>
   11b6c:	00800074 	movhi	r2,1
   11b70:	109bd504 	addi	r2,r2,28500
   11b74:	11000017 	ldw	r4,0(r2)
   11b78:	180b883a 	mov	r5,r3
   11b7c:	00119601 	jmpi	11960 <_fflush_r>
   11b80:	00800074 	movhi	r2,1
   11b84:	109bd604 	addi	r2,r2,28504
   11b88:	11000017 	ldw	r4,0(r2)
   11b8c:	00122c41 	jmpi	122c4 <_fwalk_reent>

00011b90 <std>:
   11b90:	00800074 	movhi	r2,1
   11b94:	10899c04 	addi	r2,r2,9840
   11b98:	20800b15 	stw	r2,44(r4)
   11b9c:	00800074 	movhi	r2,1
   11ba0:	1089d704 	addi	r2,r2,10076
   11ba4:	20800815 	stw	r2,32(r4)
   11ba8:	00c00074 	movhi	r3,1
   11bac:	18c9b804 	addi	r3,r3,9952
   11bb0:	00800074 	movhi	r2,1
   11bb4:	10899e04 	addi	r2,r2,9848
   11bb8:	2140030d 	sth	r5,12(r4)
   11bbc:	2180038d 	sth	r6,14(r4)
   11bc0:	20c00915 	stw	r3,36(r4)
   11bc4:	20800a15 	stw	r2,40(r4)
   11bc8:	20000015 	stw	zero,0(r4)
   11bcc:	20000115 	stw	zero,4(r4)
   11bd0:	20000215 	stw	zero,8(r4)
   11bd4:	20000415 	stw	zero,16(r4)
   11bd8:	20000515 	stw	zero,20(r4)
   11bdc:	20000615 	stw	zero,24(r4)
   11be0:	21000715 	stw	r4,28(r4)
   11be4:	f800283a 	ret

00011be8 <__sfp_lock_acquire>:
   11be8:	f800283a 	ret

00011bec <__sfp_lock_release>:
   11bec:	f800283a 	ret

00011bf0 <__sinit_lock_acquire>:
   11bf0:	f800283a 	ret

00011bf4 <__sinit_lock_release>:
   11bf4:	f800283a 	ret

00011bf8 <__sinit>:
   11bf8:	20800e17 	ldw	r2,56(r4)
   11bfc:	defffd04 	addi	sp,sp,-12
   11c00:	dc400115 	stw	r17,4(sp)
   11c04:	dc000015 	stw	r16,0(sp)
   11c08:	dfc00215 	stw	ra,8(sp)
   11c0c:	04400044 	movi	r17,1
   11c10:	01400104 	movi	r5,4
   11c14:	000d883a 	mov	r6,zero
   11c18:	2021883a 	mov	r16,r4
   11c1c:	2200bb04 	addi	r8,r4,748
   11c20:	200f883a 	mov	r7,r4
   11c24:	10000526 	beq	r2,zero,11c3c <__sinit+0x44>
   11c28:	dfc00217 	ldw	ra,8(sp)
   11c2c:	dc400117 	ldw	r17,4(sp)
   11c30:	dc000017 	ldw	r16,0(sp)
   11c34:	dec00304 	addi	sp,sp,12
   11c38:	f800283a 	ret
   11c3c:	21000117 	ldw	r4,4(r4)
   11c40:	00800074 	movhi	r2,1
   11c44:	10873704 	addi	r2,r2,7388
   11c48:	00c000c4 	movi	r3,3
   11c4c:	80800f15 	stw	r2,60(r16)
   11c50:	80c0b915 	stw	r3,740(r16)
   11c54:	8200ba15 	stw	r8,744(r16)
   11c58:	84400e15 	stw	r17,56(r16)
   11c5c:	8000b815 	stw	zero,736(r16)
   11c60:	0011b900 	call	11b90 <std>
   11c64:	81000217 	ldw	r4,8(r16)
   11c68:	880d883a 	mov	r6,r17
   11c6c:	800f883a 	mov	r7,r16
   11c70:	01400284 	movi	r5,10
   11c74:	0011b900 	call	11b90 <std>
   11c78:	81000317 	ldw	r4,12(r16)
   11c7c:	800f883a 	mov	r7,r16
   11c80:	01400484 	movi	r5,18
   11c84:	01800084 	movi	r6,2
   11c88:	dfc00217 	ldw	ra,8(sp)
   11c8c:	dc400117 	ldw	r17,4(sp)
   11c90:	dc000017 	ldw	r16,0(sp)
   11c94:	dec00304 	addi	sp,sp,12
   11c98:	0011b901 	jmpi	11b90 <std>

00011c9c <__fp_lock>:
   11c9c:	0005883a 	mov	r2,zero
   11ca0:	f800283a 	ret

00011ca4 <__fp_unlock>:
   11ca4:	0005883a 	mov	r2,zero
   11ca8:	f800283a 	ret

00011cac <__fp_unlock_all>:
   11cac:	00800074 	movhi	r2,1
   11cb0:	109bd504 	addi	r2,r2,28500
   11cb4:	11000017 	ldw	r4,0(r2)
   11cb8:	01400074 	movhi	r5,1
   11cbc:	29472904 	addi	r5,r5,7332
   11cc0:	001238c1 	jmpi	1238c <_fwalk>

00011cc4 <__fp_lock_all>:
   11cc4:	00800074 	movhi	r2,1
   11cc8:	109bd504 	addi	r2,r2,28500
   11ccc:	11000017 	ldw	r4,0(r2)
   11cd0:	01400074 	movhi	r5,1
   11cd4:	29472704 	addi	r5,r5,7324
   11cd8:	001238c1 	jmpi	1238c <_fwalk>

00011cdc <_cleanup_r>:
   11cdc:	01400074 	movhi	r5,1
   11ce0:	294a6d04 	addi	r5,r5,10676
   11ce4:	001238c1 	jmpi	1238c <_fwalk>

00011ce8 <_cleanup>:
   11ce8:	00800074 	movhi	r2,1
   11cec:	109bd604 	addi	r2,r2,28504
   11cf0:	11000017 	ldw	r4,0(r2)
   11cf4:	0011cdc1 	jmpi	11cdc <_cleanup_r>

00011cf8 <__sfmoreglue>:
   11cf8:	defffc04 	addi	sp,sp,-16
   11cfc:	dc000015 	stw	r16,0(sp)
   11d00:	2821883a 	mov	r16,r5
   11d04:	dc400115 	stw	r17,4(sp)
   11d08:	01401704 	movi	r5,92
   11d0c:	2023883a 	mov	r17,r4
   11d10:	8009883a 	mov	r4,r16
   11d14:	dfc00315 	stw	ra,12(sp)
   11d18:	dcc00215 	stw	r19,8(sp)
   11d1c:	0012b9c0 	call	12b9c <__mulsi3>
   11d20:	11400304 	addi	r5,r2,12
   11d24:	8809883a 	mov	r4,r17
   11d28:	1027883a 	mov	r19,r2
   11d2c:	001081c0 	call	1081c <_malloc_r>
   11d30:	10c00304 	addi	r3,r2,12
   11d34:	1023883a 	mov	r17,r2
   11d38:	1809883a 	mov	r4,r3
   11d3c:	980d883a 	mov	r6,r19
   11d40:	000b883a 	mov	r5,zero
   11d44:	10000b26 	beq	r2,zero,11d74 <__sfmoreglue+0x7c>
   11d48:	14000115 	stw	r16,4(r2)
   11d4c:	10c00215 	stw	r3,8(r2)
   11d50:	10000015 	stw	zero,0(r2)
   11d54:	00125d80 	call	125d8 <memset>
   11d58:	8805883a 	mov	r2,r17
   11d5c:	dfc00317 	ldw	ra,12(sp)
   11d60:	dcc00217 	ldw	r19,8(sp)
   11d64:	dc400117 	ldw	r17,4(sp)
   11d68:	dc000017 	ldw	r16,0(sp)
   11d6c:	dec00404 	addi	sp,sp,16
   11d70:	f800283a 	ret
   11d74:	0023883a 	mov	r17,zero
   11d78:	8805883a 	mov	r2,r17
   11d7c:	dfc00317 	ldw	ra,12(sp)
   11d80:	dcc00217 	ldw	r19,8(sp)
   11d84:	dc400117 	ldw	r17,4(sp)
   11d88:	dc000017 	ldw	r16,0(sp)
   11d8c:	dec00404 	addi	sp,sp,16
   11d90:	f800283a 	ret

00011d94 <__sfp>:
   11d94:	defffd04 	addi	sp,sp,-12
   11d98:	00800074 	movhi	r2,1
   11d9c:	109bd604 	addi	r2,r2,28504
   11da0:	dc000015 	stw	r16,0(sp)
   11da4:	14000017 	ldw	r16,0(r2)
   11da8:	dc400115 	stw	r17,4(sp)
   11dac:	dfc00215 	stw	ra,8(sp)
   11db0:	80800e17 	ldw	r2,56(r16)
   11db4:	2023883a 	mov	r17,r4
   11db8:	10002626 	beq	r2,zero,11e54 <__sfp+0xc0>
   11dbc:	8400b804 	addi	r16,r16,736
   11dc0:	80800117 	ldw	r2,4(r16)
   11dc4:	81000217 	ldw	r4,8(r16)
   11dc8:	10ffffc4 	addi	r3,r2,-1
   11dcc:	18000916 	blt	r3,zero,11df4 <__sfp+0x60>
   11dd0:	2080030f 	ldh	r2,12(r4)
   11dd4:	10000b26 	beq	r2,zero,11e04 <__sfp+0x70>
   11dd8:	017fffc4 	movi	r5,-1
   11ddc:	00000206 	br	11de8 <__sfp+0x54>
   11de0:	2080030f 	ldh	r2,12(r4)
   11de4:	10000726 	beq	r2,zero,11e04 <__sfp+0x70>
   11de8:	18ffffc4 	addi	r3,r3,-1
   11dec:	21001704 	addi	r4,r4,92
   11df0:	197ffb1e 	bne	r3,r5,11de0 <__sfp+0x4c>
   11df4:	80800017 	ldw	r2,0(r16)
   11df8:	10001926 	beq	r2,zero,11e60 <__sfp+0xcc>
   11dfc:	1021883a 	mov	r16,r2
   11e00:	003fef06 	br	11dc0 <__sfp+0x2c>
   11e04:	00bfffc4 	movi	r2,-1
   11e08:	00c00044 	movi	r3,1
   11e0c:	2080038d 	sth	r2,14(r4)
   11e10:	20c0030d 	sth	r3,12(r4)
   11e14:	20000015 	stw	zero,0(r4)
   11e18:	20000215 	stw	zero,8(r4)
   11e1c:	20000115 	stw	zero,4(r4)
   11e20:	20000415 	stw	zero,16(r4)
   11e24:	20000515 	stw	zero,20(r4)
   11e28:	20000615 	stw	zero,24(r4)
   11e2c:	20000c15 	stw	zero,48(r4)
   11e30:	20000d15 	stw	zero,52(r4)
   11e34:	20001115 	stw	zero,68(r4)
   11e38:	20001215 	stw	zero,72(r4)
   11e3c:	2005883a 	mov	r2,r4
   11e40:	dfc00217 	ldw	ra,8(sp)
   11e44:	dc400117 	ldw	r17,4(sp)
   11e48:	dc000017 	ldw	r16,0(sp)
   11e4c:	dec00304 	addi	sp,sp,12
   11e50:	f800283a 	ret
   11e54:	8009883a 	mov	r4,r16
   11e58:	0011bf80 	call	11bf8 <__sinit>
   11e5c:	003fd706 	br	11dbc <__sfp+0x28>
   11e60:	8809883a 	mov	r4,r17
   11e64:	01400104 	movi	r5,4
   11e68:	0011cf80 	call	11cf8 <__sfmoreglue>
   11e6c:	80800015 	stw	r2,0(r16)
   11e70:	103fe21e 	bne	r2,zero,11dfc <__sfp+0x68>
   11e74:	00800304 	movi	r2,12
   11e78:	0009883a 	mov	r4,zero
   11e7c:	88800015 	stw	r2,0(r17)
   11e80:	003fee06 	br	11e3c <__sfp+0xa8>

00011e84 <_malloc_trim_r>:
   11e84:	defffb04 	addi	sp,sp,-20
   11e88:	dcc00315 	stw	r19,12(sp)
   11e8c:	04c00074 	movhi	r19,1
   11e90:	9cd65104 	addi	r19,r19,22852
   11e94:	dc800215 	stw	r18,8(sp)
   11e98:	dc400115 	stw	r17,4(sp)
   11e9c:	dc000015 	stw	r16,0(sp)
   11ea0:	2823883a 	mov	r17,r5
   11ea4:	2025883a 	mov	r18,r4
   11ea8:	dfc00415 	stw	ra,16(sp)
   11eac:	00132680 	call	13268 <__malloc_lock>
   11eb0:	98800217 	ldw	r2,8(r19)
   11eb4:	9009883a 	mov	r4,r18
   11eb8:	000b883a 	mov	r5,zero
   11ebc:	10c00117 	ldw	r3,4(r2)
   11ec0:	00bfff04 	movi	r2,-4
   11ec4:	18a0703a 	and	r16,r3,r2
   11ec8:	8463c83a 	sub	r17,r16,r17
   11ecc:	8c43fbc4 	addi	r17,r17,4079
   11ed0:	8822d33a 	srli	r17,r17,12
   11ed4:	0083ffc4 	movi	r2,4095
   11ed8:	8c7fffc4 	addi	r17,r17,-1
   11edc:	8822933a 	slli	r17,r17,12
   11ee0:	1440060e 	bge	r2,r17,11efc <_malloc_trim_r+0x78>
   11ee4:	00117b40 	call	117b4 <_sbrk_r>
   11ee8:	98c00217 	ldw	r3,8(r19)
   11eec:	9009883a 	mov	r4,r18
   11ef0:	044bc83a 	sub	r5,zero,r17
   11ef4:	80c7883a 	add	r3,r16,r3
   11ef8:	10c00926 	beq	r2,r3,11f20 <_malloc_trim_r+0x9c>
   11efc:	00132880 	call	13288 <__malloc_unlock>
   11f00:	0005883a 	mov	r2,zero
   11f04:	dfc00417 	ldw	ra,16(sp)
   11f08:	dcc00317 	ldw	r19,12(sp)
   11f0c:	dc800217 	ldw	r18,8(sp)
   11f10:	dc400117 	ldw	r17,4(sp)
   11f14:	dc000017 	ldw	r16,0(sp)
   11f18:	dec00504 	addi	sp,sp,20
   11f1c:	f800283a 	ret
   11f20:	9009883a 	mov	r4,r18
   11f24:	00117b40 	call	117b4 <_sbrk_r>
   11f28:	844dc83a 	sub	r6,r16,r17
   11f2c:	00ffffc4 	movi	r3,-1
   11f30:	9009883a 	mov	r4,r18
   11f34:	000b883a 	mov	r5,zero
   11f38:	01c000b4 	movhi	r7,2
   11f3c:	39e27f04 	addi	r7,r7,-30212
   11f40:	31800054 	ori	r6,r6,1
   11f44:	10c00926 	beq	r2,r3,11f6c <_malloc_trim_r+0xe8>
   11f48:	38800017 	ldw	r2,0(r7)
   11f4c:	98c00217 	ldw	r3,8(r19)
   11f50:	9009883a 	mov	r4,r18
   11f54:	1445c83a 	sub	r2,r2,r17
   11f58:	38800015 	stw	r2,0(r7)
   11f5c:	19800115 	stw	r6,4(r3)
   11f60:	00132880 	call	13288 <__malloc_unlock>
   11f64:	00800044 	movi	r2,1
   11f68:	003fe606 	br	11f04 <_malloc_trim_r+0x80>
   11f6c:	00117b40 	call	117b4 <_sbrk_r>
   11f70:	99800217 	ldw	r6,8(r19)
   11f74:	100f883a 	mov	r7,r2
   11f78:	9009883a 	mov	r4,r18
   11f7c:	1187c83a 	sub	r3,r2,r6
   11f80:	008003c4 	movi	r2,15
   11f84:	19400054 	ori	r5,r3,1
   11f88:	10ffdc0e 	bge	r2,r3,11efc <_malloc_trim_r+0x78>
   11f8c:	00800074 	movhi	r2,1
   11f90:	109bd804 	addi	r2,r2,28512
   11f94:	10c00017 	ldw	r3,0(r2)
   11f98:	008000b4 	movhi	r2,2
   11f9c:	10a27f04 	addi	r2,r2,-30212
   11fa0:	31400115 	stw	r5,4(r6)
   11fa4:	38c7c83a 	sub	r3,r7,r3
   11fa8:	10c00015 	stw	r3,0(r2)
   11fac:	003fd306 	br	11efc <_malloc_trim_r+0x78>

00011fb0 <_free_r>:
   11fb0:	defffd04 	addi	sp,sp,-12
   11fb4:	dc400115 	stw	r17,4(sp)
   11fb8:	dc000015 	stw	r16,0(sp)
   11fbc:	dfc00215 	stw	ra,8(sp)
   11fc0:	2821883a 	mov	r16,r5
   11fc4:	2023883a 	mov	r17,r4
   11fc8:	28005a26 	beq	r5,zero,12134 <_free_r+0x184>
   11fcc:	00132680 	call	13268 <__malloc_lock>
   11fd0:	823ffe04 	addi	r8,r16,-8
   11fd4:	41400117 	ldw	r5,4(r8)
   11fd8:	00bfff84 	movi	r2,-2
   11fdc:	02800074 	movhi	r10,1
   11fe0:	52965104 	addi	r10,r10,22852
   11fe4:	288e703a 	and	r7,r5,r2
   11fe8:	41cd883a 	add	r6,r8,r7
   11fec:	30c00117 	ldw	r3,4(r6)
   11ff0:	51000217 	ldw	r4,8(r10)
   11ff4:	00bfff04 	movi	r2,-4
   11ff8:	1892703a 	and	r9,r3,r2
   11ffc:	5017883a 	mov	r11,r10
   12000:	31006726 	beq	r6,r4,121a0 <_free_r+0x1f0>
   12004:	2880004c 	andi	r2,r5,1
   12008:	1005003a 	cmpeq	r2,r2,zero
   1200c:	32400115 	stw	r9,4(r6)
   12010:	10001a1e 	bne	r2,zero,1207c <_free_r+0xcc>
   12014:	000b883a 	mov	r5,zero
   12018:	3247883a 	add	r3,r6,r9
   1201c:	18800117 	ldw	r2,4(r3)
   12020:	1080004c 	andi	r2,r2,1
   12024:	1000231e 	bne	r2,zero,120b4 <_free_r+0x104>
   12028:	280ac03a 	cmpne	r5,r5,zero
   1202c:	3a4f883a 	add	r7,r7,r9
   12030:	2800451e 	bne	r5,zero,12148 <_free_r+0x198>
   12034:	31000217 	ldw	r4,8(r6)
   12038:	00800074 	movhi	r2,1
   1203c:	10965304 	addi	r2,r2,22860
   12040:	20807b26 	beq	r4,r2,12230 <_free_r+0x280>
   12044:	30800317 	ldw	r2,12(r6)
   12048:	3a07883a 	add	r3,r7,r8
   1204c:	19c00015 	stw	r7,0(r3)
   12050:	11000215 	stw	r4,8(r2)
   12054:	20800315 	stw	r2,12(r4)
   12058:	38800054 	ori	r2,r7,1
   1205c:	40800115 	stw	r2,4(r8)
   12060:	28001a26 	beq	r5,zero,120cc <_free_r+0x11c>
   12064:	8809883a 	mov	r4,r17
   12068:	dfc00217 	ldw	ra,8(sp)
   1206c:	dc400117 	ldw	r17,4(sp)
   12070:	dc000017 	ldw	r16,0(sp)
   12074:	dec00304 	addi	sp,sp,12
   12078:	00132881 	jmpi	13288 <__malloc_unlock>
   1207c:	80bffe17 	ldw	r2,-8(r16)
   12080:	50c00204 	addi	r3,r10,8
   12084:	4091c83a 	sub	r8,r8,r2
   12088:	41000217 	ldw	r4,8(r8)
   1208c:	388f883a 	add	r7,r7,r2
   12090:	20c06126 	beq	r4,r3,12218 <_free_r+0x268>
   12094:	40800317 	ldw	r2,12(r8)
   12098:	3247883a 	add	r3,r6,r9
   1209c:	000b883a 	mov	r5,zero
   120a0:	11000215 	stw	r4,8(r2)
   120a4:	20800315 	stw	r2,12(r4)
   120a8:	18800117 	ldw	r2,4(r3)
   120ac:	1080004c 	andi	r2,r2,1
   120b0:	103fdd26 	beq	r2,zero,12028 <_free_r+0x78>
   120b4:	38800054 	ori	r2,r7,1
   120b8:	3a07883a 	add	r3,r7,r8
   120bc:	280ac03a 	cmpne	r5,r5,zero
   120c0:	40800115 	stw	r2,4(r8)
   120c4:	19c00015 	stw	r7,0(r3)
   120c8:	283fe61e 	bne	r5,zero,12064 <_free_r+0xb4>
   120cc:	00807fc4 	movi	r2,511
   120d0:	11c01f2e 	bgeu	r2,r7,12150 <_free_r+0x1a0>
   120d4:	3806d27a 	srli	r3,r7,9
   120d8:	1800481e 	bne	r3,zero,121fc <_free_r+0x24c>
   120dc:	3804d0fa 	srli	r2,r7,3
   120e0:	100690fa 	slli	r3,r2,3
   120e4:	1acd883a 	add	r6,r3,r11
   120e8:	31400217 	ldw	r5,8(r6)
   120ec:	31405926 	beq	r6,r5,12254 <_free_r+0x2a4>
   120f0:	28800117 	ldw	r2,4(r5)
   120f4:	00ffff04 	movi	r3,-4
   120f8:	10c4703a 	and	r2,r2,r3
   120fc:	3880022e 	bgeu	r7,r2,12108 <_free_r+0x158>
   12100:	29400217 	ldw	r5,8(r5)
   12104:	317ffa1e 	bne	r6,r5,120f0 <_free_r+0x140>
   12108:	29800317 	ldw	r6,12(r5)
   1210c:	41800315 	stw	r6,12(r8)
   12110:	41400215 	stw	r5,8(r8)
   12114:	8809883a 	mov	r4,r17
   12118:	2a000315 	stw	r8,12(r5)
   1211c:	32000215 	stw	r8,8(r6)
   12120:	dfc00217 	ldw	ra,8(sp)
   12124:	dc400117 	ldw	r17,4(sp)
   12128:	dc000017 	ldw	r16,0(sp)
   1212c:	dec00304 	addi	sp,sp,12
   12130:	00132881 	jmpi	13288 <__malloc_unlock>
   12134:	dfc00217 	ldw	ra,8(sp)
   12138:	dc400117 	ldw	r17,4(sp)
   1213c:	dc000017 	ldw	r16,0(sp)
   12140:	dec00304 	addi	sp,sp,12
   12144:	f800283a 	ret
   12148:	31000217 	ldw	r4,8(r6)
   1214c:	003fbd06 	br	12044 <_free_r+0x94>
   12150:	3806d0fa 	srli	r3,r7,3
   12154:	00800044 	movi	r2,1
   12158:	51400117 	ldw	r5,4(r10)
   1215c:	180890fa 	slli	r4,r3,3
   12160:	1807d0ba 	srai	r3,r3,2
   12164:	22c9883a 	add	r4,r4,r11
   12168:	21800217 	ldw	r6,8(r4)
   1216c:	10c4983a 	sll	r2,r2,r3
   12170:	41000315 	stw	r4,12(r8)
   12174:	41800215 	stw	r6,8(r8)
   12178:	288ab03a 	or	r5,r5,r2
   1217c:	22000215 	stw	r8,8(r4)
   12180:	8809883a 	mov	r4,r17
   12184:	51400115 	stw	r5,4(r10)
   12188:	32000315 	stw	r8,12(r6)
   1218c:	dfc00217 	ldw	ra,8(sp)
   12190:	dc400117 	ldw	r17,4(sp)
   12194:	dc000017 	ldw	r16,0(sp)
   12198:	dec00304 	addi	sp,sp,12
   1219c:	00132881 	jmpi	13288 <__malloc_unlock>
   121a0:	2880004c 	andi	r2,r5,1
   121a4:	3a4d883a 	add	r6,r7,r9
   121a8:	1000071e 	bne	r2,zero,121c8 <_free_r+0x218>
   121ac:	80bffe17 	ldw	r2,-8(r16)
   121b0:	4091c83a 	sub	r8,r8,r2
   121b4:	41000317 	ldw	r4,12(r8)
   121b8:	40c00217 	ldw	r3,8(r8)
   121bc:	308d883a 	add	r6,r6,r2
   121c0:	20c00215 	stw	r3,8(r4)
   121c4:	19000315 	stw	r4,12(r3)
   121c8:	00800074 	movhi	r2,1
   121cc:	109bd704 	addi	r2,r2,28508
   121d0:	11000017 	ldw	r4,0(r2)
   121d4:	30c00054 	ori	r3,r6,1
   121d8:	52000215 	stw	r8,8(r10)
   121dc:	40c00115 	stw	r3,4(r8)
   121e0:	313fa036 	bltu	r6,r4,12064 <_free_r+0xb4>
   121e4:	008000b4 	movhi	r2,2
   121e8:	10a27504 	addi	r2,r2,-30252
   121ec:	11400017 	ldw	r5,0(r2)
   121f0:	8809883a 	mov	r4,r17
   121f4:	0011e840 	call	11e84 <_malloc_trim_r>
   121f8:	003f9a06 	br	12064 <_free_r+0xb4>
   121fc:	00800104 	movi	r2,4
   12200:	10c0072e 	bgeu	r2,r3,12220 <_free_r+0x270>
   12204:	00800504 	movi	r2,20
   12208:	10c01936 	bltu	r2,r3,12270 <_free_r+0x2c0>
   1220c:	188016c4 	addi	r2,r3,91
   12210:	100690fa 	slli	r3,r2,3
   12214:	003fb306 	br	120e4 <_free_r+0x134>
   12218:	01400044 	movi	r5,1
   1221c:	003f7e06 	br	12018 <_free_r+0x68>
   12220:	3804d1ba 	srli	r2,r7,6
   12224:	10800e04 	addi	r2,r2,56
   12228:	100690fa 	slli	r3,r2,3
   1222c:	003fad06 	br	120e4 <_free_r+0x134>
   12230:	22000315 	stw	r8,12(r4)
   12234:	22000215 	stw	r8,8(r4)
   12238:	3a05883a 	add	r2,r7,r8
   1223c:	38c00054 	ori	r3,r7,1
   12240:	11c00015 	stw	r7,0(r2)
   12244:	41000215 	stw	r4,8(r8)
   12248:	40c00115 	stw	r3,4(r8)
   1224c:	41000315 	stw	r4,12(r8)
   12250:	003f8406 	br	12064 <_free_r+0xb4>
   12254:	1005d0ba 	srai	r2,r2,2
   12258:	00c00044 	movi	r3,1
   1225c:	51000117 	ldw	r4,4(r10)
   12260:	1886983a 	sll	r3,r3,r2
   12264:	20c8b03a 	or	r4,r4,r3
   12268:	51000115 	stw	r4,4(r10)
   1226c:	003fa706 	br	1210c <_free_r+0x15c>
   12270:	00801504 	movi	r2,84
   12274:	10c00436 	bltu	r2,r3,12288 <_free_r+0x2d8>
   12278:	3804d33a 	srli	r2,r7,12
   1227c:	10801b84 	addi	r2,r2,110
   12280:	100690fa 	slli	r3,r2,3
   12284:	003f9706 	br	120e4 <_free_r+0x134>
   12288:	00805504 	movi	r2,340
   1228c:	10c00436 	bltu	r2,r3,122a0 <_free_r+0x2f0>
   12290:	3804d3fa 	srli	r2,r7,15
   12294:	10801dc4 	addi	r2,r2,119
   12298:	100690fa 	slli	r3,r2,3
   1229c:	003f9106 	br	120e4 <_free_r+0x134>
   122a0:	00815504 	movi	r2,1364
   122a4:	10c0032e 	bgeu	r2,r3,122b4 <_free_r+0x304>
   122a8:	00801f84 	movi	r2,126
   122ac:	00c0fc04 	movi	r3,1008
   122b0:	003f8c06 	br	120e4 <_free_r+0x134>
   122b4:	3804d4ba 	srli	r2,r7,18
   122b8:	10801f04 	addi	r2,r2,124
   122bc:	100690fa 	slli	r3,r2,3
   122c0:	003f8806 	br	120e4 <_free_r+0x134>

000122c4 <_fwalk_reent>:
   122c4:	defff704 	addi	sp,sp,-36
   122c8:	dcc00315 	stw	r19,12(sp)
   122cc:	24c0b804 	addi	r19,r4,736
   122d0:	dd800615 	stw	r22,24(sp)
   122d4:	dd400515 	stw	r21,20(sp)
   122d8:	dfc00815 	stw	ra,32(sp)
   122dc:	ddc00715 	stw	r23,28(sp)
   122e0:	dd000415 	stw	r20,16(sp)
   122e4:	dc800215 	stw	r18,8(sp)
   122e8:	dc400115 	stw	r17,4(sp)
   122ec:	dc000015 	stw	r16,0(sp)
   122f0:	202b883a 	mov	r21,r4
   122f4:	282d883a 	mov	r22,r5
   122f8:	0011be80 	call	11be8 <__sfp_lock_acquire>
   122fc:	98002126 	beq	r19,zero,12384 <_fwalk_reent+0xc0>
   12300:	002f883a 	mov	r23,zero
   12304:	9c800117 	ldw	r18,4(r19)
   12308:	9c000217 	ldw	r16,8(r19)
   1230c:	90bfffc4 	addi	r2,r18,-1
   12310:	10000d16 	blt	r2,zero,12348 <_fwalk_reent+0x84>
   12314:	0023883a 	mov	r17,zero
   12318:	053fffc4 	movi	r20,-1
   1231c:	8080030f 	ldh	r2,12(r16)
   12320:	8c400044 	addi	r17,r17,1
   12324:	10000626 	beq	r2,zero,12340 <_fwalk_reent+0x7c>
   12328:	8080038f 	ldh	r2,14(r16)
   1232c:	800b883a 	mov	r5,r16
   12330:	a809883a 	mov	r4,r21
   12334:	15000226 	beq	r2,r20,12340 <_fwalk_reent+0x7c>
   12338:	b03ee83a 	callr	r22
   1233c:	b8aeb03a 	or	r23,r23,r2
   12340:	84001704 	addi	r16,r16,92
   12344:	947ff51e 	bne	r18,r17,1231c <_fwalk_reent+0x58>
   12348:	9cc00017 	ldw	r19,0(r19)
   1234c:	983fed1e 	bne	r19,zero,12304 <_fwalk_reent+0x40>
   12350:	0011bec0 	call	11bec <__sfp_lock_release>
   12354:	b805883a 	mov	r2,r23
   12358:	dfc00817 	ldw	ra,32(sp)
   1235c:	ddc00717 	ldw	r23,28(sp)
   12360:	dd800617 	ldw	r22,24(sp)
   12364:	dd400517 	ldw	r21,20(sp)
   12368:	dd000417 	ldw	r20,16(sp)
   1236c:	dcc00317 	ldw	r19,12(sp)
   12370:	dc800217 	ldw	r18,8(sp)
   12374:	dc400117 	ldw	r17,4(sp)
   12378:	dc000017 	ldw	r16,0(sp)
   1237c:	dec00904 	addi	sp,sp,36
   12380:	f800283a 	ret
   12384:	002f883a 	mov	r23,zero
   12388:	003ff106 	br	12350 <_fwalk_reent+0x8c>

0001238c <_fwalk>:
   1238c:	defff804 	addi	sp,sp,-32
   12390:	dcc00315 	stw	r19,12(sp)
   12394:	24c0b804 	addi	r19,r4,736
   12398:	dd400515 	stw	r21,20(sp)
   1239c:	dfc00715 	stw	ra,28(sp)
   123a0:	dd800615 	stw	r22,24(sp)
   123a4:	dd000415 	stw	r20,16(sp)
   123a8:	dc800215 	stw	r18,8(sp)
   123ac:	dc400115 	stw	r17,4(sp)
   123b0:	dc000015 	stw	r16,0(sp)
   123b4:	282b883a 	mov	r21,r5
   123b8:	0011be80 	call	11be8 <__sfp_lock_acquire>
   123bc:	98001f26 	beq	r19,zero,1243c <_fwalk+0xb0>
   123c0:	002d883a 	mov	r22,zero
   123c4:	9c800117 	ldw	r18,4(r19)
   123c8:	9c000217 	ldw	r16,8(r19)
   123cc:	90bfffc4 	addi	r2,r18,-1
   123d0:	10000c16 	blt	r2,zero,12404 <_fwalk+0x78>
   123d4:	0023883a 	mov	r17,zero
   123d8:	053fffc4 	movi	r20,-1
   123dc:	8080030f 	ldh	r2,12(r16)
   123e0:	8c400044 	addi	r17,r17,1
   123e4:	10000526 	beq	r2,zero,123fc <_fwalk+0x70>
   123e8:	8080038f 	ldh	r2,14(r16)
   123ec:	8009883a 	mov	r4,r16
   123f0:	15000226 	beq	r2,r20,123fc <_fwalk+0x70>
   123f4:	a83ee83a 	callr	r21
   123f8:	b0acb03a 	or	r22,r22,r2
   123fc:	84001704 	addi	r16,r16,92
   12400:	947ff61e 	bne	r18,r17,123dc <_fwalk+0x50>
   12404:	9cc00017 	ldw	r19,0(r19)
   12408:	983fee1e 	bne	r19,zero,123c4 <_fwalk+0x38>
   1240c:	0011bec0 	call	11bec <__sfp_lock_release>
   12410:	b005883a 	mov	r2,r22
   12414:	dfc00717 	ldw	ra,28(sp)
   12418:	dd800617 	ldw	r22,24(sp)
   1241c:	dd400517 	ldw	r21,20(sp)
   12420:	dd000417 	ldw	r20,16(sp)
   12424:	dcc00317 	ldw	r19,12(sp)
   12428:	dc800217 	ldw	r18,8(sp)
   1242c:	dc400117 	ldw	r17,4(sp)
   12430:	dc000017 	ldw	r16,0(sp)
   12434:	dec00804 	addi	sp,sp,32
   12438:	f800283a 	ret
   1243c:	002d883a 	mov	r22,zero
   12440:	003ff206 	br	1240c <_fwalk+0x80>

00012444 <__smakebuf_r>:
   12444:	2880030b 	ldhu	r2,12(r5)
   12448:	deffed04 	addi	sp,sp,-76
   1244c:	dc401015 	stw	r17,64(sp)
   12450:	1080008c 	andi	r2,r2,2
   12454:	dc000f15 	stw	r16,60(sp)
   12458:	dfc01215 	stw	ra,72(sp)
   1245c:	dc801115 	stw	r18,68(sp)
   12460:	2821883a 	mov	r16,r5
   12464:	2023883a 	mov	r17,r4
   12468:	10000b26 	beq	r2,zero,12498 <__smakebuf_r+0x54>
   1246c:	28c010c4 	addi	r3,r5,67
   12470:	00800044 	movi	r2,1
   12474:	28800515 	stw	r2,20(r5)
   12478:	28c00415 	stw	r3,16(r5)
   1247c:	28c00015 	stw	r3,0(r5)
   12480:	dfc01217 	ldw	ra,72(sp)
   12484:	dc801117 	ldw	r18,68(sp)
   12488:	dc401017 	ldw	r17,64(sp)
   1248c:	dc000f17 	ldw	r16,60(sp)
   12490:	dec01304 	addi	sp,sp,76
   12494:	f800283a 	ret
   12498:	2940038f 	ldh	r5,14(r5)
   1249c:	28002116 	blt	r5,zero,12524 <__smakebuf_r+0xe0>
   124a0:	d80d883a 	mov	r6,sp
   124a4:	00129c80 	call	129c8 <_fstat_r>
   124a8:	10001e16 	blt	r2,zero,12524 <__smakebuf_r+0xe0>
   124ac:	d8800117 	ldw	r2,4(sp)
   124b0:	00e00014 	movui	r3,32768
   124b4:	113c000c 	andi	r4,r2,61440
   124b8:	20c03126 	beq	r4,r3,12580 <__smakebuf_r+0x13c>
   124bc:	8080030b 	ldhu	r2,12(r16)
   124c0:	00c80004 	movi	r3,8192
   124c4:	10820014 	ori	r2,r2,2048
   124c8:	8080030d 	sth	r2,12(r16)
   124cc:	20c01e26 	beq	r4,r3,12548 <__smakebuf_r+0x104>
   124d0:	04810004 	movi	r18,1024
   124d4:	8809883a 	mov	r4,r17
   124d8:	900b883a 	mov	r5,r18
   124dc:	001081c0 	call	1081c <_malloc_r>
   124e0:	1009883a 	mov	r4,r2
   124e4:	10003126 	beq	r2,zero,125ac <__smakebuf_r+0x168>
   124e8:	80c0030b 	ldhu	r3,12(r16)
   124ec:	00800074 	movhi	r2,1
   124f0:	10873704 	addi	r2,r2,7388
   124f4:	88800f15 	stw	r2,60(r17)
   124f8:	18c02014 	ori	r3,r3,128
   124fc:	84800515 	stw	r18,20(r16)
   12500:	80c0030d 	sth	r3,12(r16)
   12504:	81000415 	stw	r4,16(r16)
   12508:	81000015 	stw	r4,0(r16)
   1250c:	dfc01217 	ldw	ra,72(sp)
   12510:	dc801117 	ldw	r18,68(sp)
   12514:	dc401017 	ldw	r17,64(sp)
   12518:	dc000f17 	ldw	r16,60(sp)
   1251c:	dec01304 	addi	sp,sp,76
   12520:	f800283a 	ret
   12524:	80c0030b 	ldhu	r3,12(r16)
   12528:	1880200c 	andi	r2,r3,128
   1252c:	10000426 	beq	r2,zero,12540 <__smakebuf_r+0xfc>
   12530:	04801004 	movi	r18,64
   12534:	18820014 	ori	r2,r3,2048
   12538:	8080030d 	sth	r2,12(r16)
   1253c:	003fe506 	br	124d4 <__smakebuf_r+0x90>
   12540:	04810004 	movi	r18,1024
   12544:	003ffb06 	br	12534 <__smakebuf_r+0xf0>
   12548:	8140038f 	ldh	r5,14(r16)
   1254c:	8809883a 	mov	r4,r17
   12550:	0012a3c0 	call	12a3c <_isatty_r>
   12554:	103fde26 	beq	r2,zero,124d0 <__smakebuf_r+0x8c>
   12558:	8080030b 	ldhu	r2,12(r16)
   1255c:	80c010c4 	addi	r3,r16,67
   12560:	04810004 	movi	r18,1024
   12564:	10800054 	ori	r2,r2,1
   12568:	8080030d 	sth	r2,12(r16)
   1256c:	00800044 	movi	r2,1
   12570:	80c00415 	stw	r3,16(r16)
   12574:	80800515 	stw	r2,20(r16)
   12578:	80c00015 	stw	r3,0(r16)
   1257c:	003fd506 	br	124d4 <__smakebuf_r+0x90>
   12580:	80c00a17 	ldw	r3,40(r16)
   12584:	00800074 	movhi	r2,1
   12588:	10899e04 	addi	r2,r2,9848
   1258c:	18bfcb1e 	bne	r3,r2,124bc <__smakebuf_r+0x78>
   12590:	8080030b 	ldhu	r2,12(r16)
   12594:	00c10004 	movi	r3,1024
   12598:	1825883a 	mov	r18,r3
   1259c:	10c4b03a 	or	r2,r2,r3
   125a0:	8080030d 	sth	r2,12(r16)
   125a4:	80c01315 	stw	r3,76(r16)
   125a8:	003fca06 	br	124d4 <__smakebuf_r+0x90>
   125ac:	8100030b 	ldhu	r4,12(r16)
   125b0:	2080800c 	andi	r2,r4,512
   125b4:	103fb21e 	bne	r2,zero,12480 <__smakebuf_r+0x3c>
   125b8:	80c010c4 	addi	r3,r16,67
   125bc:	21000094 	ori	r4,r4,2
   125c0:	00800044 	movi	r2,1
   125c4:	80800515 	stw	r2,20(r16)
   125c8:	8100030d 	sth	r4,12(r16)
   125cc:	80c00415 	stw	r3,16(r16)
   125d0:	80c00015 	stw	r3,0(r16)
   125d4:	003faa06 	br	12480 <__smakebuf_r+0x3c>

000125d8 <memset>:
   125d8:	008000c4 	movi	r2,3
   125dc:	29403fcc 	andi	r5,r5,255
   125e0:	2007883a 	mov	r3,r4
   125e4:	1180022e 	bgeu	r2,r6,125f0 <memset+0x18>
   125e8:	2084703a 	and	r2,r4,r2
   125ec:	10000826 	beq	r2,zero,12610 <memset+0x38>
   125f0:	30000526 	beq	r6,zero,12608 <memset+0x30>
   125f4:	2805883a 	mov	r2,r5
   125f8:	30cd883a 	add	r6,r6,r3
   125fc:	18800005 	stb	r2,0(r3)
   12600:	18c00044 	addi	r3,r3,1
   12604:	19bffd1e 	bne	r3,r6,125fc <memset+0x24>
   12608:	2005883a 	mov	r2,r4
   1260c:	f800283a 	ret
   12610:	2804923a 	slli	r2,r5,8
   12614:	020003c4 	movi	r8,15
   12618:	200f883a 	mov	r7,r4
   1261c:	2884b03a 	or	r2,r5,r2
   12620:	1006943a 	slli	r3,r2,16
   12624:	10c6b03a 	or	r3,r2,r3
   12628:	41800a2e 	bgeu	r8,r6,12654 <memset+0x7c>
   1262c:	4005883a 	mov	r2,r8
   12630:	31bffc04 	addi	r6,r6,-16
   12634:	38c00015 	stw	r3,0(r7)
   12638:	38c00115 	stw	r3,4(r7)
   1263c:	38c00215 	stw	r3,8(r7)
   12640:	38c00315 	stw	r3,12(r7)
   12644:	39c00404 	addi	r7,r7,16
   12648:	11bff936 	bltu	r2,r6,12630 <memset+0x58>
   1264c:	008000c4 	movi	r2,3
   12650:	1180052e 	bgeu	r2,r6,12668 <memset+0x90>
   12654:	31bfff04 	addi	r6,r6,-4
   12658:	008000c4 	movi	r2,3
   1265c:	38c00015 	stw	r3,0(r7)
   12660:	39c00104 	addi	r7,r7,4
   12664:	11bffb36 	bltu	r2,r6,12654 <memset+0x7c>
   12668:	3807883a 	mov	r3,r7
   1266c:	003fe006 	br	125f0 <memset+0x18>

00012670 <__sclose>:
   12670:	2940038f 	ldh	r5,14(r5)
   12674:	00128341 	jmpi	12834 <_close_r>

00012678 <__sseek>:
   12678:	defffe04 	addi	sp,sp,-8
   1267c:	dc000015 	stw	r16,0(sp)
   12680:	2821883a 	mov	r16,r5
   12684:	2940038f 	ldh	r5,14(r5)
   12688:	dfc00115 	stw	ra,4(sp)
   1268c:	0012aac0 	call	12aac <_lseek_r>
   12690:	1007883a 	mov	r3,r2
   12694:	00bfffc4 	movi	r2,-1
   12698:	18800926 	beq	r3,r2,126c0 <__sseek+0x48>
   1269c:	8080030b 	ldhu	r2,12(r16)
   126a0:	80c01415 	stw	r3,80(r16)
   126a4:	10840014 	ori	r2,r2,4096
   126a8:	8080030d 	sth	r2,12(r16)
   126ac:	1805883a 	mov	r2,r3
   126b0:	dfc00117 	ldw	ra,4(sp)
   126b4:	dc000017 	ldw	r16,0(sp)
   126b8:	dec00204 	addi	sp,sp,8
   126bc:	f800283a 	ret
   126c0:	8080030b 	ldhu	r2,12(r16)
   126c4:	10bbffcc 	andi	r2,r2,61439
   126c8:	8080030d 	sth	r2,12(r16)
   126cc:	1805883a 	mov	r2,r3
   126d0:	dfc00117 	ldw	ra,4(sp)
   126d4:	dc000017 	ldw	r16,0(sp)
   126d8:	dec00204 	addi	sp,sp,8
   126dc:	f800283a 	ret

000126e0 <__swrite>:
   126e0:	2880030b 	ldhu	r2,12(r5)
   126e4:	defffb04 	addi	sp,sp,-20
   126e8:	dcc00315 	stw	r19,12(sp)
   126ec:	1080400c 	andi	r2,r2,256
   126f0:	dc800215 	stw	r18,8(sp)
   126f4:	dc400115 	stw	r17,4(sp)
   126f8:	dc000015 	stw	r16,0(sp)
   126fc:	3027883a 	mov	r19,r6
   12700:	3825883a 	mov	r18,r7
   12704:	dfc00415 	stw	ra,16(sp)
   12708:	2821883a 	mov	r16,r5
   1270c:	000d883a 	mov	r6,zero
   12710:	01c00084 	movi	r7,2
   12714:	2023883a 	mov	r17,r4
   12718:	10000226 	beq	r2,zero,12724 <__swrite+0x44>
   1271c:	2940038f 	ldh	r5,14(r5)
   12720:	0012aac0 	call	12aac <_lseek_r>
   12724:	8080030b 	ldhu	r2,12(r16)
   12728:	8140038f 	ldh	r5,14(r16)
   1272c:	8809883a 	mov	r4,r17
   12730:	10bbffcc 	andi	r2,r2,61439
   12734:	980d883a 	mov	r6,r19
   12738:	900f883a 	mov	r7,r18
   1273c:	8080030d 	sth	r2,12(r16)
   12740:	dfc00417 	ldw	ra,16(sp)
   12744:	dcc00317 	ldw	r19,12(sp)
   12748:	dc800217 	ldw	r18,8(sp)
   1274c:	dc400117 	ldw	r17,4(sp)
   12750:	dc000017 	ldw	r16,0(sp)
   12754:	dec00504 	addi	sp,sp,20
   12758:	00127bc1 	jmpi	127bc <_write_r>

0001275c <__sread>:
   1275c:	defffe04 	addi	sp,sp,-8
   12760:	dc000015 	stw	r16,0(sp)
   12764:	2821883a 	mov	r16,r5
   12768:	2940038f 	ldh	r5,14(r5)
   1276c:	dfc00115 	stw	ra,4(sp)
   12770:	0012b240 	call	12b24 <_read_r>
   12774:	1007883a 	mov	r3,r2
   12778:	10000816 	blt	r2,zero,1279c <__sread+0x40>
   1277c:	80801417 	ldw	r2,80(r16)
   12780:	10c5883a 	add	r2,r2,r3
   12784:	80801415 	stw	r2,80(r16)
   12788:	1805883a 	mov	r2,r3
   1278c:	dfc00117 	ldw	ra,4(sp)
   12790:	dc000017 	ldw	r16,0(sp)
   12794:	dec00204 	addi	sp,sp,8
   12798:	f800283a 	ret
   1279c:	8080030b 	ldhu	r2,12(r16)
   127a0:	10bbffcc 	andi	r2,r2,61439
   127a4:	8080030d 	sth	r2,12(r16)
   127a8:	1805883a 	mov	r2,r3
   127ac:	dfc00117 	ldw	ra,4(sp)
   127b0:	dc000017 	ldw	r16,0(sp)
   127b4:	dec00204 	addi	sp,sp,8
   127b8:	f800283a 	ret

000127bc <_write_r>:
   127bc:	defffd04 	addi	sp,sp,-12
   127c0:	dc000015 	stw	r16,0(sp)
   127c4:	040000b4 	movhi	r16,2
   127c8:	84227804 	addi	r16,r16,-30240
   127cc:	dc400115 	stw	r17,4(sp)
   127d0:	80000015 	stw	zero,0(r16)
   127d4:	2023883a 	mov	r17,r4
   127d8:	2809883a 	mov	r4,r5
   127dc:	300b883a 	mov	r5,r6
   127e0:	380d883a 	mov	r6,r7
   127e4:	dfc00215 	stw	ra,8(sp)
   127e8:	00135600 	call	13560 <write>
   127ec:	1007883a 	mov	r3,r2
   127f0:	00bfffc4 	movi	r2,-1
   127f4:	18800626 	beq	r3,r2,12810 <_write_r+0x54>
   127f8:	1805883a 	mov	r2,r3
   127fc:	dfc00217 	ldw	ra,8(sp)
   12800:	dc400117 	ldw	r17,4(sp)
   12804:	dc000017 	ldw	r16,0(sp)
   12808:	dec00304 	addi	sp,sp,12
   1280c:	f800283a 	ret
   12810:	80800017 	ldw	r2,0(r16)
   12814:	103ff826 	beq	r2,zero,127f8 <_write_r+0x3c>
   12818:	88800015 	stw	r2,0(r17)
   1281c:	1805883a 	mov	r2,r3
   12820:	dfc00217 	ldw	ra,8(sp)
   12824:	dc400117 	ldw	r17,4(sp)
   12828:	dc000017 	ldw	r16,0(sp)
   1282c:	dec00304 	addi	sp,sp,12
   12830:	f800283a 	ret

00012834 <_close_r>:
   12834:	defffd04 	addi	sp,sp,-12
   12838:	dc000015 	stw	r16,0(sp)
   1283c:	040000b4 	movhi	r16,2
   12840:	84227804 	addi	r16,r16,-30240
   12844:	dc400115 	stw	r17,4(sp)
   12848:	80000015 	stw	zero,0(r16)
   1284c:	2023883a 	mov	r17,r4
   12850:	2809883a 	mov	r4,r5
   12854:	dfc00215 	stw	ra,8(sp)
   12858:	0012bd40 	call	12bd4 <close>
   1285c:	1007883a 	mov	r3,r2
   12860:	00bfffc4 	movi	r2,-1
   12864:	18800626 	beq	r3,r2,12880 <_close_r+0x4c>
   12868:	1805883a 	mov	r2,r3
   1286c:	dfc00217 	ldw	ra,8(sp)
   12870:	dc400117 	ldw	r17,4(sp)
   12874:	dc000017 	ldw	r16,0(sp)
   12878:	dec00304 	addi	sp,sp,12
   1287c:	f800283a 	ret
   12880:	80800017 	ldw	r2,0(r16)
   12884:	103ff826 	beq	r2,zero,12868 <_close_r+0x34>
   12888:	88800015 	stw	r2,0(r17)
   1288c:	1805883a 	mov	r2,r3
   12890:	dfc00217 	ldw	ra,8(sp)
   12894:	dc400117 	ldw	r17,4(sp)
   12898:	dc000017 	ldw	r16,0(sp)
   1289c:	dec00304 	addi	sp,sp,12
   128a0:	f800283a 	ret

000128a4 <_fclose_r>:
   128a4:	defffc04 	addi	sp,sp,-16
   128a8:	dc400115 	stw	r17,4(sp)
   128ac:	dc000015 	stw	r16,0(sp)
   128b0:	dfc00315 	stw	ra,12(sp)
   128b4:	dc800215 	stw	r18,8(sp)
   128b8:	2821883a 	mov	r16,r5
   128bc:	2023883a 	mov	r17,r4
   128c0:	28002926 	beq	r5,zero,12968 <_fclose_r+0xc4>
   128c4:	0011be80 	call	11be8 <__sfp_lock_acquire>
   128c8:	88000226 	beq	r17,zero,128d4 <_fclose_r+0x30>
   128cc:	88800e17 	ldw	r2,56(r17)
   128d0:	10002d26 	beq	r2,zero,12988 <_fclose_r+0xe4>
   128d4:	8080030f 	ldh	r2,12(r16)
   128d8:	10002226 	beq	r2,zero,12964 <_fclose_r+0xc0>
   128dc:	8809883a 	mov	r4,r17
   128e0:	800b883a 	mov	r5,r16
   128e4:	00119600 	call	11960 <_fflush_r>
   128e8:	1025883a 	mov	r18,r2
   128ec:	80800b17 	ldw	r2,44(r16)
   128f0:	10000426 	beq	r2,zero,12904 <_fclose_r+0x60>
   128f4:	81400717 	ldw	r5,28(r16)
   128f8:	8809883a 	mov	r4,r17
   128fc:	103ee83a 	callr	r2
   12900:	10002a16 	blt	r2,zero,129ac <_fclose_r+0x108>
   12904:	8080030b 	ldhu	r2,12(r16)
   12908:	1080200c 	andi	r2,r2,128
   1290c:	1000231e 	bne	r2,zero,1299c <_fclose_r+0xf8>
   12910:	81400c17 	ldw	r5,48(r16)
   12914:	28000526 	beq	r5,zero,1292c <_fclose_r+0x88>
   12918:	80801004 	addi	r2,r16,64
   1291c:	28800226 	beq	r5,r2,12928 <_fclose_r+0x84>
   12920:	8809883a 	mov	r4,r17
   12924:	0011fb00 	call	11fb0 <_free_r>
   12928:	80000c15 	stw	zero,48(r16)
   1292c:	81401117 	ldw	r5,68(r16)
   12930:	28000326 	beq	r5,zero,12940 <_fclose_r+0x9c>
   12934:	8809883a 	mov	r4,r17
   12938:	0011fb00 	call	11fb0 <_free_r>
   1293c:	80001115 	stw	zero,68(r16)
   12940:	8000030d 	sth	zero,12(r16)
   12944:	0011bec0 	call	11bec <__sfp_lock_release>
   12948:	9005883a 	mov	r2,r18
   1294c:	dfc00317 	ldw	ra,12(sp)
   12950:	dc800217 	ldw	r18,8(sp)
   12954:	dc400117 	ldw	r17,4(sp)
   12958:	dc000017 	ldw	r16,0(sp)
   1295c:	dec00404 	addi	sp,sp,16
   12960:	f800283a 	ret
   12964:	0011bec0 	call	11bec <__sfp_lock_release>
   12968:	0025883a 	mov	r18,zero
   1296c:	9005883a 	mov	r2,r18
   12970:	dfc00317 	ldw	ra,12(sp)
   12974:	dc800217 	ldw	r18,8(sp)
   12978:	dc400117 	ldw	r17,4(sp)
   1297c:	dc000017 	ldw	r16,0(sp)
   12980:	dec00404 	addi	sp,sp,16
   12984:	f800283a 	ret
   12988:	8809883a 	mov	r4,r17
   1298c:	0011bf80 	call	11bf8 <__sinit>
   12990:	8080030f 	ldh	r2,12(r16)
   12994:	103fd11e 	bne	r2,zero,128dc <_fclose_r+0x38>
   12998:	003ff206 	br	12964 <_fclose_r+0xc0>
   1299c:	81400417 	ldw	r5,16(r16)
   129a0:	8809883a 	mov	r4,r17
   129a4:	0011fb00 	call	11fb0 <_free_r>
   129a8:	003fd906 	br	12910 <_fclose_r+0x6c>
   129ac:	04bfffc4 	movi	r18,-1
   129b0:	003fd406 	br	12904 <_fclose_r+0x60>

000129b4 <fclose>:
   129b4:	00800074 	movhi	r2,1
   129b8:	109bd504 	addi	r2,r2,28500
   129bc:	200b883a 	mov	r5,r4
   129c0:	11000017 	ldw	r4,0(r2)
   129c4:	00128a41 	jmpi	128a4 <_fclose_r>

000129c8 <_fstat_r>:
   129c8:	defffd04 	addi	sp,sp,-12
   129cc:	dc000015 	stw	r16,0(sp)
   129d0:	040000b4 	movhi	r16,2
   129d4:	84227804 	addi	r16,r16,-30240
   129d8:	dc400115 	stw	r17,4(sp)
   129dc:	80000015 	stw	zero,0(r16)
   129e0:	2023883a 	mov	r17,r4
   129e4:	2809883a 	mov	r4,r5
   129e8:	300b883a 	mov	r5,r6
   129ec:	dfc00215 	stw	ra,8(sp)
   129f0:	0012d600 	call	12d60 <fstat>
   129f4:	1007883a 	mov	r3,r2
   129f8:	00bfffc4 	movi	r2,-1
   129fc:	18800626 	beq	r3,r2,12a18 <_fstat_r+0x50>
   12a00:	1805883a 	mov	r2,r3
   12a04:	dfc00217 	ldw	ra,8(sp)
   12a08:	dc400117 	ldw	r17,4(sp)
   12a0c:	dc000017 	ldw	r16,0(sp)
   12a10:	dec00304 	addi	sp,sp,12
   12a14:	f800283a 	ret
   12a18:	80800017 	ldw	r2,0(r16)
   12a1c:	103ff826 	beq	r2,zero,12a00 <_fstat_r+0x38>
   12a20:	88800015 	stw	r2,0(r17)
   12a24:	1805883a 	mov	r2,r3
   12a28:	dfc00217 	ldw	ra,8(sp)
   12a2c:	dc400117 	ldw	r17,4(sp)
   12a30:	dc000017 	ldw	r16,0(sp)
   12a34:	dec00304 	addi	sp,sp,12
   12a38:	f800283a 	ret

00012a3c <_isatty_r>:
   12a3c:	defffd04 	addi	sp,sp,-12
   12a40:	dc000015 	stw	r16,0(sp)
   12a44:	040000b4 	movhi	r16,2
   12a48:	84227804 	addi	r16,r16,-30240
   12a4c:	dc400115 	stw	r17,4(sp)
   12a50:	80000015 	stw	zero,0(r16)
   12a54:	2023883a 	mov	r17,r4
   12a58:	2809883a 	mov	r4,r5
   12a5c:	dfc00215 	stw	ra,8(sp)
   12a60:	0012e980 	call	12e98 <isatty>
   12a64:	1007883a 	mov	r3,r2
   12a68:	00bfffc4 	movi	r2,-1
   12a6c:	18800626 	beq	r3,r2,12a88 <_isatty_r+0x4c>
   12a70:	1805883a 	mov	r2,r3
   12a74:	dfc00217 	ldw	ra,8(sp)
   12a78:	dc400117 	ldw	r17,4(sp)
   12a7c:	dc000017 	ldw	r16,0(sp)
   12a80:	dec00304 	addi	sp,sp,12
   12a84:	f800283a 	ret
   12a88:	80800017 	ldw	r2,0(r16)
   12a8c:	103ff826 	beq	r2,zero,12a70 <_isatty_r+0x34>
   12a90:	88800015 	stw	r2,0(r17)
   12a94:	1805883a 	mov	r2,r3
   12a98:	dfc00217 	ldw	ra,8(sp)
   12a9c:	dc400117 	ldw	r17,4(sp)
   12aa0:	dc000017 	ldw	r16,0(sp)
   12aa4:	dec00304 	addi	sp,sp,12
   12aa8:	f800283a 	ret

00012aac <_lseek_r>:
   12aac:	defffd04 	addi	sp,sp,-12
   12ab0:	dc000015 	stw	r16,0(sp)
   12ab4:	040000b4 	movhi	r16,2
   12ab8:	84227804 	addi	r16,r16,-30240
   12abc:	dc400115 	stw	r17,4(sp)
   12ac0:	80000015 	stw	zero,0(r16)
   12ac4:	2023883a 	mov	r17,r4
   12ac8:	2809883a 	mov	r4,r5
   12acc:	300b883a 	mov	r5,r6
   12ad0:	380d883a 	mov	r6,r7
   12ad4:	dfc00215 	stw	ra,8(sp)
   12ad8:	00130a80 	call	130a8 <lseek>
   12adc:	1007883a 	mov	r3,r2
   12ae0:	00bfffc4 	movi	r2,-1
   12ae4:	18800626 	beq	r3,r2,12b00 <_lseek_r+0x54>
   12ae8:	1805883a 	mov	r2,r3
   12aec:	dfc00217 	ldw	ra,8(sp)
   12af0:	dc400117 	ldw	r17,4(sp)
   12af4:	dc000017 	ldw	r16,0(sp)
   12af8:	dec00304 	addi	sp,sp,12
   12afc:	f800283a 	ret
   12b00:	80800017 	ldw	r2,0(r16)
   12b04:	103ff826 	beq	r2,zero,12ae8 <_lseek_r+0x3c>
   12b08:	88800015 	stw	r2,0(r17)
   12b0c:	1805883a 	mov	r2,r3
   12b10:	dfc00217 	ldw	ra,8(sp)
   12b14:	dc400117 	ldw	r17,4(sp)
   12b18:	dc000017 	ldw	r16,0(sp)
   12b1c:	dec00304 	addi	sp,sp,12
   12b20:	f800283a 	ret

00012b24 <_read_r>:
   12b24:	defffd04 	addi	sp,sp,-12
   12b28:	dc000015 	stw	r16,0(sp)
   12b2c:	040000b4 	movhi	r16,2
   12b30:	84227804 	addi	r16,r16,-30240
   12b34:	dc400115 	stw	r17,4(sp)
   12b38:	80000015 	stw	zero,0(r16)
   12b3c:	2023883a 	mov	r17,r4
   12b40:	2809883a 	mov	r4,r5
   12b44:	300b883a 	mov	r5,r6
   12b48:	380d883a 	mov	r6,r7
   12b4c:	dfc00215 	stw	ra,8(sp)
   12b50:	00132a80 	call	132a8 <read>
   12b54:	1007883a 	mov	r3,r2
   12b58:	00bfffc4 	movi	r2,-1
   12b5c:	18800626 	beq	r3,r2,12b78 <_read_r+0x54>
   12b60:	1805883a 	mov	r2,r3
   12b64:	dfc00217 	ldw	ra,8(sp)
   12b68:	dc400117 	ldw	r17,4(sp)
   12b6c:	dc000017 	ldw	r16,0(sp)
   12b70:	dec00304 	addi	sp,sp,12
   12b74:	f800283a 	ret
   12b78:	80800017 	ldw	r2,0(r16)
   12b7c:	103ff826 	beq	r2,zero,12b60 <_read_r+0x3c>
   12b80:	88800015 	stw	r2,0(r17)
   12b84:	1805883a 	mov	r2,r3
   12b88:	dfc00217 	ldw	ra,8(sp)
   12b8c:	dc400117 	ldw	r17,4(sp)
   12b90:	dc000017 	ldw	r16,0(sp)
   12b94:	dec00304 	addi	sp,sp,12
   12b98:	f800283a 	ret

00012b9c <__mulsi3>:
   12b9c:	20000a26 	beq	r4,zero,12bc8 <__mulsi3+0x2c>
   12ba0:	0007883a 	mov	r3,zero
   12ba4:	2080004c 	andi	r2,r4,1
   12ba8:	1005003a 	cmpeq	r2,r2,zero
   12bac:	2008d07a 	srli	r4,r4,1
   12bb0:	1000011e 	bne	r2,zero,12bb8 <__mulsi3+0x1c>
   12bb4:	1947883a 	add	r3,r3,r5
   12bb8:	294b883a 	add	r5,r5,r5
   12bbc:	203ff91e 	bne	r4,zero,12ba4 <__mulsi3+0x8>
   12bc0:	1805883a 	mov	r2,r3
   12bc4:	f800283a 	ret
   12bc8:	0007883a 	mov	r3,zero
   12bcc:	1805883a 	mov	r2,r3
   12bd0:	f800283a 	ret

00012bd4 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   12bd4:	defff804 	addi	sp,sp,-32
   12bd8:	dfc00715 	stw	ra,28(sp)
   12bdc:	df000615 	stw	fp,24(sp)
   12be0:	df000604 	addi	fp,sp,24
   12be4:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   12be8:	e0bffc17 	ldw	r2,-16(fp)
   12bec:	1004803a 	cmplt	r2,r2,zero
   12bf0:	1000091e 	bne	r2,zero,12c18 <close+0x44>
   12bf4:	e13ffc17 	ldw	r4,-16(fp)
   12bf8:	01400304 	movi	r5,12
   12bfc:	0012b9c0 	call	12b9c <__mulsi3>
   12c00:	1007883a 	mov	r3,r2
   12c04:	00800074 	movhi	r2,1
   12c08:	10975d04 	addi	r2,r2,23924
   12c0c:	1887883a 	add	r3,r3,r2
   12c10:	e0ffff15 	stw	r3,-4(fp)
   12c14:	00000106 	br	12c1c <close+0x48>
   12c18:	e03fff15 	stw	zero,-4(fp)
   12c1c:	e0bfff17 	ldw	r2,-4(fp)
   12c20:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
   12c24:	e0bffb17 	ldw	r2,-20(fp)
   12c28:	1005003a 	cmpeq	r2,r2,zero
   12c2c:	10001d1e 	bne	r2,zero,12ca4 <close+0xd0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   12c30:	e0bffb17 	ldw	r2,-20(fp)
   12c34:	10800017 	ldw	r2,0(r2)
   12c38:	10800417 	ldw	r2,16(r2)
   12c3c:	1005003a 	cmpeq	r2,r2,zero
   12c40:	1000071e 	bne	r2,zero,12c60 <close+0x8c>
   12c44:	e0bffb17 	ldw	r2,-20(fp)
   12c48:	10800017 	ldw	r2,0(r2)
   12c4c:	10800417 	ldw	r2,16(r2)
   12c50:	e13ffb17 	ldw	r4,-20(fp)
   12c54:	103ee83a 	callr	r2
   12c58:	e0bffe15 	stw	r2,-8(fp)
   12c5c:	00000106 	br	12c64 <close+0x90>
   12c60:	e03ffe15 	stw	zero,-8(fp)
   12c64:	e0bffe17 	ldw	r2,-8(fp)
   12c68:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   12c6c:	e13ffc17 	ldw	r4,-16(fp)
   12c70:	001342c0 	call	1342c <alt_release_fd>
    if (rval < 0)
   12c74:	e0bffa17 	ldw	r2,-24(fp)
   12c78:	1004403a 	cmpge	r2,r2,zero
   12c7c:	1000071e 	bne	r2,zero,12c9c <close+0xc8>
    {
      ALT_ERRNO = -rval;
   12c80:	0012cd40 	call	12cd4 <alt_get_errno>
   12c84:	e0fffa17 	ldw	r3,-24(fp)
   12c88:	00c7c83a 	sub	r3,zero,r3
   12c8c:	10c00015 	stw	r3,0(r2)
      return -1;
   12c90:	00bfffc4 	movi	r2,-1
   12c94:	e0bffd15 	stw	r2,-12(fp)
   12c98:	00000806 	br	12cbc <close+0xe8>
    }
    return 0;
   12c9c:	e03ffd15 	stw	zero,-12(fp)
   12ca0:	00000606 	br	12cbc <close+0xe8>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   12ca4:	0012cd40 	call	12cd4 <alt_get_errno>
   12ca8:	1007883a 	mov	r3,r2
   12cac:	00801444 	movi	r2,81
   12cb0:	18800015 	stw	r2,0(r3)
    return -1;
   12cb4:	00bfffc4 	movi	r2,-1
   12cb8:	e0bffd15 	stw	r2,-12(fp)
   12cbc:	e0bffd17 	ldw	r2,-12(fp)
  }
}
   12cc0:	e037883a 	mov	sp,fp
   12cc4:	dfc00117 	ldw	ra,4(sp)
   12cc8:	df000017 	ldw	fp,0(sp)
   12ccc:	dec00204 	addi	sp,sp,8
   12cd0:	f800283a 	ret

00012cd4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   12cd4:	defffd04 	addi	sp,sp,-12
   12cd8:	dfc00215 	stw	ra,8(sp)
   12cdc:	df000115 	stw	fp,4(sp)
   12ce0:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   12ce4:	00800074 	movhi	r2,1
   12ce8:	109bde04 	addi	r2,r2,28536
   12cec:	10800017 	ldw	r2,0(r2)
   12cf0:	1005003a 	cmpeq	r2,r2,zero
   12cf4:	1000061e 	bne	r2,zero,12d10 <alt_get_errno+0x3c>
   12cf8:	00800074 	movhi	r2,1
   12cfc:	109bde04 	addi	r2,r2,28536
   12d00:	10800017 	ldw	r2,0(r2)
   12d04:	103ee83a 	callr	r2
   12d08:	e0bfff15 	stw	r2,-4(fp)
   12d0c:	00000306 	br	12d1c <alt_get_errno+0x48>
   12d10:	008000b4 	movhi	r2,2
   12d14:	10a27804 	addi	r2,r2,-30240
   12d18:	e0bfff15 	stw	r2,-4(fp)
   12d1c:	e0bfff17 	ldw	r2,-4(fp)
}
   12d20:	e037883a 	mov	sp,fp
   12d24:	dfc00117 	ldw	ra,4(sp)
   12d28:	df000017 	ldw	fp,0(sp)
   12d2c:	dec00204 	addi	sp,sp,8
   12d30:	f800283a 	ret

00012d34 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   12d34:	defffc04 	addi	sp,sp,-16
   12d38:	df000315 	stw	fp,12(sp)
   12d3c:	df000304 	addi	fp,sp,12
   12d40:	e13ffd15 	stw	r4,-12(fp)
   12d44:	e17ffe15 	stw	r5,-8(fp)
   12d48:	e1bfff15 	stw	r6,-4(fp)
  return len;
   12d4c:	e0bfff17 	ldw	r2,-4(fp)
}
   12d50:	e037883a 	mov	sp,fp
   12d54:	df000017 	ldw	fp,0(sp)
   12d58:	dec00104 	addi	sp,sp,4
   12d5c:	f800283a 	ret

00012d60 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   12d60:	defff904 	addi	sp,sp,-28
   12d64:	dfc00615 	stw	ra,24(sp)
   12d68:	df000515 	stw	fp,20(sp)
   12d6c:	df000504 	addi	fp,sp,20
   12d70:	e13ffc15 	stw	r4,-16(fp)
   12d74:	e17ffd15 	stw	r5,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   12d78:	e0bffc17 	ldw	r2,-16(fp)
   12d7c:	1004803a 	cmplt	r2,r2,zero
   12d80:	1000091e 	bne	r2,zero,12da8 <fstat+0x48>
   12d84:	e13ffc17 	ldw	r4,-16(fp)
   12d88:	01400304 	movi	r5,12
   12d8c:	0012b9c0 	call	12b9c <__mulsi3>
   12d90:	1007883a 	mov	r3,r2
   12d94:	00800074 	movhi	r2,1
   12d98:	10975d04 	addi	r2,r2,23924
   12d9c:	1887883a 	add	r3,r3,r2
   12da0:	e0ffff15 	stw	r3,-4(fp)
   12da4:	00000106 	br	12dac <fstat+0x4c>
   12da8:	e03fff15 	stw	zero,-4(fp)
   12dac:	e0bfff17 	ldw	r2,-4(fp)
   12db0:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   12db4:	e0bffb17 	ldw	r2,-20(fp)
   12db8:	1005003a 	cmpeq	r2,r2,zero
   12dbc:	1000121e 	bne	r2,zero,12e08 <fstat+0xa8>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   12dc0:	e0bffb17 	ldw	r2,-20(fp)
   12dc4:	10800017 	ldw	r2,0(r2)
   12dc8:	10800817 	ldw	r2,32(r2)
   12dcc:	1005003a 	cmpeq	r2,r2,zero
   12dd0:	1000081e 	bne	r2,zero,12df4 <fstat+0x94>
    {
      return fd->dev->fstat(fd, st);
   12dd4:	e0bffb17 	ldw	r2,-20(fp)
   12dd8:	10800017 	ldw	r2,0(r2)
   12ddc:	10800817 	ldw	r2,32(r2)
   12de0:	e13ffb17 	ldw	r4,-20(fp)
   12de4:	e17ffd17 	ldw	r5,-12(fp)
   12de8:	103ee83a 	callr	r2
   12dec:	e0bffe15 	stw	r2,-8(fp)
   12df0:	00000b06 	br	12e20 <fstat+0xc0>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   12df4:	e0fffd17 	ldw	r3,-12(fp)
   12df8:	00880004 	movi	r2,8192
   12dfc:	18800115 	stw	r2,4(r3)
      return 0;
   12e00:	e03ffe15 	stw	zero,-8(fp)
   12e04:	00000606 	br	12e20 <fstat+0xc0>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   12e08:	0012e380 	call	12e38 <alt_get_errno>
   12e0c:	1007883a 	mov	r3,r2
   12e10:	00801444 	movi	r2,81
   12e14:	18800015 	stw	r2,0(r3)
    return -1;
   12e18:	00bfffc4 	movi	r2,-1
   12e1c:	e0bffe15 	stw	r2,-8(fp)
   12e20:	e0bffe17 	ldw	r2,-8(fp)
  }
}
   12e24:	e037883a 	mov	sp,fp
   12e28:	dfc00117 	ldw	ra,4(sp)
   12e2c:	df000017 	ldw	fp,0(sp)
   12e30:	dec00204 	addi	sp,sp,8
   12e34:	f800283a 	ret

00012e38 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   12e38:	defffd04 	addi	sp,sp,-12
   12e3c:	dfc00215 	stw	ra,8(sp)
   12e40:	df000115 	stw	fp,4(sp)
   12e44:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   12e48:	00800074 	movhi	r2,1
   12e4c:	109bde04 	addi	r2,r2,28536
   12e50:	10800017 	ldw	r2,0(r2)
   12e54:	1005003a 	cmpeq	r2,r2,zero
   12e58:	1000061e 	bne	r2,zero,12e74 <alt_get_errno+0x3c>
   12e5c:	00800074 	movhi	r2,1
   12e60:	109bde04 	addi	r2,r2,28536
   12e64:	10800017 	ldw	r2,0(r2)
   12e68:	103ee83a 	callr	r2
   12e6c:	e0bfff15 	stw	r2,-4(fp)
   12e70:	00000306 	br	12e80 <alt_get_errno+0x48>
   12e74:	008000b4 	movhi	r2,2
   12e78:	10a27804 	addi	r2,r2,-30240
   12e7c:	e0bfff15 	stw	r2,-4(fp)
   12e80:	e0bfff17 	ldw	r2,-4(fp)
}
   12e84:	e037883a 	mov	sp,fp
   12e88:	dfc00117 	ldw	ra,4(sp)
   12e8c:	df000017 	ldw	fp,0(sp)
   12e90:	dec00204 	addi	sp,sp,8
   12e94:	f800283a 	ret

00012e98 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   12e98:	deffeb04 	addi	sp,sp,-84
   12e9c:	dfc01415 	stw	ra,80(sp)
   12ea0:	df001315 	stw	fp,76(sp)
   12ea4:	df001304 	addi	fp,sp,76
   12ea8:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   12eac:	e0bffd17 	ldw	r2,-12(fp)
   12eb0:	1004803a 	cmplt	r2,r2,zero
   12eb4:	1000091e 	bne	r2,zero,12edc <isatty+0x44>
   12eb8:	e13ffd17 	ldw	r4,-12(fp)
   12ebc:	01400304 	movi	r5,12
   12ec0:	0012b9c0 	call	12b9c <__mulsi3>
   12ec4:	1007883a 	mov	r3,r2
   12ec8:	00800074 	movhi	r2,1
   12ecc:	10975d04 	addi	r2,r2,23924
   12ed0:	1887883a 	add	r3,r3,r2
   12ed4:	e0ffff15 	stw	r3,-4(fp)
   12ed8:	00000106 	br	12ee0 <isatty+0x48>
   12edc:	e03fff15 	stw	zero,-4(fp)
   12ee0:	e0bfff17 	ldw	r2,-4(fp)
   12ee4:	e0bfed15 	stw	r2,-76(fp)
  
  if (fd)
   12ee8:	e0bfed17 	ldw	r2,-76(fp)
   12eec:	1005003a 	cmpeq	r2,r2,zero
   12ef0:	10000f1e 	bne	r2,zero,12f30 <isatty+0x98>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   12ef4:	e0bfed17 	ldw	r2,-76(fp)
   12ef8:	10800017 	ldw	r2,0(r2)
   12efc:	10800817 	ldw	r2,32(r2)
   12f00:	1004c03a 	cmpne	r2,r2,zero
   12f04:	1000031e 	bne	r2,zero,12f14 <isatty+0x7c>
    {
      return 1;
   12f08:	00800044 	movi	r2,1
   12f0c:	e0bffe15 	stw	r2,-8(fp)
   12f10:	00000c06 	br	12f44 <isatty+0xac>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   12f14:	e17fee04 	addi	r5,fp,-72
   12f18:	e13ffd17 	ldw	r4,-12(fp)
   12f1c:	0012d600 	call	12d60 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   12f20:	e0bfef17 	ldw	r2,-68(fp)
   12f24:	10880020 	cmpeqi	r2,r2,8192
   12f28:	e0bffe15 	stw	r2,-8(fp)
   12f2c:	00000506 	br	12f44 <isatty+0xac>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   12f30:	0012f5c0 	call	12f5c <alt_get_errno>
   12f34:	1007883a 	mov	r3,r2
   12f38:	00801444 	movi	r2,81
   12f3c:	18800015 	stw	r2,0(r3)
    return 0;
   12f40:	e03ffe15 	stw	zero,-8(fp)
   12f44:	e0bffe17 	ldw	r2,-8(fp)
  }
}
   12f48:	e037883a 	mov	sp,fp
   12f4c:	dfc00117 	ldw	ra,4(sp)
   12f50:	df000017 	ldw	fp,0(sp)
   12f54:	dec00204 	addi	sp,sp,8
   12f58:	f800283a 	ret

00012f5c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   12f5c:	defffd04 	addi	sp,sp,-12
   12f60:	dfc00215 	stw	ra,8(sp)
   12f64:	df000115 	stw	fp,4(sp)
   12f68:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   12f6c:	00800074 	movhi	r2,1
   12f70:	109bde04 	addi	r2,r2,28536
   12f74:	10800017 	ldw	r2,0(r2)
   12f78:	1005003a 	cmpeq	r2,r2,zero
   12f7c:	1000061e 	bne	r2,zero,12f98 <alt_get_errno+0x3c>
   12f80:	00800074 	movhi	r2,1
   12f84:	109bde04 	addi	r2,r2,28536
   12f88:	10800017 	ldw	r2,0(r2)
   12f8c:	103ee83a 	callr	r2
   12f90:	e0bfff15 	stw	r2,-4(fp)
   12f94:	00000306 	br	12fa4 <alt_get_errno+0x48>
   12f98:	008000b4 	movhi	r2,2
   12f9c:	10a27804 	addi	r2,r2,-30240
   12fa0:	e0bfff15 	stw	r2,-4(fp)
   12fa4:	e0bfff17 	ldw	r2,-4(fp)
}
   12fa8:	e037883a 	mov	sp,fp
   12fac:	dfc00117 	ldw	ra,4(sp)
   12fb0:	df000017 	ldw	fp,0(sp)
   12fb4:	dec00204 	addi	sp,sp,8
   12fb8:	f800283a 	ret

00012fbc <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   12fbc:	defffe04 	addi	sp,sp,-8
   12fc0:	dfc00115 	stw	ra,4(sp)
   12fc4:	df000015 	stw	fp,0(sp)
   12fc8:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   12fcc:	01000074 	movhi	r4,1
   12fd0:	211be304 	addi	r4,r4,28556
   12fd4:	01400074 	movhi	r5,1
   12fd8:	29555104 	addi	r5,r5,21828
   12fdc:	01800074 	movhi	r6,1
   12fe0:	319be304 	addi	r6,r6,28556
   12fe4:	001303c0 	call	1303c <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   12fe8:	01000074 	movhi	r4,1
   12fec:	21000804 	addi	r4,r4,32
   12ff0:	01400074 	movhi	r5,1
   12ff4:	29400804 	addi	r5,r5,32
   12ff8:	01800074 	movhi	r6,1
   12ffc:	31806d04 	addi	r6,r6,436
   13000:	001303c0 	call	1303c <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   13004:	01000074 	movhi	r4,1
   13008:	21153f04 	addi	r4,r4,21756
   1300c:	01400074 	movhi	r5,1
   13010:	29553f04 	addi	r5,r5,21756
   13014:	01800074 	movhi	r6,1
   13018:	31955104 	addi	r6,r6,21828
   1301c:	001303c0 	call	1303c <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   13020:	00143940 	call	14394 <alt_dcache_flush_all>
  alt_icache_flush_all();
   13024:	001458c0 	call	1458c <alt_icache_flush_all>
}
   13028:	e037883a 	mov	sp,fp
   1302c:	dfc00117 	ldw	ra,4(sp)
   13030:	df000017 	ldw	fp,0(sp)
   13034:	dec00204 	addi	sp,sp,8
   13038:	f800283a 	ret

0001303c <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   1303c:	defffc04 	addi	sp,sp,-16
   13040:	df000315 	stw	fp,12(sp)
   13044:	df000304 	addi	fp,sp,12
   13048:	e13ffd15 	stw	r4,-12(fp)
   1304c:	e17ffe15 	stw	r5,-8(fp)
   13050:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   13054:	e0fffe17 	ldw	r3,-8(fp)
   13058:	e0bffd17 	ldw	r2,-12(fp)
   1305c:	18800e26 	beq	r3,r2,13098 <alt_load_section+0x5c>
  {
    while( to != end )
   13060:	00000a06 	br	1308c <alt_load_section+0x50>
    {
      *to++ = *from++;
   13064:	e0bffd17 	ldw	r2,-12(fp)
   13068:	10c00017 	ldw	r3,0(r2)
   1306c:	e0bffe17 	ldw	r2,-8(fp)
   13070:	10c00015 	stw	r3,0(r2)
   13074:	e0bffe17 	ldw	r2,-8(fp)
   13078:	10800104 	addi	r2,r2,4
   1307c:	e0bffe15 	stw	r2,-8(fp)
   13080:	e0bffd17 	ldw	r2,-12(fp)
   13084:	10800104 	addi	r2,r2,4
   13088:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   1308c:	e0fffe17 	ldw	r3,-8(fp)
   13090:	e0bfff17 	ldw	r2,-4(fp)
   13094:	18bff31e 	bne	r3,r2,13064 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
   13098:	e037883a 	mov	sp,fp
   1309c:	df000017 	ldw	fp,0(sp)
   130a0:	dec00104 	addi	sp,sp,4
   130a4:	f800283a 	ret

000130a8 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   130a8:	defff804 	addi	sp,sp,-32
   130ac:	dfc00715 	stw	ra,28(sp)
   130b0:	df000615 	stw	fp,24(sp)
   130b4:	df000604 	addi	fp,sp,24
   130b8:	e13ffc15 	stw	r4,-16(fp)
   130bc:	e17ffd15 	stw	r5,-12(fp)
   130c0:	e1bffe15 	stw	r6,-8(fp)
  alt_fd* fd;
  off_t   rc = 0; 
   130c4:	e03ffa15 	stw	zero,-24(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   130c8:	e0bffc17 	ldw	r2,-16(fp)
   130cc:	1004803a 	cmplt	r2,r2,zero
   130d0:	1000091e 	bne	r2,zero,130f8 <lseek+0x50>
   130d4:	e13ffc17 	ldw	r4,-16(fp)
   130d8:	01400304 	movi	r5,12
   130dc:	0012b9c0 	call	12b9c <__mulsi3>
   130e0:	1007883a 	mov	r3,r2
   130e4:	00800074 	movhi	r2,1
   130e8:	10975d04 	addi	r2,r2,23924
   130ec:	1887883a 	add	r3,r3,r2
   130f0:	e0ffff15 	stw	r3,-4(fp)
   130f4:	00000106 	br	130fc <lseek+0x54>
   130f8:	e03fff15 	stw	zero,-4(fp)
   130fc:	e0bfff17 	ldw	r2,-4(fp)
   13100:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd) 
   13104:	e0bffb17 	ldw	r2,-20(fp)
   13108:	1005003a 	cmpeq	r2,r2,zero
   1310c:	1000111e 	bne	r2,zero,13154 <lseek+0xac>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   13110:	e0bffb17 	ldw	r2,-20(fp)
   13114:	10800017 	ldw	r2,0(r2)
   13118:	10800717 	ldw	r2,28(r2)
   1311c:	1005003a 	cmpeq	r2,r2,zero
   13120:	1000091e 	bne	r2,zero,13148 <lseek+0xa0>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   13124:	e0bffb17 	ldw	r2,-20(fp)
   13128:	10800017 	ldw	r2,0(r2)
   1312c:	10800717 	ldw	r2,28(r2)
   13130:	e13ffb17 	ldw	r4,-20(fp)
   13134:	e17ffd17 	ldw	r5,-12(fp)
   13138:	e1bffe17 	ldw	r6,-8(fp)
   1313c:	103ee83a 	callr	r2
   13140:	e0bffa15 	stw	r2,-24(fp)
   13144:	00000506 	br	1315c <lseek+0xb4>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   13148:	00bfde84 	movi	r2,-134
   1314c:	e0bffa15 	stw	r2,-24(fp)
   13150:	00000206 	br	1315c <lseek+0xb4>
    }
  }
  else  
  {
    rc = -EBADFD;
   13154:	00bfebc4 	movi	r2,-81
   13158:	e0bffa15 	stw	r2,-24(fp)
  }

  if (rc < 0)
   1315c:	e0bffa17 	ldw	r2,-24(fp)
   13160:	1004403a 	cmpge	r2,r2,zero
   13164:	1000071e 	bne	r2,zero,13184 <lseek+0xdc>
  {
    ALT_ERRNO = -rc;
   13168:	001319c0 	call	1319c <alt_get_errno>
   1316c:	1007883a 	mov	r3,r2
   13170:	e0bffa17 	ldw	r2,-24(fp)
   13174:	0085c83a 	sub	r2,zero,r2
   13178:	18800015 	stw	r2,0(r3)
    rc = -1;
   1317c:	00bfffc4 	movi	r2,-1
   13180:	e0bffa15 	stw	r2,-24(fp)
  }

  return rc;
   13184:	e0bffa17 	ldw	r2,-24(fp)
}
   13188:	e037883a 	mov	sp,fp
   1318c:	dfc00117 	ldw	ra,4(sp)
   13190:	df000017 	ldw	fp,0(sp)
   13194:	dec00204 	addi	sp,sp,8
   13198:	f800283a 	ret

0001319c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   1319c:	defffd04 	addi	sp,sp,-12
   131a0:	dfc00215 	stw	ra,8(sp)
   131a4:	df000115 	stw	fp,4(sp)
   131a8:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   131ac:	00800074 	movhi	r2,1
   131b0:	109bde04 	addi	r2,r2,28536
   131b4:	10800017 	ldw	r2,0(r2)
   131b8:	1005003a 	cmpeq	r2,r2,zero
   131bc:	1000061e 	bne	r2,zero,131d8 <alt_get_errno+0x3c>
   131c0:	00800074 	movhi	r2,1
   131c4:	109bde04 	addi	r2,r2,28536
   131c8:	10800017 	ldw	r2,0(r2)
   131cc:	103ee83a 	callr	r2
   131d0:	e0bfff15 	stw	r2,-4(fp)
   131d4:	00000306 	br	131e4 <alt_get_errno+0x48>
   131d8:	008000b4 	movhi	r2,2
   131dc:	10a27804 	addi	r2,r2,-30240
   131e0:	e0bfff15 	stw	r2,-4(fp)
   131e4:	e0bfff17 	ldw	r2,-4(fp)
}
   131e8:	e037883a 	mov	sp,fp
   131ec:	dfc00117 	ldw	ra,4(sp)
   131f0:	df000017 	ldw	fp,0(sp)
   131f4:	dec00204 	addi	sp,sp,8
   131f8:	f800283a 	ret

000131fc <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   131fc:	defffd04 	addi	sp,sp,-12
   13200:	dfc00215 	stw	ra,8(sp)
   13204:	df000115 	stw	fp,4(sp)
   13208:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   1320c:	0009883a 	mov	r4,zero
   13210:	00136e40 	call	136e4 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   13214:	00137180 	call	13718 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   13218:	01000074 	movhi	r4,1
   1321c:	21154904 	addi	r4,r4,21796
   13220:	01400074 	movhi	r5,1
   13224:	29554904 	addi	r5,r5,21796
   13228:	01800074 	movhi	r6,1
   1322c:	31954904 	addi	r6,r6,21796
   13230:	001494c0 	call	1494c <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   13234:	00144c40 	call	144c4 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   13238:	01000074 	movhi	r4,1
   1323c:	21114a04 	addi	r4,r4,17704
   13240:	00150f00 	call	150f0 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   13244:	d126a417 	ldw	r4,-25968(gp)
   13248:	d166a517 	ldw	r5,-25964(gp)
   1324c:	d1a6a617 	ldw	r6,-25960(gp)
   13250:	00101f00 	call	101f0 <main>
   13254:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   13258:	01000044 	movi	r4,1
   1325c:	0012bd40 	call	12bd4 <close>
  exit (result);
   13260:	e13fff17 	ldw	r4,-4(fp)
   13264:	00151040 	call	15104 <exit>

00013268 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
   13268:	defffe04 	addi	sp,sp,-8
   1326c:	df000115 	stw	fp,4(sp)
   13270:	df000104 	addi	fp,sp,4
   13274:	e13fff15 	stw	r4,-4(fp)
}
   13278:	e037883a 	mov	sp,fp
   1327c:	df000017 	ldw	fp,0(sp)
   13280:	dec00104 	addi	sp,sp,4
   13284:	f800283a 	ret

00013288 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   13288:	defffe04 	addi	sp,sp,-8
   1328c:	df000115 	stw	fp,4(sp)
   13290:	df000104 	addi	fp,sp,4
   13294:	e13fff15 	stw	r4,-4(fp)
}
   13298:	e037883a 	mov	sp,fp
   1329c:	df000017 	ldw	fp,0(sp)
   132a0:	dec00104 	addi	sp,sp,4
   132a4:	f800283a 	ret

000132a8 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   132a8:	defff704 	addi	sp,sp,-36
   132ac:	dfc00815 	stw	ra,32(sp)
   132b0:	df000715 	stw	fp,28(sp)
   132b4:	df000704 	addi	fp,sp,28
   132b8:	e13ffb15 	stw	r4,-20(fp)
   132bc:	e17ffc15 	stw	r5,-16(fp)
   132c0:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   132c4:	e0bffb17 	ldw	r2,-20(fp)
   132c8:	1004803a 	cmplt	r2,r2,zero
   132cc:	1000091e 	bne	r2,zero,132f4 <read+0x4c>
   132d0:	e13ffb17 	ldw	r4,-20(fp)
   132d4:	01400304 	movi	r5,12
   132d8:	0012b9c0 	call	12b9c <__mulsi3>
   132dc:	1007883a 	mov	r3,r2
   132e0:	00800074 	movhi	r2,1
   132e4:	10975d04 	addi	r2,r2,23924
   132e8:	1887883a 	add	r3,r3,r2
   132ec:	e0ffff15 	stw	r3,-4(fp)
   132f0:	00000106 	br	132f8 <read+0x50>
   132f4:	e03fff15 	stw	zero,-4(fp)
   132f8:	e0bfff17 	ldw	r2,-4(fp)
   132fc:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
   13300:	e0bffa17 	ldw	r2,-24(fp)
   13304:	1005003a 	cmpeq	r2,r2,zero
   13308:	1000241e 	bne	r2,zero,1339c <read+0xf4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   1330c:	e0bffa17 	ldw	r2,-24(fp)
   13310:	10800217 	ldw	r2,8(r2)
   13314:	108000cc 	andi	r2,r2,3
   13318:	10800060 	cmpeqi	r2,r2,1
   1331c:	10001a1e 	bne	r2,zero,13388 <read+0xe0>
   13320:	e0bffa17 	ldw	r2,-24(fp)
   13324:	10800017 	ldw	r2,0(r2)
   13328:	10800517 	ldw	r2,20(r2)
   1332c:	1005003a 	cmpeq	r2,r2,zero
   13330:	1000151e 	bne	r2,zero,13388 <read+0xe0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   13334:	e0bffa17 	ldw	r2,-24(fp)
   13338:	10800017 	ldw	r2,0(r2)
   1333c:	10800517 	ldw	r2,20(r2)
   13340:	e17ffc17 	ldw	r5,-16(fp)
   13344:	e1bffd17 	ldw	r6,-12(fp)
   13348:	e13ffa17 	ldw	r4,-24(fp)
   1334c:	103ee83a 	callr	r2
   13350:	e0bff915 	stw	r2,-28(fp)
   13354:	e0bff917 	ldw	r2,-28(fp)
   13358:	1004403a 	cmpge	r2,r2,zero
   1335c:	1000071e 	bne	r2,zero,1337c <read+0xd4>
        {
          ALT_ERRNO = -rval;
   13360:	00133cc0 	call	133cc <alt_get_errno>
   13364:	e0fff917 	ldw	r3,-28(fp)
   13368:	00c7c83a 	sub	r3,zero,r3
   1336c:	10c00015 	stw	r3,0(r2)
          return -1;
   13370:	00bfffc4 	movi	r2,-1
   13374:	e0bffe15 	stw	r2,-8(fp)
   13378:	00000e06 	br	133b4 <read+0x10c>
        }
        return rval;
   1337c:	e0bff917 	ldw	r2,-28(fp)
   13380:	e0bffe15 	stw	r2,-8(fp)
   13384:	00000b06 	br	133b4 <read+0x10c>
      }
      else
      {
        ALT_ERRNO = EACCES;
   13388:	00133cc0 	call	133cc <alt_get_errno>
   1338c:	1007883a 	mov	r3,r2
   13390:	00800344 	movi	r2,13
   13394:	18800015 	stw	r2,0(r3)
   13398:	00000406 	br	133ac <read+0x104>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   1339c:	00133cc0 	call	133cc <alt_get_errno>
   133a0:	1007883a 	mov	r3,r2
   133a4:	00801444 	movi	r2,81
   133a8:	18800015 	stw	r2,0(r3)
  }
  return -1;
   133ac:	00bfffc4 	movi	r2,-1
   133b0:	e0bffe15 	stw	r2,-8(fp)
   133b4:	e0bffe17 	ldw	r2,-8(fp)
}
   133b8:	e037883a 	mov	sp,fp
   133bc:	dfc00117 	ldw	ra,4(sp)
   133c0:	df000017 	ldw	fp,0(sp)
   133c4:	dec00204 	addi	sp,sp,8
   133c8:	f800283a 	ret

000133cc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   133cc:	defffd04 	addi	sp,sp,-12
   133d0:	dfc00215 	stw	ra,8(sp)
   133d4:	df000115 	stw	fp,4(sp)
   133d8:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   133dc:	00800074 	movhi	r2,1
   133e0:	109bde04 	addi	r2,r2,28536
   133e4:	10800017 	ldw	r2,0(r2)
   133e8:	1005003a 	cmpeq	r2,r2,zero
   133ec:	1000061e 	bne	r2,zero,13408 <alt_get_errno+0x3c>
   133f0:	00800074 	movhi	r2,1
   133f4:	109bde04 	addi	r2,r2,28536
   133f8:	10800017 	ldw	r2,0(r2)
   133fc:	103ee83a 	callr	r2
   13400:	e0bfff15 	stw	r2,-4(fp)
   13404:	00000306 	br	13414 <alt_get_errno+0x48>
   13408:	008000b4 	movhi	r2,2
   1340c:	10a27804 	addi	r2,r2,-30240
   13410:	e0bfff15 	stw	r2,-4(fp)
   13414:	e0bfff17 	ldw	r2,-4(fp)
}
   13418:	e037883a 	mov	sp,fp
   1341c:	dfc00117 	ldw	ra,4(sp)
   13420:	df000017 	ldw	fp,0(sp)
   13424:	dec00204 	addi	sp,sp,8
   13428:	f800283a 	ret

0001342c <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   1342c:	defffc04 	addi	sp,sp,-16
   13430:	dfc00315 	stw	ra,12(sp)
   13434:	df000215 	stw	fp,8(sp)
   13438:	dc000115 	stw	r16,4(sp)
   1343c:	df000104 	addi	fp,sp,4
   13440:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
   13444:	e0bfff17 	ldw	r2,-4(fp)
   13448:	108000d0 	cmplti	r2,r2,3
   1344c:	10000f1e 	bne	r2,zero,1348c <alt_release_fd+0x60>
  {
    alt_fd_list[fd].fd_flags = 0;
   13450:	e13fff17 	ldw	r4,-4(fp)
   13454:	04000074 	movhi	r16,1
   13458:	84175d04 	addi	r16,r16,23924
   1345c:	01400304 	movi	r5,12
   13460:	0012b9c0 	call	12b9c <__mulsi3>
   13464:	1405883a 	add	r2,r2,r16
   13468:	10800204 	addi	r2,r2,8
   1346c:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   13470:	e13fff17 	ldw	r4,-4(fp)
   13474:	04000074 	movhi	r16,1
   13478:	84175d04 	addi	r16,r16,23924
   1347c:	01400304 	movi	r5,12
   13480:	0012b9c0 	call	12b9c <__mulsi3>
   13484:	1405883a 	add	r2,r2,r16
   13488:	10000015 	stw	zero,0(r2)
  }
}
   1348c:	e037883a 	mov	sp,fp
   13490:	dfc00217 	ldw	ra,8(sp)
   13494:	df000117 	ldw	fp,4(sp)
   13498:	dc000017 	ldw	r16,0(sp)
   1349c:	dec00304 	addi	sp,sp,12
   134a0:	f800283a 	ret

000134a4 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   134a4:	defff804 	addi	sp,sp,-32
   134a8:	df000715 	stw	fp,28(sp)
   134ac:	df000704 	addi	fp,sp,28
   134b0:	e13ffe15 	stw	r4,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   134b4:	0005303a 	rdctl	r2,status
   134b8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   134bc:	e0fffb17 	ldw	r3,-20(fp)
   134c0:	00bfff84 	movi	r2,-2
   134c4:	1884703a 	and	r2,r3,r2
   134c8:	1001703a 	wrctl	status,r2
  
  return context;
   134cc:	e0bffb17 	ldw	r2,-20(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   134d0:	e0bffd15 	stw	r2,-12(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   134d4:	d0a00a17 	ldw	r2,-32728(gp)
   134d8:	10c000c4 	addi	r3,r2,3
   134dc:	00bfff04 	movi	r2,-4
   134e0:	1884703a 	and	r2,r3,r2
   134e4:	d0a00a15 	stw	r2,-32728(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   134e8:	d0e00a17 	ldw	r3,-32728(gp)
   134ec:	e0bffe17 	ldw	r2,-8(fp)
   134f0:	1887883a 	add	r3,r3,r2
   134f4:	008000b4 	movhi	r2,2
   134f8:	10a80004 	addi	r2,r2,-24576
   134fc:	10c0072e 	bgeu	r2,r3,1351c <sbrk+0x78>
   13500:	e0bffd17 	ldw	r2,-12(fp)
   13504:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13508:	e0bffa17 	ldw	r2,-24(fp)
   1350c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   13510:	00bfffc4 	movi	r2,-1
   13514:	e0bfff15 	stw	r2,-4(fp)
   13518:	00000c06 	br	1354c <sbrk+0xa8>
  }
#endif

  prev_heap_end = heap_end; 
   1351c:	d0a00a17 	ldw	r2,-32728(gp)
   13520:	e0bffc15 	stw	r2,-16(fp)
  heap_end += incr; 
   13524:	d0e00a17 	ldw	r3,-32728(gp)
   13528:	e0bffe17 	ldw	r2,-8(fp)
   1352c:	1885883a 	add	r2,r3,r2
   13530:	d0a00a15 	stw	r2,-32728(gp)
   13534:	e0bffd17 	ldw	r2,-12(fp)
   13538:	e0bff915 	stw	r2,-28(fp)
   1353c:	e0bff917 	ldw	r2,-28(fp)
   13540:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   13544:	e0bffc17 	ldw	r2,-16(fp)
   13548:	e0bfff15 	stw	r2,-4(fp)
   1354c:	e0bfff17 	ldw	r2,-4(fp)
} 
   13550:	e037883a 	mov	sp,fp
   13554:	df000017 	ldw	fp,0(sp)
   13558:	dec00104 	addi	sp,sp,4
   1355c:	f800283a 	ret

00013560 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   13560:	defff704 	addi	sp,sp,-36
   13564:	dfc00815 	stw	ra,32(sp)
   13568:	df000715 	stw	fp,28(sp)
   1356c:	df000704 	addi	fp,sp,28
   13570:	e13ffb15 	stw	r4,-20(fp)
   13574:	e17ffc15 	stw	r5,-16(fp)
   13578:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   1357c:	e0bffb17 	ldw	r2,-20(fp)
   13580:	1004803a 	cmplt	r2,r2,zero
   13584:	1000091e 	bne	r2,zero,135ac <write+0x4c>
   13588:	e13ffb17 	ldw	r4,-20(fp)
   1358c:	01400304 	movi	r5,12
   13590:	0012b9c0 	call	12b9c <__mulsi3>
   13594:	1007883a 	mov	r3,r2
   13598:	00800074 	movhi	r2,1
   1359c:	10975d04 	addi	r2,r2,23924
   135a0:	1887883a 	add	r3,r3,r2
   135a4:	e0ffff15 	stw	r3,-4(fp)
   135a8:	00000106 	br	135b0 <write+0x50>
   135ac:	e03fff15 	stw	zero,-4(fp)
   135b0:	e0bfff17 	ldw	r2,-4(fp)
   135b4:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
   135b8:	e0bffa17 	ldw	r2,-24(fp)
   135bc:	1005003a 	cmpeq	r2,r2,zero
   135c0:	1000241e 	bne	r2,zero,13654 <write+0xf4>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   135c4:	e0bffa17 	ldw	r2,-24(fp)
   135c8:	10800217 	ldw	r2,8(r2)
   135cc:	108000cc 	andi	r2,r2,3
   135d0:	1005003a 	cmpeq	r2,r2,zero
   135d4:	10001a1e 	bne	r2,zero,13640 <write+0xe0>
   135d8:	e0bffa17 	ldw	r2,-24(fp)
   135dc:	10800017 	ldw	r2,0(r2)
   135e0:	10800617 	ldw	r2,24(r2)
   135e4:	1005003a 	cmpeq	r2,r2,zero
   135e8:	1000151e 	bne	r2,zero,13640 <write+0xe0>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   135ec:	e0bffa17 	ldw	r2,-24(fp)
   135f0:	10800017 	ldw	r2,0(r2)
   135f4:	10800617 	ldw	r2,24(r2)
   135f8:	e17ffc17 	ldw	r5,-16(fp)
   135fc:	e1bffd17 	ldw	r6,-12(fp)
   13600:	e13ffa17 	ldw	r4,-24(fp)
   13604:	103ee83a 	callr	r2
   13608:	e0bff915 	stw	r2,-28(fp)
   1360c:	e0bff917 	ldw	r2,-28(fp)
   13610:	1004403a 	cmpge	r2,r2,zero
   13614:	1000071e 	bne	r2,zero,13634 <write+0xd4>
      {
        ALT_ERRNO = -rval;
   13618:	00136840 	call	13684 <alt_get_errno>
   1361c:	e0fff917 	ldw	r3,-28(fp)
   13620:	00c7c83a 	sub	r3,zero,r3
   13624:	10c00015 	stw	r3,0(r2)
        return -1;
   13628:	00bfffc4 	movi	r2,-1
   1362c:	e0bffe15 	stw	r2,-8(fp)
   13630:	00000e06 	br	1366c <write+0x10c>
      }
      return rval;
   13634:	e0bff917 	ldw	r2,-28(fp)
   13638:	e0bffe15 	stw	r2,-8(fp)
   1363c:	00000b06 	br	1366c <write+0x10c>
    }
    else
    {
      ALT_ERRNO = EACCES;
   13640:	00136840 	call	13684 <alt_get_errno>
   13644:	1007883a 	mov	r3,r2
   13648:	00800344 	movi	r2,13
   1364c:	18800015 	stw	r2,0(r3)
   13650:	00000406 	br	13664 <write+0x104>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   13654:	00136840 	call	13684 <alt_get_errno>
   13658:	1007883a 	mov	r3,r2
   1365c:	00801444 	movi	r2,81
   13660:	18800015 	stw	r2,0(r3)
  }
  return -1;
   13664:	00bfffc4 	movi	r2,-1
   13668:	e0bffe15 	stw	r2,-8(fp)
   1366c:	e0bffe17 	ldw	r2,-8(fp)
}
   13670:	e037883a 	mov	sp,fp
   13674:	dfc00117 	ldw	ra,4(sp)
   13678:	df000017 	ldw	fp,0(sp)
   1367c:	dec00204 	addi	sp,sp,8
   13680:	f800283a 	ret

00013684 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   13684:	defffd04 	addi	sp,sp,-12
   13688:	dfc00215 	stw	ra,8(sp)
   1368c:	df000115 	stw	fp,4(sp)
   13690:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   13694:	00800074 	movhi	r2,1
   13698:	109bde04 	addi	r2,r2,28536
   1369c:	10800017 	ldw	r2,0(r2)
   136a0:	1005003a 	cmpeq	r2,r2,zero
   136a4:	1000061e 	bne	r2,zero,136c0 <alt_get_errno+0x3c>
   136a8:	00800074 	movhi	r2,1
   136ac:	109bde04 	addi	r2,r2,28536
   136b0:	10800017 	ldw	r2,0(r2)
   136b4:	103ee83a 	callr	r2
   136b8:	e0bfff15 	stw	r2,-4(fp)
   136bc:	00000306 	br	136cc <alt_get_errno+0x48>
   136c0:	008000b4 	movhi	r2,2
   136c4:	10a27804 	addi	r2,r2,-30240
   136c8:	e0bfff15 	stw	r2,-4(fp)
   136cc:	e0bfff17 	ldw	r2,-4(fp)
}
   136d0:	e037883a 	mov	sp,fp
   136d4:	dfc00117 	ldw	ra,4(sp)
   136d8:	df000017 	ldw	fp,0(sp)
   136dc:	dec00204 	addi	sp,sp,8
   136e0:	f800283a 	ret

000136e4 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   136e4:	defffd04 	addi	sp,sp,-12
   136e8:	dfc00215 	stw	ra,8(sp)
   136ec:	df000115 	stw	fp,4(sp)
   136f0:	df000104 	addi	fp,sp,4
   136f4:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( CPU, cpu);
   136f8:	0014e4c0 	call	14e4c <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   136fc:	00800044 	movi	r2,1
   13700:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   13704:	e037883a 	mov	sp,fp
   13708:	dfc00117 	ldw	ra,4(sp)
   1370c:	df000017 	ldw	fp,0(sp)
   13710:	dec00204 	addi	sp,sp,8
   13714:	f800283a 	ret

00013718 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   13718:	defffe04 	addi	sp,sp,-8
   1371c:	dfc00115 	stw	ra,4(sp)
   13720:	df000015 	stw	fp,0(sp)
   13724:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
   13728:	01000074 	movhi	r4,1
   1372c:	2117c704 	addi	r4,r4,24348
   13730:	000b883a 	mov	r5,zero
   13734:	000d883a 	mov	r6,zero
   13738:	00138dc0 	call	138dc <altera_avalon_jtag_uart_init>
   1373c:	01000074 	movhi	r4,1
   13740:	2117bd04 	addi	r4,r4,24308
   13744:	001375c0 	call	1375c <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
}
   13748:	e037883a 	mov	sp,fp
   1374c:	dfc00117 	ldw	ra,4(sp)
   13750:	df000017 	ldw	fp,0(sp)
   13754:	dec00204 	addi	sp,sp,8
   13758:	f800283a 	ret

0001375c <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   1375c:	defffd04 	addi	sp,sp,-12
   13760:	dfc00215 	stw	ra,8(sp)
   13764:	df000115 	stw	fp,4(sp)
   13768:	df000104 	addi	fp,sp,4
   1376c:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   13770:	e13fff17 	ldw	r4,-4(fp)
   13774:	01400074 	movhi	r5,1
   13778:	295bdb04 	addi	r5,r5,28524
   1377c:	00143b00 	call	143b0 <alt_dev_llist_insert>
}
   13780:	e037883a 	mov	sp,fp
   13784:	dfc00117 	ldw	ra,4(sp)
   13788:	df000017 	ldw	fp,0(sp)
   1378c:	dec00204 	addi	sp,sp,8
   13790:	f800283a 	ret

00013794 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   13794:	defffa04 	addi	sp,sp,-24
   13798:	dfc00515 	stw	ra,20(sp)
   1379c:	df000415 	stw	fp,16(sp)
   137a0:	df000404 	addi	fp,sp,16
   137a4:	e13ffd15 	stw	r4,-12(fp)
   137a8:	e17ffe15 	stw	r5,-8(fp)
   137ac:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   137b0:	e0bffd17 	ldw	r2,-12(fp)
   137b4:	10800017 	ldw	r2,0(r2)
   137b8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   137bc:	e0bffc17 	ldw	r2,-16(fp)
   137c0:	11000a04 	addi	r4,r2,40
   137c4:	e0bffd17 	ldw	r2,-12(fp)
   137c8:	11c00217 	ldw	r7,8(r2)
   137cc:	e17ffe17 	ldw	r5,-8(fp)
   137d0:	e1bfff17 	ldw	r6,-4(fp)
   137d4:	0013ddc0 	call	13ddc <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   137d8:	e037883a 	mov	sp,fp
   137dc:	dfc00117 	ldw	ra,4(sp)
   137e0:	df000017 	ldw	fp,0(sp)
   137e4:	dec00204 	addi	sp,sp,8
   137e8:	f800283a 	ret

000137ec <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   137ec:	defffa04 	addi	sp,sp,-24
   137f0:	dfc00515 	stw	ra,20(sp)
   137f4:	df000415 	stw	fp,16(sp)
   137f8:	df000404 	addi	fp,sp,16
   137fc:	e13ffd15 	stw	r4,-12(fp)
   13800:	e17ffe15 	stw	r5,-8(fp)
   13804:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   13808:	e0bffd17 	ldw	r2,-12(fp)
   1380c:	10800017 	ldw	r2,0(r2)
   13810:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   13814:	e0bffc17 	ldw	r2,-16(fp)
   13818:	11000a04 	addi	r4,r2,40
   1381c:	e0bffd17 	ldw	r2,-12(fp)
   13820:	11c00217 	ldw	r7,8(r2)
   13824:	e17ffe17 	ldw	r5,-8(fp)
   13828:	e1bfff17 	ldw	r6,-4(fp)
   1382c:	00140000 	call	14000 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   13830:	e037883a 	mov	sp,fp
   13834:	dfc00117 	ldw	ra,4(sp)
   13838:	df000017 	ldw	fp,0(sp)
   1383c:	dec00204 	addi	sp,sp,8
   13840:	f800283a 	ret

00013844 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   13844:	defffc04 	addi	sp,sp,-16
   13848:	dfc00315 	stw	ra,12(sp)
   1384c:	df000215 	stw	fp,8(sp)
   13850:	df000204 	addi	fp,sp,8
   13854:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   13858:	e0bfff17 	ldw	r2,-4(fp)
   1385c:	10800017 	ldw	r2,0(r2)
   13860:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   13864:	e0bffe17 	ldw	r2,-8(fp)
   13868:	11000a04 	addi	r4,r2,40
   1386c:	e0bfff17 	ldw	r2,-4(fp)
   13870:	11400217 	ldw	r5,8(r2)
   13874:	0013c740 	call	13c74 <altera_avalon_jtag_uart_close>
}
   13878:	e037883a 	mov	sp,fp
   1387c:	dfc00117 	ldw	ra,4(sp)
   13880:	df000017 	ldw	fp,0(sp)
   13884:	dec00204 	addi	sp,sp,8
   13888:	f800283a 	ret

0001388c <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   1388c:	defffa04 	addi	sp,sp,-24
   13890:	dfc00515 	stw	ra,20(sp)
   13894:	df000415 	stw	fp,16(sp)
   13898:	df000404 	addi	fp,sp,16
   1389c:	e13ffd15 	stw	r4,-12(fp)
   138a0:	e17ffe15 	stw	r5,-8(fp)
   138a4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   138a8:	e0bffd17 	ldw	r2,-12(fp)
   138ac:	10800017 	ldw	r2,0(r2)
   138b0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   138b4:	e0bffc17 	ldw	r2,-16(fp)
   138b8:	11000a04 	addi	r4,r2,40
   138bc:	e17ffe17 	ldw	r5,-8(fp)
   138c0:	e1bfff17 	ldw	r6,-4(fp)
   138c4:	0013ce80 	call	13ce8 <altera_avalon_jtag_uart_ioctl>
}
   138c8:	e037883a 	mov	sp,fp
   138cc:	dfc00117 	ldw	ra,4(sp)
   138d0:	df000017 	ldw	fp,0(sp)
   138d4:	dec00204 	addi	sp,sp,8
   138d8:	f800283a 	ret

000138dc <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   138dc:	defffa04 	addi	sp,sp,-24
   138e0:	dfc00515 	stw	ra,20(sp)
   138e4:	df000415 	stw	fp,16(sp)
   138e8:	df000404 	addi	fp,sp,16
   138ec:	e13ffd15 	stw	r4,-12(fp)
   138f0:	e17ffe15 	stw	r5,-8(fp)
   138f4:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   138f8:	e0fffd17 	ldw	r3,-12(fp)
   138fc:	00800044 	movi	r2,1
   13900:	18800815 	stw	r2,32(r3)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   13904:	e0bffd17 	ldw	r2,-12(fp)
   13908:	10800017 	ldw	r2,0(r2)
   1390c:	11000104 	addi	r4,r2,4
   13910:	e0bffd17 	ldw	r2,-12(fp)
   13914:	10800817 	ldw	r2,32(r2)
   13918:	1007883a 	mov	r3,r2
   1391c:	2005883a 	mov	r2,r4
   13920:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   13924:	e13ffe17 	ldw	r4,-8(fp)
   13928:	e17fff17 	ldw	r5,-4(fp)
   1392c:	d8000015 	stw	zero,0(sp)
   13930:	01800074 	movhi	r6,1
   13934:	318e6704 	addi	r6,r6,14748
   13938:	e1fffd17 	ldw	r7,-12(fp)
   1393c:	00145a80 	call	145a8 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   13940:	e0bffd17 	ldw	r2,-12(fp)
   13944:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   13948:	e0bffd17 	ldw	r2,-12(fp)
   1394c:	11000204 	addi	r4,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   13950:	008000b4 	movhi	r2,2
   13954:	10a27d04 	addi	r2,r2,-30220
   13958:	10800017 	ldw	r2,0(r2)
   1395c:	100b883a 	mov	r5,r2
   13960:	01800074 	movhi	r6,1
   13964:	318ef104 	addi	r6,r6,15300
   13968:	e1fffd17 	ldw	r7,-12(fp)
   1396c:	00142400 	call	14240 <alt_alarm_start>
   13970:	1004403a 	cmpge	r2,r2,zero
   13974:	1000041e 	bne	r2,zero,13988 <altera_avalon_jtag_uart_init+0xac>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   13978:	e0fffd17 	ldw	r3,-12(fp)
   1397c:	00a00034 	movhi	r2,32768
   13980:	10bfffc4 	addi	r2,r2,-1
   13984:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   13988:	e037883a 	mov	sp,fp
   1398c:	dfc00117 	ldw	ra,4(sp)
   13990:	df000017 	ldw	fp,0(sp)
   13994:	dec00204 	addi	sp,sp,8
   13998:	f800283a 	ret

0001399c <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   1399c:	defff804 	addi	sp,sp,-32
   139a0:	df000715 	stw	fp,28(sp)
   139a4:	df000704 	addi	fp,sp,28
   139a8:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   139ac:	e0bfff17 	ldw	r2,-4(fp)
   139b0:	e0bffe15 	stw	r2,-8(fp)
  unsigned int base = sp->base;
   139b4:	e0bffe17 	ldw	r2,-8(fp)
   139b8:	10800017 	ldw	r2,0(r2)
   139bc:	e0bffd15 	stw	r2,-12(fp)
   139c0:	00000006 	br	139c4 <altera_avalon_jtag_uart_irq+0x28>
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   139c4:	e0bffd17 	ldw	r2,-12(fp)
   139c8:	10800104 	addi	r2,r2,4
   139cc:	10800037 	ldwio	r2,0(r2)
   139d0:	e0bffc15 	stw	r2,-16(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   139d4:	e0bffc17 	ldw	r2,-16(fp)
   139d8:	1080c00c 	andi	r2,r2,768
   139dc:	1005003a 	cmpeq	r2,r2,zero
   139e0:	1000741e 	bne	r2,zero,13bb4 <altera_avalon_jtag_uart_irq+0x218>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   139e4:	e0bffc17 	ldw	r2,-16(fp)
   139e8:	1080400c 	andi	r2,r2,256
   139ec:	1005003a 	cmpeq	r2,r2,zero
   139f0:	1000351e 	bne	r2,zero,13ac8 <altera_avalon_jtag_uart_irq+0x12c>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   139f4:	00800074 	movhi	r2,1
   139f8:	e0bffb15 	stw	r2,-20(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   139fc:	e0bffe17 	ldw	r2,-8(fp)
   13a00:	10800a17 	ldw	r2,40(r2)
   13a04:	10800044 	addi	r2,r2,1
   13a08:	1081ffcc 	andi	r2,r2,2047
   13a0c:	e0bffa15 	stw	r2,-24(fp)
        if (next == sp->rx_out)
   13a10:	e0bffe17 	ldw	r2,-8(fp)
   13a14:	10c00b17 	ldw	r3,44(r2)
   13a18:	e0bffa17 	ldw	r2,-24(fp)
   13a1c:	18801626 	beq	r3,r2,13a78 <altera_avalon_jtag_uart_irq+0xdc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   13a20:	e0bffd17 	ldw	r2,-12(fp)
   13a24:	10800037 	ldwio	r2,0(r2)
   13a28:	e0bffb15 	stw	r2,-20(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   13a2c:	e0bffb17 	ldw	r2,-20(fp)
   13a30:	10a0000c 	andi	r2,r2,32768
   13a34:	1005003a 	cmpeq	r2,r2,zero
   13a38:	10000f1e 	bne	r2,zero,13a78 <altera_avalon_jtag_uart_irq+0xdc>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   13a3c:	e0bffe17 	ldw	r2,-8(fp)
   13a40:	10c00a17 	ldw	r3,40(r2)
   13a44:	e0bffb17 	ldw	r2,-20(fp)
   13a48:	1009883a 	mov	r4,r2
   13a4c:	e0bffe17 	ldw	r2,-8(fp)
   13a50:	1885883a 	add	r2,r3,r2
   13a54:	10800e04 	addi	r2,r2,56
   13a58:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   13a5c:	e0bffe17 	ldw	r2,-8(fp)
   13a60:	10800a17 	ldw	r2,40(r2)
   13a64:	10800044 	addi	r2,r2,1
   13a68:	10c1ffcc 	andi	r3,r2,2047
   13a6c:	e0bffe17 	ldw	r2,-8(fp)
   13a70:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
   13a74:	003fe106 	br	139fc <altera_avalon_jtag_uart_irq+0x60>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   13a78:	e0bffb17 	ldw	r2,-20(fp)
   13a7c:	10bfffec 	andhi	r2,r2,65535
   13a80:	1005003a 	cmpeq	r2,r2,zero
   13a84:	1000101e 	bne	r2,zero,13ac8 <altera_avalon_jtag_uart_irq+0x12c>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   13a88:	e0bffe17 	ldw	r2,-8(fp)
   13a8c:	10c00817 	ldw	r3,32(r2)
   13a90:	00bfff84 	movi	r2,-2
   13a94:	1886703a 	and	r3,r3,r2
   13a98:	e0bffe17 	ldw	r2,-8(fp)
   13a9c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   13aa0:	e0bffd17 	ldw	r2,-12(fp)
   13aa4:	11000104 	addi	r4,r2,4
   13aa8:	e0bffe17 	ldw	r2,-8(fp)
   13aac:	10800817 	ldw	r2,32(r2)
   13ab0:	1007883a 	mov	r3,r2
   13ab4:	2005883a 	mov	r2,r4
   13ab8:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   13abc:	e0bffd17 	ldw	r2,-12(fp)
   13ac0:	10800104 	addi	r2,r2,4
   13ac4:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   13ac8:	e0bffc17 	ldw	r2,-16(fp)
   13acc:	1080800c 	andi	r2,r2,512
   13ad0:	1005003a 	cmpeq	r2,r2,zero
   13ad4:	103fbb1e 	bne	r2,zero,139c4 <altera_avalon_jtag_uart_irq+0x28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   13ad8:	e0bffc17 	ldw	r2,-16(fp)
   13adc:	10bfffec 	andhi	r2,r2,65535
   13ae0:	1004d43a 	srli	r2,r2,16
   13ae4:	e0bff915 	stw	r2,-28(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   13ae8:	00001506 	br	13b40 <altera_avalon_jtag_uart_irq+0x1a4>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   13aec:	e13ffd17 	ldw	r4,-12(fp)
   13af0:	e0bffe17 	ldw	r2,-8(fp)
   13af4:	10c00d17 	ldw	r3,52(r2)
   13af8:	e0bffe17 	ldw	r2,-8(fp)
   13afc:	1885883a 	add	r2,r3,r2
   13b00:	10820e04 	addi	r2,r2,2104
   13b04:	10800003 	ldbu	r2,0(r2)
   13b08:	10c03fcc 	andi	r3,r2,255
   13b0c:	18c0201c 	xori	r3,r3,128
   13b10:	18ffe004 	addi	r3,r3,-128
   13b14:	2005883a 	mov	r2,r4
   13b18:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   13b1c:	e0bffe17 	ldw	r2,-8(fp)
   13b20:	10800d17 	ldw	r2,52(r2)
   13b24:	10800044 	addi	r2,r2,1
   13b28:	10c1ffcc 	andi	r3,r2,2047
   13b2c:	e0bffe17 	ldw	r2,-8(fp)
   13b30:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   13b34:	e0bff917 	ldw	r2,-28(fp)
   13b38:	10bfffc4 	addi	r2,r2,-1
   13b3c:	e0bff915 	stw	r2,-28(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   13b40:	e0bff917 	ldw	r2,-28(fp)
   13b44:	1005003a 	cmpeq	r2,r2,zero
   13b48:	1000051e 	bne	r2,zero,13b60 <altera_avalon_jtag_uart_irq+0x1c4>
   13b4c:	e0bffe17 	ldw	r2,-8(fp)
   13b50:	10c00d17 	ldw	r3,52(r2)
   13b54:	e0bffe17 	ldw	r2,-8(fp)
   13b58:	10800c17 	ldw	r2,48(r2)
   13b5c:	18bfe31e 	bne	r3,r2,13aec <altera_avalon_jtag_uart_irq+0x150>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   13b60:	e0bff917 	ldw	r2,-28(fp)
   13b64:	1005003a 	cmpeq	r2,r2,zero
   13b68:	103f961e 	bne	r2,zero,139c4 <altera_avalon_jtag_uart_irq+0x28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   13b6c:	e0bffe17 	ldw	r2,-8(fp)
   13b70:	10c00817 	ldw	r3,32(r2)
   13b74:	00bfff44 	movi	r2,-3
   13b78:	1886703a 	and	r3,r3,r2
   13b7c:	e0bffe17 	ldw	r2,-8(fp)
   13b80:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   13b84:	e0bffe17 	ldw	r2,-8(fp)
   13b88:	10800017 	ldw	r2,0(r2)
   13b8c:	11000104 	addi	r4,r2,4
   13b90:	e0bffe17 	ldw	r2,-8(fp)
   13b94:	10800817 	ldw	r2,32(r2)
   13b98:	1007883a 	mov	r3,r2
   13b9c:	2005883a 	mov	r2,r4
   13ba0:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   13ba4:	e0bffd17 	ldw	r2,-12(fp)
   13ba8:	10800104 	addi	r2,r2,4
   13bac:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   13bb0:	003f8406 	br	139c4 <altera_avalon_jtag_uart_irq+0x28>
}
   13bb4:	e037883a 	mov	sp,fp
   13bb8:	df000017 	ldw	fp,0(sp)
   13bbc:	dec00104 	addi	sp,sp,4
   13bc0:	f800283a 	ret

00013bc4 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   13bc4:	defffc04 	addi	sp,sp,-16
   13bc8:	df000315 	stw	fp,12(sp)
   13bcc:	df000304 	addi	fp,sp,12
   13bd0:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   13bd4:	e0bfff17 	ldw	r2,-4(fp)
   13bd8:	e0bffe15 	stw	r2,-8(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   13bdc:	e0bffe17 	ldw	r2,-8(fp)
   13be0:	10800017 	ldw	r2,0(r2)
   13be4:	10800104 	addi	r2,r2,4
   13be8:	10800037 	ldwio	r2,0(r2)
   13bec:	e0bffd15 	stw	r2,-12(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   13bf0:	e0bffd17 	ldw	r2,-12(fp)
   13bf4:	1081000c 	andi	r2,r2,1024
   13bf8:	1005003a 	cmpeq	r2,r2,zero
   13bfc:	10000c1e 	bne	r2,zero,13c30 <altera_avalon_jtag_uart_timeout+0x6c>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   13c00:	e0bffe17 	ldw	r2,-8(fp)
   13c04:	10800017 	ldw	r2,0(r2)
   13c08:	11000104 	addi	r4,r2,4
   13c0c:	e0bffe17 	ldw	r2,-8(fp)
   13c10:	10800817 	ldw	r2,32(r2)
   13c14:	10810014 	ori	r2,r2,1024
   13c18:	1007883a 	mov	r3,r2
   13c1c:	2005883a 	mov	r2,r4
   13c20:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
   13c24:	e0bffe17 	ldw	r2,-8(fp)
   13c28:	10000915 	stw	zero,36(r2)
   13c2c:	00000a06 	br	13c58 <altera_avalon_jtag_uart_timeout+0x94>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   13c30:	e0bffe17 	ldw	r2,-8(fp)
   13c34:	10c00917 	ldw	r3,36(r2)
   13c38:	00a00034 	movhi	r2,32768
   13c3c:	10bfff04 	addi	r2,r2,-4
   13c40:	10c00536 	bltu	r2,r3,13c58 <altera_avalon_jtag_uart_timeout+0x94>
    sp->host_inactive++;
   13c44:	e0bffe17 	ldw	r2,-8(fp)
   13c48:	10800917 	ldw	r2,36(r2)
   13c4c:	10c00044 	addi	r3,r2,1
   13c50:	e0bffe17 	ldw	r2,-8(fp)
   13c54:	10c00915 	stw	r3,36(r2)
   13c58:	008000b4 	movhi	r2,2
   13c5c:	10a27d04 	addi	r2,r2,-30220
   13c60:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   13c64:	e037883a 	mov	sp,fp
   13c68:	df000017 	ldw	fp,0(sp)
   13c6c:	dec00104 	addi	sp,sp,4
   13c70:	f800283a 	ret

00013c74 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   13c74:	defffc04 	addi	sp,sp,-16
   13c78:	df000315 	stw	fp,12(sp)
   13c7c:	df000304 	addi	fp,sp,12
   13c80:	e13ffd15 	stw	r4,-12(fp)
   13c84:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   13c88:	00000706 	br	13ca8 <altera_avalon_jtag_uart_close+0x34>
    if (flags & O_NONBLOCK) {
   13c8c:	e0bffe17 	ldw	r2,-8(fp)
   13c90:	1090000c 	andi	r2,r2,16384
   13c94:	1005003a 	cmpeq	r2,r2,zero
   13c98:	1000031e 	bne	r2,zero,13ca8 <altera_avalon_jtag_uart_close+0x34>
      return -EWOULDBLOCK; 
   13c9c:	00bffd44 	movi	r2,-11
   13ca0:	e0bfff15 	stw	r2,-4(fp)
   13ca4:	00000b06 	br	13cd4 <altera_avalon_jtag_uart_close+0x60>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   13ca8:	e0bffd17 	ldw	r2,-12(fp)
   13cac:	10c00d17 	ldw	r3,52(r2)
   13cb0:	e0bffd17 	ldw	r2,-12(fp)
   13cb4:	10800c17 	ldw	r2,48(r2)
   13cb8:	18800526 	beq	r3,r2,13cd0 <altera_avalon_jtag_uart_close+0x5c>
   13cbc:	e0bffd17 	ldw	r2,-12(fp)
   13cc0:	10c00917 	ldw	r3,36(r2)
   13cc4:	e0bffd17 	ldw	r2,-12(fp)
   13cc8:	10800117 	ldw	r2,4(r2)
   13ccc:	18bfef36 	bltu	r3,r2,13c8c <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   13cd0:	e03fff15 	stw	zero,-4(fp)
   13cd4:	e0bfff17 	ldw	r2,-4(fp)
}
   13cd8:	e037883a 	mov	sp,fp
   13cdc:	df000017 	ldw	fp,0(sp)
   13ce0:	dec00104 	addi	sp,sp,4
   13ce4:	f800283a 	ret

00013ce8 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   13ce8:	defff804 	addi	sp,sp,-32
   13cec:	df000715 	stw	fp,28(sp)
   13cf0:	df000704 	addi	fp,sp,28
   13cf4:	e13ffb15 	stw	r4,-20(fp)
   13cf8:	e17ffc15 	stw	r5,-16(fp)
   13cfc:	e1bffd15 	stw	r6,-12(fp)
  int rc = -ENOTTY;
   13d00:	00bff9c4 	movi	r2,-25
   13d04:	e0bffa15 	stw	r2,-24(fp)

  switch (req)
   13d08:	e0bffc17 	ldw	r2,-16(fp)
   13d0c:	e0bfff15 	stw	r2,-4(fp)
   13d10:	e0ffff17 	ldw	r3,-4(fp)
   13d14:	189a8060 	cmpeqi	r2,r3,27137
   13d18:	1000041e 	bne	r2,zero,13d2c <altera_avalon_jtag_uart_ioctl+0x44>
   13d1c:	e0ffff17 	ldw	r3,-4(fp)
   13d20:	189a80a0 	cmpeqi	r2,r3,27138
   13d24:	10001b1e 	bne	r2,zero,13d94 <altera_avalon_jtag_uart_ioctl+0xac>
   13d28:	00002706 	br	13dc8 <altera_avalon_jtag_uart_ioctl+0xe0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   13d2c:	e0bffb17 	ldw	r2,-20(fp)
   13d30:	10c00117 	ldw	r3,4(r2)
   13d34:	00a00034 	movhi	r2,32768
   13d38:	10bfffc4 	addi	r2,r2,-1
   13d3c:	18802226 	beq	r3,r2,13dc8 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
   13d40:	e0bffd17 	ldw	r2,-12(fp)
   13d44:	10800017 	ldw	r2,0(r2)
   13d48:	e0bff915 	stw	r2,-28(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   13d4c:	e0bff917 	ldw	r2,-28(fp)
   13d50:	10800090 	cmplti	r2,r2,2
   13d54:	1000071e 	bne	r2,zero,13d74 <altera_avalon_jtag_uart_ioctl+0x8c>
   13d58:	e0fff917 	ldw	r3,-28(fp)
   13d5c:	00a00034 	movhi	r2,32768
   13d60:	10bfffc4 	addi	r2,r2,-1
   13d64:	18800326 	beq	r3,r2,13d74 <altera_avalon_jtag_uart_ioctl+0x8c>
   13d68:	e0bff917 	ldw	r2,-28(fp)
   13d6c:	e0bffe15 	stw	r2,-8(fp)
   13d70:	00000306 	br	13d80 <altera_avalon_jtag_uart_ioctl+0x98>
   13d74:	00e00034 	movhi	r3,32768
   13d78:	18ffff84 	addi	r3,r3,-2
   13d7c:	e0fffe15 	stw	r3,-8(fp)
   13d80:	e0bffb17 	ldw	r2,-20(fp)
   13d84:	e0fffe17 	ldw	r3,-8(fp)
   13d88:	10c00115 	stw	r3,4(r2)
      rc = 0;
   13d8c:	e03ffa15 	stw	zero,-24(fp)
    }
    break;
   13d90:	00000d06 	br	13dc8 <altera_avalon_jtag_uart_ioctl+0xe0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   13d94:	e0bffb17 	ldw	r2,-20(fp)
   13d98:	10c00117 	ldw	r3,4(r2)
   13d9c:	00a00034 	movhi	r2,32768
   13da0:	10bfffc4 	addi	r2,r2,-1
   13da4:	18800826 	beq	r3,r2,13dc8 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   13da8:	e13ffd17 	ldw	r4,-12(fp)
   13dac:	e0bffb17 	ldw	r2,-20(fp)
   13db0:	10c00917 	ldw	r3,36(r2)
   13db4:	e0bffb17 	ldw	r2,-20(fp)
   13db8:	10800117 	ldw	r2,4(r2)
   13dbc:	1885803a 	cmpltu	r2,r3,r2
   13dc0:	20800015 	stw	r2,0(r4)
      rc = 0;
   13dc4:	e03ffa15 	stw	zero,-24(fp)

  default:
    break;
  }

  return rc;
   13dc8:	e0bffa17 	ldw	r2,-24(fp)
}
   13dcc:	e037883a 	mov	sp,fp
   13dd0:	df000017 	ldw	fp,0(sp)
   13dd4:	dec00104 	addi	sp,sp,4
   13dd8:	f800283a 	ret

00013ddc <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   13ddc:	defff204 	addi	sp,sp,-56
   13de0:	dfc00d15 	stw	ra,52(sp)
   13de4:	df000c15 	stw	fp,48(sp)
   13de8:	df000c04 	addi	fp,sp,48
   13dec:	e13ffb15 	stw	r4,-20(fp)
   13df0:	e17ffc15 	stw	r5,-16(fp)
   13df4:	e1bffd15 	stw	r6,-12(fp)
   13df8:	e1fffe15 	stw	r7,-8(fp)
  char * ptr = buffer;
   13dfc:	e0bffc17 	ldw	r2,-16(fp)
   13e00:	e0bffa15 	stw	r2,-24(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   13e04:	00004806 	br	13f28 <altera_avalon_jtag_uart_read+0x14c>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   13e08:	e0bffb17 	ldw	r2,-20(fp)
   13e0c:	10800a17 	ldw	r2,40(r2)
   13e10:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
   13e14:	e0bffb17 	ldw	r2,-20(fp)
   13e18:	10800b17 	ldw	r2,44(r2)
   13e1c:	e0bff615 	stw	r2,-40(fp)

      if (in >= out)
   13e20:	e0fff717 	ldw	r3,-36(fp)
   13e24:	e0bff617 	ldw	r2,-40(fp)
   13e28:	18800536 	bltu	r3,r2,13e40 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   13e2c:	e0bff717 	ldw	r2,-36(fp)
   13e30:	e0fff617 	ldw	r3,-40(fp)
   13e34:	10c5c83a 	sub	r2,r2,r3
   13e38:	e0bff815 	stw	r2,-32(fp)
   13e3c:	00000406 	br	13e50 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   13e40:	00820004 	movi	r2,2048
   13e44:	e0fff617 	ldw	r3,-40(fp)
   13e48:	10c5c83a 	sub	r2,r2,r3
   13e4c:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
   13e50:	e0bff817 	ldw	r2,-32(fp)
   13e54:	1005003a 	cmpeq	r2,r2,zero
   13e58:	10001f1e 	bne	r2,zero,13ed8 <altera_avalon_jtag_uart_read+0xfc>
        break; /* No more data available */

      if (n > space)
   13e5c:	e0fffd17 	ldw	r3,-12(fp)
   13e60:	e0bff817 	ldw	r2,-32(fp)
   13e64:	1880022e 	bgeu	r3,r2,13e70 <altera_avalon_jtag_uart_read+0x94>
        n = space;
   13e68:	e0bffd17 	ldw	r2,-12(fp)
   13e6c:	e0bff815 	stw	r2,-32(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   13e70:	e0bffb17 	ldw	r2,-20(fp)
   13e74:	10c00e04 	addi	r3,r2,56
   13e78:	e0bff617 	ldw	r2,-40(fp)
   13e7c:	1887883a 	add	r3,r3,r2
   13e80:	e0bffa17 	ldw	r2,-24(fp)
   13e84:	1009883a 	mov	r4,r2
   13e88:	180b883a 	mov	r5,r3
   13e8c:	e1bff817 	ldw	r6,-32(fp)
   13e90:	00110400 	call	11040 <memcpy>
      ptr   += n;
   13e94:	e0fff817 	ldw	r3,-32(fp)
   13e98:	e0bffa17 	ldw	r2,-24(fp)
   13e9c:	10c5883a 	add	r2,r2,r3
   13ea0:	e0bffa15 	stw	r2,-24(fp)
      space -= n;
   13ea4:	e0fffd17 	ldw	r3,-12(fp)
   13ea8:	e0bff817 	ldw	r2,-32(fp)
   13eac:	1885c83a 	sub	r2,r3,r2
   13eb0:	e0bffd15 	stw	r2,-12(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   13eb4:	e0fff617 	ldw	r3,-40(fp)
   13eb8:	e0bff817 	ldw	r2,-32(fp)
   13ebc:	1885883a 	add	r2,r3,r2
   13ec0:	10c1ffcc 	andi	r3,r2,2047
   13ec4:	e0bffb17 	ldw	r2,-20(fp)
   13ec8:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   13ecc:	e0bffd17 	ldw	r2,-12(fp)
   13ed0:	10800048 	cmpgei	r2,r2,1
   13ed4:	103fcc1e 	bne	r2,zero,13e08 <altera_avalon_jtag_uart_read+0x2c>

    /* If we read any data then return it */
    if (ptr != buffer)
   13ed8:	e0fffa17 	ldw	r3,-24(fp)
   13edc:	e0bffc17 	ldw	r2,-16(fp)
   13ee0:	1880141e 	bne	r3,r2,13f34 <altera_avalon_jtag_uart_read+0x158>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   13ee4:	e0bffe17 	ldw	r2,-8(fp)
   13ee8:	1090000c 	andi	r2,r2,16384
   13eec:	1004c03a 	cmpne	r2,r2,zero
   13ef0:	1000101e 	bne	r2,zero,13f34 <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   13ef4:	e0bffb17 	ldw	r2,-20(fp)
   13ef8:	10c00a17 	ldw	r3,40(r2)
   13efc:	e0bff717 	ldw	r2,-36(fp)
   13f00:	1880051e 	bne	r3,r2,13f18 <altera_avalon_jtag_uart_read+0x13c>
   13f04:	e0bffb17 	ldw	r2,-20(fp)
   13f08:	10c00917 	ldw	r3,36(r2)
   13f0c:	e0bffb17 	ldw	r2,-20(fp)
   13f10:	10800117 	ldw	r2,4(r2)
   13f14:	18bff736 	bltu	r3,r2,13ef4 <altera_avalon_jtag_uart_read+0x118>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   13f18:	e0bffb17 	ldw	r2,-20(fp)
   13f1c:	10c00a17 	ldw	r3,40(r2)
   13f20:	e0bff717 	ldw	r2,-36(fp)
   13f24:	18800326 	beq	r3,r2,13f34 <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   13f28:	e0bffd17 	ldw	r2,-12(fp)
   13f2c:	10800048 	cmpgei	r2,r2,1
   13f30:	103fb51e 	bne	r2,zero,13e08 <altera_avalon_jtag_uart_read+0x2c>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   13f34:	e0fffa17 	ldw	r3,-24(fp)
   13f38:	e0bffc17 	ldw	r2,-16(fp)
   13f3c:	18801926 	beq	r3,r2,13fa4 <altera_avalon_jtag_uart_read+0x1c8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13f40:	0005303a 	rdctl	r2,status
   13f44:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13f48:	e0fff517 	ldw	r3,-44(fp)
   13f4c:	00bfff84 	movi	r2,-2
   13f50:	1884703a 	and	r2,r3,r2
   13f54:	1001703a 	wrctl	status,r2
  
  return context;
   13f58:	e0bff517 	ldw	r2,-44(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   13f5c:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   13f60:	e0bffb17 	ldw	r2,-20(fp)
   13f64:	10800817 	ldw	r2,32(r2)
   13f68:	10c00054 	ori	r3,r2,1
   13f6c:	e0bffb17 	ldw	r2,-20(fp)
   13f70:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   13f74:	e0bffb17 	ldw	r2,-20(fp)
   13f78:	10800017 	ldw	r2,0(r2)
   13f7c:	11000104 	addi	r4,r2,4
   13f80:	e0bffb17 	ldw	r2,-20(fp)
   13f84:	10800817 	ldw	r2,32(r2)
   13f88:	1007883a 	mov	r3,r2
   13f8c:	2005883a 	mov	r2,r4
   13f90:	10c00035 	stwio	r3,0(r2)
   13f94:	e0bff917 	ldw	r2,-28(fp)
   13f98:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13f9c:	e0bff417 	ldw	r2,-48(fp)
   13fa0:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   13fa4:	e0fffa17 	ldw	r3,-24(fp)
   13fa8:	e0bffc17 	ldw	r2,-16(fp)
   13fac:	18800526 	beq	r3,r2,13fc4 <altera_avalon_jtag_uart_read+0x1e8>
    return ptr - buffer;
   13fb0:	e0fffa17 	ldw	r3,-24(fp)
   13fb4:	e0bffc17 	ldw	r2,-16(fp)
   13fb8:	1887c83a 	sub	r3,r3,r2
   13fbc:	e0ffff15 	stw	r3,-4(fp)
   13fc0:	00000906 	br	13fe8 <altera_avalon_jtag_uart_read+0x20c>
  else if (flags & O_NONBLOCK)
   13fc4:	e0bffe17 	ldw	r2,-8(fp)
   13fc8:	1090000c 	andi	r2,r2,16384
   13fcc:	1005003a 	cmpeq	r2,r2,zero
   13fd0:	1000031e 	bne	r2,zero,13fe0 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
   13fd4:	00bffd44 	movi	r2,-11
   13fd8:	e0bfff15 	stw	r2,-4(fp)
   13fdc:	00000206 	br	13fe8 <altera_avalon_jtag_uart_read+0x20c>
  else
    return -EIO;
   13fe0:	00bffec4 	movi	r2,-5
   13fe4:	e0bfff15 	stw	r2,-4(fp)
   13fe8:	e0bfff17 	ldw	r2,-4(fp)
}
   13fec:	e037883a 	mov	sp,fp
   13ff0:	dfc00117 	ldw	ra,4(sp)
   13ff4:	df000017 	ldw	fp,0(sp)
   13ff8:	dec00204 	addi	sp,sp,8
   13ffc:	f800283a 	ret

00014000 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   14000:	defff204 	addi	sp,sp,-56
   14004:	dfc00d15 	stw	ra,52(sp)
   14008:	df000c15 	stw	fp,48(sp)
   1400c:	df000c04 	addi	fp,sp,48
   14010:	e13ffb15 	stw	r4,-20(fp)
   14014:	e17ffc15 	stw	r5,-16(fp)
   14018:	e1bffd15 	stw	r6,-12(fp)
   1401c:	e1fffe15 	stw	r7,-8(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   14020:	e03ff915 	stw	zero,-28(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   14024:	e0bffc17 	ldw	r2,-16(fp)
   14028:	e0bff615 	stw	r2,-40(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   1402c:	00003a06 	br	14118 <altera_avalon_jtag_uart_write+0x118>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   14030:	e0bffb17 	ldw	r2,-20(fp)
   14034:	10800c17 	ldw	r2,48(r2)
   14038:	e0bffa15 	stw	r2,-24(fp)
      out = sp->tx_out;
   1403c:	e0bffb17 	ldw	r2,-20(fp)
   14040:	10800d17 	ldw	r2,52(r2)
   14044:	e0bff915 	stw	r2,-28(fp)

      if (in < out)
   14048:	e0fffa17 	ldw	r3,-24(fp)
   1404c:	e0bff917 	ldw	r2,-28(fp)
   14050:	1880062e 	bgeu	r3,r2,1406c <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   14054:	e0fff917 	ldw	r3,-28(fp)
   14058:	e0bffa17 	ldw	r2,-24(fp)
   1405c:	1885c83a 	sub	r2,r3,r2
   14060:	10bfffc4 	addi	r2,r2,-1
   14064:	e0bff815 	stw	r2,-32(fp)
   14068:	00000c06 	br	1409c <altera_avalon_jtag_uart_write+0x9c>
      else if (out > 0)
   1406c:	e0bff917 	ldw	r2,-28(fp)
   14070:	1005003a 	cmpeq	r2,r2,zero
   14074:	1000051e 	bne	r2,zero,1408c <altera_avalon_jtag_uart_write+0x8c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   14078:	00820004 	movi	r2,2048
   1407c:	e0fffa17 	ldw	r3,-24(fp)
   14080:	10c5c83a 	sub	r2,r2,r3
   14084:	e0bff815 	stw	r2,-32(fp)
   14088:	00000406 	br	1409c <altera_avalon_jtag_uart_write+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   1408c:	0081ffc4 	movi	r2,2047
   14090:	e0fffa17 	ldw	r3,-24(fp)
   14094:	10c5c83a 	sub	r2,r2,r3
   14098:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
   1409c:	e0bff817 	ldw	r2,-32(fp)
   140a0:	1005003a 	cmpeq	r2,r2,zero
   140a4:	10001f1e 	bne	r2,zero,14124 <altera_avalon_jtag_uart_write+0x124>
        break;

      if (n > count)
   140a8:	e0fffd17 	ldw	r3,-12(fp)
   140ac:	e0bff817 	ldw	r2,-32(fp)
   140b0:	1880022e 	bgeu	r3,r2,140bc <altera_avalon_jtag_uart_write+0xbc>
        n = count;
   140b4:	e0bffd17 	ldw	r2,-12(fp)
   140b8:	e0bff815 	stw	r2,-32(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   140bc:	e0bffb17 	ldw	r2,-20(fp)
   140c0:	10c20e04 	addi	r3,r2,2104
   140c4:	e0bffa17 	ldw	r2,-24(fp)
   140c8:	1885883a 	add	r2,r3,r2
   140cc:	e0fffc17 	ldw	r3,-16(fp)
   140d0:	1009883a 	mov	r4,r2
   140d4:	180b883a 	mov	r5,r3
   140d8:	e1bff817 	ldw	r6,-32(fp)
   140dc:	00110400 	call	11040 <memcpy>
      ptr   += n;
   140e0:	e0fff817 	ldw	r3,-32(fp)
   140e4:	e0bffc17 	ldw	r2,-16(fp)
   140e8:	10c5883a 	add	r2,r2,r3
   140ec:	e0bffc15 	stw	r2,-16(fp)
      count -= n;
   140f0:	e0fffd17 	ldw	r3,-12(fp)
   140f4:	e0bff817 	ldw	r2,-32(fp)
   140f8:	1885c83a 	sub	r2,r3,r2
   140fc:	e0bffd15 	stw	r2,-12(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   14100:	e0fffa17 	ldw	r3,-24(fp)
   14104:	e0bff817 	ldw	r2,-32(fp)
   14108:	1885883a 	add	r2,r3,r2
   1410c:	10c1ffcc 	andi	r3,r2,2047
   14110:	e0bffb17 	ldw	r2,-20(fp)
   14114:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   14118:	e0bffd17 	ldw	r2,-12(fp)
   1411c:	10800048 	cmpgei	r2,r2,1
   14120:	103fc31e 	bne	r2,zero,14030 <altera_avalon_jtag_uart_write+0x30>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14124:	0005303a 	rdctl	r2,status
   14128:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1412c:	e0fff517 	ldw	r3,-44(fp)
   14130:	00bfff84 	movi	r2,-2
   14134:	1884703a 	and	r2,r3,r2
   14138:	1001703a 	wrctl	status,r2
  
  return context;
   1413c:	e0bff517 	ldw	r2,-44(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   14140:	e0bff715 	stw	r2,-36(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   14144:	e0bffb17 	ldw	r2,-20(fp)
   14148:	10800817 	ldw	r2,32(r2)
   1414c:	10c00094 	ori	r3,r2,2
   14150:	e0bffb17 	ldw	r2,-20(fp)
   14154:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   14158:	e0bffb17 	ldw	r2,-20(fp)
   1415c:	10800017 	ldw	r2,0(r2)
   14160:	11000104 	addi	r4,r2,4
   14164:	e0bffb17 	ldw	r2,-20(fp)
   14168:	10800817 	ldw	r2,32(r2)
   1416c:	1007883a 	mov	r3,r2
   14170:	2005883a 	mov	r2,r4
   14174:	10c00035 	stwio	r3,0(r2)
   14178:	e0bff717 	ldw	r2,-36(fp)
   1417c:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14180:	e0bff417 	ldw	r2,-48(fp)
   14184:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   14188:	e0bffd17 	ldw	r2,-12(fp)
   1418c:	10800050 	cmplti	r2,r2,1
   14190:	1000111e 	bne	r2,zero,141d8 <altera_avalon_jtag_uart_write+0x1d8>
    {
      if (flags & O_NONBLOCK)
   14194:	e0bffe17 	ldw	r2,-8(fp)
   14198:	1090000c 	andi	r2,r2,16384
   1419c:	1004c03a 	cmpne	r2,r2,zero
   141a0:	1000101e 	bne	r2,zero,141e4 <altera_avalon_jtag_uart_write+0x1e4>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   141a4:	e0bffb17 	ldw	r2,-20(fp)
   141a8:	10c00d17 	ldw	r3,52(r2)
   141ac:	e0bff917 	ldw	r2,-28(fp)
   141b0:	1880051e 	bne	r3,r2,141c8 <altera_avalon_jtag_uart_write+0x1c8>
   141b4:	e0bffb17 	ldw	r2,-20(fp)
   141b8:	10c00917 	ldw	r3,36(r2)
   141bc:	e0bffb17 	ldw	r2,-20(fp)
   141c0:	10800117 	ldw	r2,4(r2)
   141c4:	18bff736 	bltu	r3,r2,141a4 <altera_avalon_jtag_uart_write+0x1a4>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
   141c8:	e0bffb17 	ldw	r2,-20(fp)
   141cc:	10c00d17 	ldw	r3,52(r2)
   141d0:	e0bff917 	ldw	r2,-28(fp)
   141d4:	18800326 	beq	r3,r2,141e4 <altera_avalon_jtag_uart_write+0x1e4>
        break;
    }
  }
  while (count > 0);
   141d8:	e0bffd17 	ldw	r2,-12(fp)
   141dc:	10800048 	cmpgei	r2,r2,1
   141e0:	103fcd1e 	bne	r2,zero,14118 <altera_avalon_jtag_uart_write+0x118>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   141e4:	e0fffc17 	ldw	r3,-16(fp)
   141e8:	e0bff617 	ldw	r2,-40(fp)
   141ec:	18800526 	beq	r3,r2,14204 <altera_avalon_jtag_uart_write+0x204>
    return ptr - start;
   141f0:	e0fffc17 	ldw	r3,-16(fp)
   141f4:	e0bff617 	ldw	r2,-40(fp)
   141f8:	1887c83a 	sub	r3,r3,r2
   141fc:	e0ffff15 	stw	r3,-4(fp)
   14200:	00000906 	br	14228 <altera_avalon_jtag_uart_write+0x228>
  else if (flags & O_NONBLOCK)
   14204:	e0bffe17 	ldw	r2,-8(fp)
   14208:	1090000c 	andi	r2,r2,16384
   1420c:	1005003a 	cmpeq	r2,r2,zero
   14210:	1000031e 	bne	r2,zero,14220 <altera_avalon_jtag_uart_write+0x220>
    return -EWOULDBLOCK;
   14214:	00bffd44 	movi	r2,-11
   14218:	e0bfff15 	stw	r2,-4(fp)
   1421c:	00000206 	br	14228 <altera_avalon_jtag_uart_write+0x228>
  else
    return -EIO; /* Host not connected */
   14220:	00bffec4 	movi	r2,-5
   14224:	e0bfff15 	stw	r2,-4(fp)
   14228:	e0bfff17 	ldw	r2,-4(fp)
}
   1422c:	e037883a 	mov	sp,fp
   14230:	dfc00117 	ldw	ra,4(sp)
   14234:	df000017 	ldw	fp,0(sp)
   14238:	dec00204 	addi	sp,sp,8
   1423c:	f800283a 	ret

00014240 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   14240:	defff404 	addi	sp,sp,-48
   14244:	df000b15 	stw	fp,44(sp)
   14248:	df000b04 	addi	fp,sp,44
   1424c:	e13ffb15 	stw	r4,-20(fp)
   14250:	e17ffc15 	stw	r5,-16(fp)
   14254:	e1bffd15 	stw	r6,-12(fp)
   14258:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   1425c:	e03ff915 	stw	zero,-28(fp)
   14260:	008000b4 	movhi	r2,2
   14264:	10a27d04 	addi	r2,r2,-30220
   14268:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
   1426c:	1005003a 	cmpeq	r2,r2,zero
   14270:	1000411e 	bne	r2,zero,14378 <alt_alarm_start+0x138>
  {
    if (alarm)
   14274:	e0bffb17 	ldw	r2,-20(fp)
   14278:	1005003a 	cmpeq	r2,r2,zero
   1427c:	10003b1e 	bne	r2,zero,1436c <alt_alarm_start+0x12c>
    {
      alarm->callback = callback;
   14280:	e0fffb17 	ldw	r3,-20(fp)
   14284:	e0bffd17 	ldw	r2,-12(fp)
   14288:	18800315 	stw	r2,12(r3)
      alarm->context  = context;
   1428c:	e0fffb17 	ldw	r3,-20(fp)
   14290:	e0bffe17 	ldw	r2,-8(fp)
   14294:	18800515 	stw	r2,20(r3)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14298:	0005303a 	rdctl	r2,status
   1429c:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   142a0:	e0fff817 	ldw	r3,-32(fp)
   142a4:	00bfff84 	movi	r2,-2
   142a8:	1884703a 	and	r2,r3,r2
   142ac:	1001703a 	wrctl	status,r2
  
  return context;
   142b0:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
   142b4:	e0bffa15 	stw	r2,-24(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   142b8:	008000b4 	movhi	r2,2
   142bc:	10a27e04 	addi	r2,r2,-30216
   142c0:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
   142c4:	e0bff915 	stw	r2,-28(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   142c8:	e0fffc17 	ldw	r3,-16(fp)
   142cc:	e0bff917 	ldw	r2,-28(fp)
   142d0:	1885883a 	add	r2,r3,r2
   142d4:	10c00044 	addi	r3,r2,1
   142d8:	e0bffb17 	ldw	r2,-20(fp)
   142dc:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   142e0:	e0bffb17 	ldw	r2,-20(fp)
   142e4:	10c00217 	ldw	r3,8(r2)
   142e8:	e0bff917 	ldw	r2,-28(fp)
   142ec:	1880042e 	bgeu	r3,r2,14300 <alt_alarm_start+0xc0>
      {
        alarm->rollover = 1;
   142f0:	e0fffb17 	ldw	r3,-20(fp)
   142f4:	00800044 	movi	r2,1
   142f8:	18800405 	stb	r2,16(r3)
   142fc:	00000206 	br	14308 <alt_alarm_start+0xc8>
      }
      else
      {
        alarm->rollover = 0;
   14300:	e0bffb17 	ldw	r2,-20(fp)
   14304:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   14308:	e0fffb17 	ldw	r3,-20(fp)
   1430c:	00800074 	movhi	r2,1
   14310:	109be104 	addi	r2,r2,28548
   14314:	e0bff615 	stw	r2,-40(fp)
   14318:	e0fff715 	stw	r3,-36(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   1431c:	e0fff717 	ldw	r3,-36(fp)
   14320:	e0bff617 	ldw	r2,-40(fp)
   14324:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
   14328:	e0bff617 	ldw	r2,-40(fp)
   1432c:	10c00017 	ldw	r3,0(r2)
   14330:	e0bff717 	ldw	r2,-36(fp)
   14334:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   14338:	e0bff617 	ldw	r2,-40(fp)
   1433c:	10c00017 	ldw	r3,0(r2)
   14340:	e0bff717 	ldw	r2,-36(fp)
   14344:	18800115 	stw	r2,4(r3)
  list->next           = entry;
   14348:	e0fff617 	ldw	r3,-40(fp)
   1434c:	e0bff717 	ldw	r2,-36(fp)
   14350:	18800015 	stw	r2,0(r3)
   14354:	e0bffa17 	ldw	r2,-24(fp)
   14358:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1435c:	e0bff517 	ldw	r2,-44(fp)
   14360:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   14364:	e03fff15 	stw	zero,-4(fp)
   14368:	00000506 	br	14380 <alt_alarm_start+0x140>
    }
    else
    {
      return -EINVAL;
   1436c:	00bffa84 	movi	r2,-22
   14370:	e0bfff15 	stw	r2,-4(fp)
   14374:	00000206 	br	14380 <alt_alarm_start+0x140>
    }
  }
  else
  {
    return -ENOTSUP;
   14378:	00bfde84 	movi	r2,-134
   1437c:	e0bfff15 	stw	r2,-4(fp)
   14380:	e0bfff17 	ldw	r2,-4(fp)
  }
}
   14384:	e037883a 	mov	sp,fp
   14388:	df000017 	ldw	fp,0(sp)
   1438c:	dec00104 	addi	sp,sp,4
   14390:	f800283a 	ret

00014394 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   14394:	deffff04 	addi	sp,sp,-4
   14398:	df000015 	stw	fp,0(sp)
   1439c:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   143a0:	e037883a 	mov	sp,fp
   143a4:	df000017 	ldw	fp,0(sp)
   143a8:	dec00104 	addi	sp,sp,4
   143ac:	f800283a 	ret

000143b0 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   143b0:	defff904 	addi	sp,sp,-28
   143b4:	dfc00615 	stw	ra,24(sp)
   143b8:	df000515 	stw	fp,20(sp)
   143bc:	df000504 	addi	fp,sp,20
   143c0:	e13ffd15 	stw	r4,-12(fp)
   143c4:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   143c8:	e0bffd17 	ldw	r2,-12(fp)
   143cc:	1005003a 	cmpeq	r2,r2,zero
   143d0:	1000041e 	bne	r2,zero,143e4 <alt_dev_llist_insert+0x34>
   143d4:	e0bffd17 	ldw	r2,-12(fp)
   143d8:	10800217 	ldw	r2,8(r2)
   143dc:	1004c03a 	cmpne	r2,r2,zero
   143e0:	1000071e 	bne	r2,zero,14400 <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
   143e4:	00144640 	call	14464 <alt_get_errno>
   143e8:	1007883a 	mov	r3,r2
   143ec:	00800584 	movi	r2,22
   143f0:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   143f4:	00bffa84 	movi	r2,-22
   143f8:	e0bfff15 	stw	r2,-4(fp)
   143fc:	00001306 	br	1444c <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   14400:	e0fffd17 	ldw	r3,-12(fp)
   14404:	e0bffe17 	ldw	r2,-8(fp)
   14408:	e0bffb15 	stw	r2,-20(fp)
   1440c:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   14410:	e0fffc17 	ldw	r3,-16(fp)
   14414:	e0bffb17 	ldw	r2,-20(fp)
   14418:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
   1441c:	e0bffb17 	ldw	r2,-20(fp)
   14420:	10c00017 	ldw	r3,0(r2)
   14424:	e0bffc17 	ldw	r2,-16(fp)
   14428:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   1442c:	e0bffb17 	ldw	r2,-20(fp)
   14430:	10c00017 	ldw	r3,0(r2)
   14434:	e0bffc17 	ldw	r2,-16(fp)
   14438:	18800115 	stw	r2,4(r3)
  list->next           = entry;
   1443c:	e0fffb17 	ldw	r3,-20(fp)
   14440:	e0bffc17 	ldw	r2,-16(fp)
   14444:	18800015 	stw	r2,0(r3)

  return 0;  
   14448:	e03fff15 	stw	zero,-4(fp)
   1444c:	e0bfff17 	ldw	r2,-4(fp)
}
   14450:	e037883a 	mov	sp,fp
   14454:	dfc00117 	ldw	ra,4(sp)
   14458:	df000017 	ldw	fp,0(sp)
   1445c:	dec00204 	addi	sp,sp,8
   14460:	f800283a 	ret

00014464 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   14464:	defffd04 	addi	sp,sp,-12
   14468:	dfc00215 	stw	ra,8(sp)
   1446c:	df000115 	stw	fp,4(sp)
   14470:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   14474:	00800074 	movhi	r2,1
   14478:	109bde04 	addi	r2,r2,28536
   1447c:	10800017 	ldw	r2,0(r2)
   14480:	1005003a 	cmpeq	r2,r2,zero
   14484:	1000061e 	bne	r2,zero,144a0 <alt_get_errno+0x3c>
   14488:	00800074 	movhi	r2,1
   1448c:	109bde04 	addi	r2,r2,28536
   14490:	10800017 	ldw	r2,0(r2)
   14494:	103ee83a 	callr	r2
   14498:	e0bfff15 	stw	r2,-4(fp)
   1449c:	00000306 	br	144ac <alt_get_errno+0x48>
   144a0:	008000b4 	movhi	r2,2
   144a4:	10a27804 	addi	r2,r2,-30240
   144a8:	e0bfff15 	stw	r2,-4(fp)
   144ac:	e0bfff17 	ldw	r2,-4(fp)
}
   144b0:	e037883a 	mov	sp,fp
   144b4:	dfc00117 	ldw	ra,4(sp)
   144b8:	df000017 	ldw	fp,0(sp)
   144bc:	dec00204 	addi	sp,sp,8
   144c0:	f800283a 	ret

000144c4 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   144c4:	defffd04 	addi	sp,sp,-12
   144c8:	dfc00215 	stw	ra,8(sp)
   144cc:	df000115 	stw	fp,4(sp)
   144d0:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   144d4:	00bfff04 	movi	r2,-4
   144d8:	00c00074 	movhi	r3,1
   144dc:	18d53f04 	addi	r3,r3,21756
   144e0:	1885883a 	add	r2,r3,r2
   144e4:	e0bfff15 	stw	r2,-4(fp)
   144e8:	00000606 	br	14504 <_do_ctors+0x40>
        (*ctor) (); 
   144ec:	e0bfff17 	ldw	r2,-4(fp)
   144f0:	10800017 	ldw	r2,0(r2)
   144f4:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   144f8:	e0bfff17 	ldw	r2,-4(fp)
   144fc:	10bfff04 	addi	r2,r2,-4
   14500:	e0bfff15 	stw	r2,-4(fp)
   14504:	e0ffff17 	ldw	r3,-4(fp)
   14508:	00800074 	movhi	r2,1
   1450c:	10953e04 	addi	r2,r2,21752
   14510:	18bff62e 	bgeu	r3,r2,144ec <_do_ctors+0x28>
        (*ctor) (); 
}
   14514:	e037883a 	mov	sp,fp
   14518:	dfc00117 	ldw	ra,4(sp)
   1451c:	df000017 	ldw	fp,0(sp)
   14520:	dec00204 	addi	sp,sp,8
   14524:	f800283a 	ret

00014528 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   14528:	defffd04 	addi	sp,sp,-12
   1452c:	dfc00215 	stw	ra,8(sp)
   14530:	df000115 	stw	fp,4(sp)
   14534:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   14538:	00bfff04 	movi	r2,-4
   1453c:	00c00074 	movhi	r3,1
   14540:	18d53f04 	addi	r3,r3,21756
   14544:	1885883a 	add	r2,r3,r2
   14548:	e0bfff15 	stw	r2,-4(fp)
   1454c:	00000606 	br	14568 <_do_dtors+0x40>
        (*dtor) (); 
   14550:	e0bfff17 	ldw	r2,-4(fp)
   14554:	10800017 	ldw	r2,0(r2)
   14558:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   1455c:	e0bfff17 	ldw	r2,-4(fp)
   14560:	10bfff04 	addi	r2,r2,-4
   14564:	e0bfff15 	stw	r2,-4(fp)
   14568:	e0ffff17 	ldw	r3,-4(fp)
   1456c:	00800074 	movhi	r2,1
   14570:	10953f04 	addi	r2,r2,21756
   14574:	18bff62e 	bgeu	r3,r2,14550 <_do_dtors+0x28>
        (*dtor) (); 
}
   14578:	e037883a 	mov	sp,fp
   1457c:	dfc00117 	ldw	ra,4(sp)
   14580:	df000017 	ldw	fp,0(sp)
   14584:	dec00204 	addi	sp,sp,8
   14588:	f800283a 	ret

0001458c <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   1458c:	deffff04 	addi	sp,sp,-4
   14590:	df000015 	stw	fp,0(sp)
   14594:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
   14598:	e037883a 	mov	sp,fp
   1459c:	df000017 	ldw	fp,0(sp)
   145a0:	dec00104 	addi	sp,sp,4
   145a4:	f800283a 	ret

000145a8 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   145a8:	defff904 	addi	sp,sp,-28
   145ac:	dfc00615 	stw	ra,24(sp)
   145b0:	df000515 	stw	fp,20(sp)
   145b4:	df000504 	addi	fp,sp,20
   145b8:	e13ffc15 	stw	r4,-16(fp)
   145bc:	e17ffd15 	stw	r5,-12(fp)
   145c0:	e1bffe15 	stw	r6,-8(fp)
   145c4:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   145c8:	e0800217 	ldw	r2,8(fp)
   145cc:	d8800015 	stw	r2,0(sp)
   145d0:	e13ffc17 	ldw	r4,-16(fp)
   145d4:	e17ffd17 	ldw	r5,-12(fp)
   145d8:	e1bffe17 	ldw	r6,-8(fp)
   145dc:	e1ffff17 	ldw	r7,-4(fp)
   145e0:	001477c0 	call	1477c <alt_iic_isr_register>
}  
   145e4:	e037883a 	mov	sp,fp
   145e8:	dfc00117 	ldw	ra,4(sp)
   145ec:	df000017 	ldw	fp,0(sp)
   145f0:	dec00204 	addi	sp,sp,8
   145f4:	f800283a 	ret

000145f8 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   145f8:	defff904 	addi	sp,sp,-28
   145fc:	df000615 	stw	fp,24(sp)
   14600:	df000604 	addi	fp,sp,24
   14604:	e13ffe15 	stw	r4,-8(fp)
   14608:	e17fff15 	stw	r5,-4(fp)
   1460c:	e0bfff17 	ldw	r2,-4(fp)
   14610:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14614:	0005303a 	rdctl	r2,status
   14618:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1461c:	e0fffb17 	ldw	r3,-20(fp)
   14620:	00bfff84 	movi	r2,-2
   14624:	1884703a 	and	r2,r3,r2
   14628:	1001703a 	wrctl	status,r2
  
  return context;
   1462c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   14630:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
   14634:	e0fffc17 	ldw	r3,-16(fp)
   14638:	00800044 	movi	r2,1
   1463c:	10c4983a 	sll	r2,r2,r3
   14640:	1007883a 	mov	r3,r2
   14644:	008000b4 	movhi	r2,2
   14648:	10a27c04 	addi	r2,r2,-30224
   1464c:	10800017 	ldw	r2,0(r2)
   14650:	1886b03a 	or	r3,r3,r2
   14654:	008000b4 	movhi	r2,2
   14658:	10a27c04 	addi	r2,r2,-30224
   1465c:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   14660:	008000b4 	movhi	r2,2
   14664:	10a27c04 	addi	r2,r2,-30224
   14668:	10800017 	ldw	r2,0(r2)
   1466c:	100170fa 	wrctl	ienable,r2
   14670:	e0bffd17 	ldw	r2,-12(fp)
   14674:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14678:	e0bffa17 	ldw	r2,-24(fp)
   1467c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   14680:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
   14684:	e037883a 	mov	sp,fp
   14688:	df000017 	ldw	fp,0(sp)
   1468c:	dec00104 	addi	sp,sp,4
   14690:	f800283a 	ret

00014694 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   14694:	defff904 	addi	sp,sp,-28
   14698:	df000615 	stw	fp,24(sp)
   1469c:	df000604 	addi	fp,sp,24
   146a0:	e13ffe15 	stw	r4,-8(fp)
   146a4:	e17fff15 	stw	r5,-4(fp)
   146a8:	e0bfff17 	ldw	r2,-4(fp)
   146ac:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   146b0:	0005303a 	rdctl	r2,status
   146b4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   146b8:	e0fffb17 	ldw	r3,-20(fp)
   146bc:	00bfff84 	movi	r2,-2
   146c0:	1884703a 	and	r2,r3,r2
   146c4:	1001703a 	wrctl	status,r2
  
  return context;
   146c8:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   146cc:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active &= ~(1 << id);
   146d0:	e0fffc17 	ldw	r3,-16(fp)
   146d4:	00800044 	movi	r2,1
   146d8:	10c4983a 	sll	r2,r2,r3
   146dc:	0084303a 	nor	r2,zero,r2
   146e0:	1007883a 	mov	r3,r2
   146e4:	008000b4 	movhi	r2,2
   146e8:	10a27c04 	addi	r2,r2,-30224
   146ec:	10800017 	ldw	r2,0(r2)
   146f0:	1886703a 	and	r3,r3,r2
   146f4:	008000b4 	movhi	r2,2
   146f8:	10a27c04 	addi	r2,r2,-30224
   146fc:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   14700:	008000b4 	movhi	r2,2
   14704:	10a27c04 	addi	r2,r2,-30224
   14708:	10800017 	ldw	r2,0(r2)
   1470c:	100170fa 	wrctl	ienable,r2
   14710:	e0bffd17 	ldw	r2,-12(fp)
   14714:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14718:	e0bffa17 	ldw	r2,-24(fp)
   1471c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   14720:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
   14724:	e037883a 	mov	sp,fp
   14728:	df000017 	ldw	fp,0(sp)
   1472c:	dec00104 	addi	sp,sp,4
   14730:	f800283a 	ret

00014734 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   14734:	defffc04 	addi	sp,sp,-16
   14738:	df000315 	stw	fp,12(sp)
   1473c:	df000304 	addi	fp,sp,12
   14740:	e13ffe15 	stw	r4,-8(fp)
   14744:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   14748:	000530fa 	rdctl	r2,ienable
   1474c:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   14750:	e0ffff17 	ldw	r3,-4(fp)
   14754:	00800044 	movi	r2,1
   14758:	10c4983a 	sll	r2,r2,r3
   1475c:	1007883a 	mov	r3,r2
   14760:	e0bffd17 	ldw	r2,-12(fp)
   14764:	1884703a 	and	r2,r3,r2
   14768:	1004c03a 	cmpne	r2,r2,zero
}
   1476c:	e037883a 	mov	sp,fp
   14770:	df000017 	ldw	fp,0(sp)
   14774:	dec00104 	addi	sp,sp,4
   14778:	f800283a 	ret

0001477c <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   1477c:	defff404 	addi	sp,sp,-48
   14780:	dfc00b15 	stw	ra,44(sp)
   14784:	df000a15 	stw	fp,40(sp)
   14788:	df000a04 	addi	fp,sp,40
   1478c:	e13ffb15 	stw	r4,-20(fp)
   14790:	e17ffc15 	stw	r5,-16(fp)
   14794:	e1bffd15 	stw	r6,-12(fp)
   14798:	e1fffe15 	stw	r7,-8(fp)
  int rc = -EINVAL;  
   1479c:	00bffa84 	movi	r2,-22
   147a0:	e0bffa15 	stw	r2,-24(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   147a4:	e0bffc17 	ldw	r2,-16(fp)
   147a8:	e0bff915 	stw	r2,-28(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   147ac:	e0bff917 	ldw	r2,-28(fp)
   147b0:	10800808 	cmpgei	r2,r2,32
   147b4:	1000291e 	bne	r2,zero,1485c <alt_iic_isr_register+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   147b8:	0005303a 	rdctl	r2,status
   147bc:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   147c0:	e0fff717 	ldw	r3,-36(fp)
   147c4:	00bfff84 	movi	r2,-2
   147c8:	1884703a 	and	r2,r3,r2
   147cc:	1001703a 	wrctl	status,r2
  
  return context;
   147d0:	e0bff717 	ldw	r2,-36(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   147d4:	e0bff815 	stw	r2,-32(fp)

    alt_irq[id].handler = isr;
   147d8:	e0bff917 	ldw	r2,-28(fp)
   147dc:	00c000b4 	movhi	r3,2
   147e0:	18e28904 	addi	r3,r3,-30172
   147e4:	100490fa 	slli	r2,r2,3
   147e8:	10c7883a 	add	r3,r2,r3
   147ec:	e0bffd17 	ldw	r2,-12(fp)
   147f0:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = isr_context;
   147f4:	e0bff917 	ldw	r2,-28(fp)
   147f8:	00c000b4 	movhi	r3,2
   147fc:	18e28904 	addi	r3,r3,-30172
   14800:	100490fa 	slli	r2,r2,3
   14804:	10c5883a 	add	r2,r2,r3
   14808:	10c00104 	addi	r3,r2,4
   1480c:	e0bffe17 	ldw	r2,-8(fp)
   14810:	18800015 	stw	r2,0(r3)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   14814:	e0bffd17 	ldw	r2,-12(fp)
   14818:	1005003a 	cmpeq	r2,r2,zero
   1481c:	1000051e 	bne	r2,zero,14834 <alt_iic_isr_register+0xb8>
   14820:	e17ff917 	ldw	r5,-28(fp)
   14824:	e13ffb17 	ldw	r4,-20(fp)
   14828:	00145f80 	call	145f8 <alt_ic_irq_enable>
   1482c:	e0bfff15 	stw	r2,-4(fp)
   14830:	00000406 	br	14844 <alt_iic_isr_register+0xc8>
   14834:	e17ff917 	ldw	r5,-28(fp)
   14838:	e13ffb17 	ldw	r4,-20(fp)
   1483c:	00146940 	call	14694 <alt_ic_irq_disable>
   14840:	e0bfff15 	stw	r2,-4(fp)
   14844:	e0bfff17 	ldw	r2,-4(fp)
   14848:	e0bffa15 	stw	r2,-24(fp)
   1484c:	e0bff817 	ldw	r2,-32(fp)
   14850:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14854:	e0bff617 	ldw	r2,-40(fp)
   14858:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   1485c:	e0bffa17 	ldw	r2,-24(fp)
}
   14860:	e037883a 	mov	sp,fp
   14864:	dfc00117 	ldw	ra,4(sp)
   14868:	df000017 	ldw	fp,0(sp)
   1486c:	dec00204 	addi	sp,sp,8
   14870:	f800283a 	ret

00014874 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   14874:	defff804 	addi	sp,sp,-32
   14878:	dfc00715 	stw	ra,28(sp)
   1487c:	df000615 	stw	fp,24(sp)
   14880:	dc000515 	stw	r16,20(sp)
   14884:	df000504 	addi	fp,sp,20
   14888:	e13ffc15 	stw	r4,-16(fp)
   1488c:	e17ffd15 	stw	r5,-12(fp)
   14890:	e1bffe15 	stw	r6,-8(fp)
   14894:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
   14898:	e13ffd17 	ldw	r4,-12(fp)
   1489c:	e17ffe17 	ldw	r5,-8(fp)
   148a0:	e1bfff17 	ldw	r6,-4(fp)
   148a4:	0014abc0 	call	14abc <open>
   148a8:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
   148ac:	e0bffb17 	ldw	r2,-20(fp)
   148b0:	1004803a 	cmplt	r2,r2,zero
   148b4:	10001f1e 	bne	r2,zero,14934 <alt_open_fd+0xc0>
  {
    fd->dev      = alt_fd_list[old].dev;
   148b8:	e13ffb17 	ldw	r4,-20(fp)
   148bc:	04000074 	movhi	r16,1
   148c0:	84175d04 	addi	r16,r16,23924
   148c4:	01400304 	movi	r5,12
   148c8:	0012b9c0 	call	12b9c <__mulsi3>
   148cc:	1405883a 	add	r2,r2,r16
   148d0:	10c00017 	ldw	r3,0(r2)
   148d4:	e0bffc17 	ldw	r2,-16(fp)
   148d8:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   148dc:	e13ffb17 	ldw	r4,-20(fp)
   148e0:	04000074 	movhi	r16,1
   148e4:	84175d04 	addi	r16,r16,23924
   148e8:	01400304 	movi	r5,12
   148ec:	0012b9c0 	call	12b9c <__mulsi3>
   148f0:	1405883a 	add	r2,r2,r16
   148f4:	10800104 	addi	r2,r2,4
   148f8:	10c00017 	ldw	r3,0(r2)
   148fc:	e0bffc17 	ldw	r2,-16(fp)
   14900:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   14904:	e13ffb17 	ldw	r4,-20(fp)
   14908:	04000074 	movhi	r16,1
   1490c:	84175d04 	addi	r16,r16,23924
   14910:	01400304 	movi	r5,12
   14914:	0012b9c0 	call	12b9c <__mulsi3>
   14918:	1405883a 	add	r2,r2,r16
   1491c:	10800204 	addi	r2,r2,8
   14920:	10c00017 	ldw	r3,0(r2)
   14924:	e0bffc17 	ldw	r2,-16(fp)
   14928:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   1492c:	e13ffb17 	ldw	r4,-20(fp)
   14930:	001342c0 	call	1342c <alt_release_fd>
  }
} 
   14934:	e037883a 	mov	sp,fp
   14938:	dfc00217 	ldw	ra,8(sp)
   1493c:	df000117 	ldw	fp,4(sp)
   14940:	dc000017 	ldw	r16,0(sp)
   14944:	dec00304 	addi	sp,sp,12
   14948:	f800283a 	ret

0001494c <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   1494c:	defffb04 	addi	sp,sp,-20
   14950:	dfc00415 	stw	ra,16(sp)
   14954:	df000315 	stw	fp,12(sp)
   14958:	df000304 	addi	fp,sp,12
   1495c:	e13ffd15 	stw	r4,-12(fp)
   14960:	e17ffe15 	stw	r5,-8(fp)
   14964:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   14968:	01000074 	movhi	r4,1
   1496c:	21176004 	addi	r4,r4,23936
   14970:	e17ffd17 	ldw	r5,-12(fp)
   14974:	01800044 	movi	r6,1
   14978:	01c07fc4 	movi	r7,511
   1497c:	00148740 	call	14874 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   14980:	01000074 	movhi	r4,1
   14984:	21175d04 	addi	r4,r4,23924
   14988:	e17ffe17 	ldw	r5,-8(fp)
   1498c:	000d883a 	mov	r6,zero
   14990:	01c07fc4 	movi	r7,511
   14994:	00148740 	call	14874 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   14998:	01000074 	movhi	r4,1
   1499c:	21176304 	addi	r4,r4,23948
   149a0:	e17fff17 	ldw	r5,-4(fp)
   149a4:	01800044 	movi	r6,1
   149a8:	01c07fc4 	movi	r7,511
   149ac:	00148740 	call	14874 <alt_open_fd>
}  
   149b0:	e037883a 	mov	sp,fp
   149b4:	dfc00117 	ldw	ra,4(sp)
   149b8:	df000017 	ldw	fp,0(sp)
   149bc:	dec00204 	addi	sp,sp,8
   149c0:	f800283a 	ret

000149c4 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   149c4:	defffa04 	addi	sp,sp,-24
   149c8:	dfc00515 	stw	ra,20(sp)
   149cc:	df000415 	stw	fp,16(sp)
   149d0:	dc000315 	stw	r16,12(sp)
   149d4:	df000304 	addi	fp,sp,12
   149d8:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   149dc:	e0bffe17 	ldw	r2,-8(fp)
   149e0:	10800217 	ldw	r2,8(r2)
   149e4:	10d00034 	orhi	r3,r2,16384
   149e8:	e0bffe17 	ldw	r2,-8(fp)
   149ec:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   149f0:	e03ffd15 	stw	zero,-12(fp)
   149f4:	00002306 	br	14a84 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   149f8:	e13ffd17 	ldw	r4,-12(fp)
   149fc:	04000074 	movhi	r16,1
   14a00:	84175d04 	addi	r16,r16,23924
   14a04:	01400304 	movi	r5,12
   14a08:	0012b9c0 	call	12b9c <__mulsi3>
   14a0c:	1405883a 	add	r2,r2,r16
   14a10:	10c00017 	ldw	r3,0(r2)
   14a14:	e0bffe17 	ldw	r2,-8(fp)
   14a18:	10800017 	ldw	r2,0(r2)
   14a1c:	1880161e 	bne	r3,r2,14a78 <alt_file_locked+0xb4>
   14a20:	e13ffd17 	ldw	r4,-12(fp)
   14a24:	04000074 	movhi	r16,1
   14a28:	84175d04 	addi	r16,r16,23924
   14a2c:	01400304 	movi	r5,12
   14a30:	0012b9c0 	call	12b9c <__mulsi3>
   14a34:	1405883a 	add	r2,r2,r16
   14a38:	10800204 	addi	r2,r2,8
   14a3c:	10800017 	ldw	r2,0(r2)
   14a40:	1004403a 	cmpge	r2,r2,zero
   14a44:	10000c1e 	bne	r2,zero,14a78 <alt_file_locked+0xb4>
   14a48:	e13ffd17 	ldw	r4,-12(fp)
   14a4c:	01400304 	movi	r5,12
   14a50:	0012b9c0 	call	12b9c <__mulsi3>
   14a54:	1007883a 	mov	r3,r2
   14a58:	00800074 	movhi	r2,1
   14a5c:	10975d04 	addi	r2,r2,23924
   14a60:	1887883a 	add	r3,r3,r2
   14a64:	e0bffe17 	ldw	r2,-8(fp)
   14a68:	18800326 	beq	r3,r2,14a78 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   14a6c:	00bffcc4 	movi	r2,-13
   14a70:	e0bfff15 	stw	r2,-4(fp)
   14a74:	00000a06 	br	14aa0 <alt_file_locked+0xdc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   14a78:	e0bffd17 	ldw	r2,-12(fp)
   14a7c:	10800044 	addi	r2,r2,1
   14a80:	e0bffd15 	stw	r2,-12(fp)
   14a84:	00800074 	movhi	r2,1
   14a88:	109bdd04 	addi	r2,r2,28532
   14a8c:	10800017 	ldw	r2,0(r2)
   14a90:	1007883a 	mov	r3,r2
   14a94:	e0bffd17 	ldw	r2,-12(fp)
   14a98:	18bfd72e 	bgeu	r3,r2,149f8 <alt_file_locked+0x34>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   14a9c:	e03fff15 	stw	zero,-4(fp)
   14aa0:	e0bfff17 	ldw	r2,-4(fp)
}
   14aa4:	e037883a 	mov	sp,fp
   14aa8:	dfc00217 	ldw	ra,8(sp)
   14aac:	df000117 	ldw	fp,4(sp)
   14ab0:	dc000017 	ldw	r16,0(sp)
   14ab4:	dec00304 	addi	sp,sp,12
   14ab8:	f800283a 	ret

00014abc <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   14abc:	defff404 	addi	sp,sp,-48
   14ac0:	dfc00b15 	stw	ra,44(sp)
   14ac4:	df000a15 	stw	fp,40(sp)
   14ac8:	df000a04 	addi	fp,sp,40
   14acc:	e13ffb15 	stw	r4,-20(fp)
   14ad0:	e17ffc15 	stw	r5,-16(fp)
   14ad4:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   14ad8:	00bfffc4 	movi	r2,-1
   14adc:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
   14ae0:	00bffb44 	movi	r2,-19
   14ae4:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
   14ae8:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   14aec:	e13ffb17 	ldw	r4,-20(fp)
   14af0:	01400074 	movhi	r5,1
   14af4:	295bdb04 	addi	r5,r5,28524
   14af8:	0014e6c0 	call	14e6c <alt_find_dev>
   14afc:	e0bffa15 	stw	r2,-24(fp)
   14b00:	e0bffa17 	ldw	r2,-24(fp)
   14b04:	1004c03a 	cmpne	r2,r2,zero
   14b08:	1000051e 	bne	r2,zero,14b20 <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   14b0c:	e13ffb17 	ldw	r4,-20(fp)
   14b10:	0014f000 	call	14f00 <alt_find_file>
   14b14:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
   14b18:	00800044 	movi	r2,1
   14b1c:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   14b20:	e0bffa17 	ldw	r2,-24(fp)
   14b24:	1005003a 	cmpeq	r2,r2,zero
   14b28:	1000311e 	bne	r2,zero,14bf0 <open+0x134>
  {
    if ((index = alt_get_fd (dev)) < 0)
   14b2c:	e13ffa17 	ldw	r4,-24(fp)
   14b30:	00150200 	call	15020 <alt_get_fd>
   14b34:	e0bff815 	stw	r2,-32(fp)
   14b38:	e0bff817 	ldw	r2,-32(fp)
   14b3c:	1004403a 	cmpge	r2,r2,zero
   14b40:	1000031e 	bne	r2,zero,14b50 <open+0x94>
    {
      status = index;
   14b44:	e0bff817 	ldw	r2,-32(fp)
   14b48:	e0bff715 	stw	r2,-36(fp)
   14b4c:	00002a06 	br	14bf8 <open+0x13c>
    }
    else
    {
      fd = &alt_fd_list[index];
   14b50:	e13ff817 	ldw	r4,-32(fp)
   14b54:	01400304 	movi	r5,12
   14b58:	0012b9c0 	call	12b9c <__mulsi3>
   14b5c:	1007883a 	mov	r3,r2
   14b60:	00800074 	movhi	r2,1
   14b64:	10975d04 	addi	r2,r2,23924
   14b68:	1885883a 	add	r2,r3,r2
   14b6c:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   14b70:	e0fffc17 	ldw	r3,-16(fp)
   14b74:	00900034 	movhi	r2,16384
   14b78:	10bfffc4 	addi	r2,r2,-1
   14b7c:	1886703a 	and	r3,r3,r2
   14b80:	e0bff917 	ldw	r2,-28(fp)
   14b84:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   14b88:	e0bff617 	ldw	r2,-40(fp)
   14b8c:	1004c03a 	cmpne	r2,r2,zero
   14b90:	1000061e 	bne	r2,zero,14bac <open+0xf0>
   14b94:	e13ff917 	ldw	r4,-28(fp)
   14b98:	00149c40 	call	149c4 <alt_file_locked>
   14b9c:	e0bff715 	stw	r2,-36(fp)
   14ba0:	e0bff717 	ldw	r2,-36(fp)
   14ba4:	1004803a 	cmplt	r2,r2,zero
   14ba8:	1000131e 	bne	r2,zero,14bf8 <open+0x13c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   14bac:	e0bffa17 	ldw	r2,-24(fp)
   14bb0:	10800317 	ldw	r2,12(r2)
   14bb4:	1005003a 	cmpeq	r2,r2,zero
   14bb8:	1000091e 	bne	r2,zero,14be0 <open+0x124>
   14bbc:	e0bffa17 	ldw	r2,-24(fp)
   14bc0:	10800317 	ldw	r2,12(r2)
   14bc4:	e13ff917 	ldw	r4,-28(fp)
   14bc8:	e17ffb17 	ldw	r5,-20(fp)
   14bcc:	e1bffc17 	ldw	r6,-16(fp)
   14bd0:	e1fffd17 	ldw	r7,-12(fp)
   14bd4:	103ee83a 	callr	r2
   14bd8:	e0bfff15 	stw	r2,-4(fp)
   14bdc:	00000106 	br	14be4 <open+0x128>
   14be0:	e03fff15 	stw	zero,-4(fp)
   14be4:	e0bfff17 	ldw	r2,-4(fp)
   14be8:	e0bff715 	stw	r2,-36(fp)
   14bec:	00000206 	br	14bf8 <open+0x13c>
      }
    }
  }
  else
  {
    status = -ENODEV;
   14bf0:	00bffb44 	movi	r2,-19
   14bf4:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   14bf8:	e0bff717 	ldw	r2,-36(fp)
   14bfc:	1004403a 	cmpge	r2,r2,zero
   14c00:	1000091e 	bne	r2,zero,14c28 <open+0x16c>
  {
    alt_release_fd (index);  
   14c04:	e13ff817 	ldw	r4,-32(fp)
   14c08:	001342c0 	call	1342c <alt_release_fd>
    ALT_ERRNO = -status;
   14c0c:	0014c480 	call	14c48 <alt_get_errno>
   14c10:	e0fff717 	ldw	r3,-36(fp)
   14c14:	00c7c83a 	sub	r3,zero,r3
   14c18:	10c00015 	stw	r3,0(r2)
    return -1;
   14c1c:	00bfffc4 	movi	r2,-1
   14c20:	e0bffe15 	stw	r2,-8(fp)
   14c24:	00000206 	br	14c30 <open+0x174>
  }
  
  /* return the reference upon success */

  return index;
   14c28:	e0bff817 	ldw	r2,-32(fp)
   14c2c:	e0bffe15 	stw	r2,-8(fp)
   14c30:	e0bffe17 	ldw	r2,-8(fp)
}
   14c34:	e037883a 	mov	sp,fp
   14c38:	dfc00117 	ldw	ra,4(sp)
   14c3c:	df000017 	ldw	fp,0(sp)
   14c40:	dec00204 	addi	sp,sp,8
   14c44:	f800283a 	ret

00014c48 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   14c48:	defffd04 	addi	sp,sp,-12
   14c4c:	dfc00215 	stw	ra,8(sp)
   14c50:	df000115 	stw	fp,4(sp)
   14c54:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   14c58:	00800074 	movhi	r2,1
   14c5c:	109bde04 	addi	r2,r2,28536
   14c60:	10800017 	ldw	r2,0(r2)
   14c64:	1005003a 	cmpeq	r2,r2,zero
   14c68:	1000061e 	bne	r2,zero,14c84 <alt_get_errno+0x3c>
   14c6c:	00800074 	movhi	r2,1
   14c70:	109bde04 	addi	r2,r2,28536
   14c74:	10800017 	ldw	r2,0(r2)
   14c78:	103ee83a 	callr	r2
   14c7c:	e0bfff15 	stw	r2,-4(fp)
   14c80:	00000306 	br	14c90 <alt_get_errno+0x48>
   14c84:	008000b4 	movhi	r2,2
   14c88:	10a27804 	addi	r2,r2,-30240
   14c8c:	e0bfff15 	stw	r2,-4(fp)
   14c90:	e0bfff17 	ldw	r2,-4(fp)
}
   14c94:	e037883a 	mov	sp,fp
   14c98:	dfc00117 	ldw	ra,4(sp)
   14c9c:	df000017 	ldw	fp,0(sp)
   14ca0:	dec00204 	addi	sp,sp,8
   14ca4:	f800283a 	ret

00014ca8 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   14ca8:	defffa04 	addi	sp,sp,-24
   14cac:	df000515 	stw	fp,20(sp)
   14cb0:	df000504 	addi	fp,sp,20
   14cb4:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14cb8:	0005303a 	rdctl	r2,status
   14cbc:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14cc0:	e0fffd17 	ldw	r3,-12(fp)
   14cc4:	00bfff84 	movi	r2,-2
   14cc8:	1884703a 	and	r2,r3,r2
   14ccc:	1001703a 	wrctl	status,r2
  
  return context;
   14cd0:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   14cd4:	e0bffe15 	stw	r2,-8(fp)
  alt_llist_remove (&alarm->llist);
   14cd8:	e0bfff17 	ldw	r2,-4(fp)
   14cdc:	e0bffc15 	stw	r2,-16(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   14ce0:	e0bffc17 	ldw	r2,-16(fp)
   14ce4:	10c00017 	ldw	r3,0(r2)
   14ce8:	e0bffc17 	ldw	r2,-16(fp)
   14cec:	10800117 	ldw	r2,4(r2)
   14cf0:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
   14cf4:	e0bffc17 	ldw	r2,-16(fp)
   14cf8:	10c00117 	ldw	r3,4(r2)
   14cfc:	e0bffc17 	ldw	r2,-16(fp)
   14d00:	10800017 	ldw	r2,0(r2)
   14d04:	18800015 	stw	r2,0(r3)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   14d08:	e0fffc17 	ldw	r3,-16(fp)
   14d0c:	e0bffc17 	ldw	r2,-16(fp)
   14d10:	18800115 	stw	r2,4(r3)
  entry->next     = entry;
   14d14:	e0fffc17 	ldw	r3,-16(fp)
   14d18:	e0bffc17 	ldw	r2,-16(fp)
   14d1c:	18800015 	stw	r2,0(r3)
   14d20:	e0bffe17 	ldw	r2,-8(fp)
   14d24:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14d28:	e0bffb17 	ldw	r2,-20(fp)
   14d2c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   14d30:	e037883a 	mov	sp,fp
   14d34:	df000017 	ldw	fp,0(sp)
   14d38:	dec00104 	addi	sp,sp,4
   14d3c:	f800283a 	ret

00014d40 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   14d40:	defffb04 	addi	sp,sp,-20
   14d44:	dfc00415 	stw	ra,16(sp)
   14d48:	df000315 	stw	fp,12(sp)
   14d4c:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   14d50:	d0a00c17 	ldw	r2,-32720(gp)
   14d54:	e0bffe15 	stw	r2,-8(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   14d58:	d0a6a917 	ldw	r2,-25948(gp)
   14d5c:	10800044 	addi	r2,r2,1
   14d60:	d0a6a915 	stw	r2,-25948(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   14d64:	00003106 	br	14e2c <alt_tick+0xec>
  {
    next = (alt_alarm*) alarm->llist.next;
   14d68:	e0bffe17 	ldw	r2,-8(fp)
   14d6c:	10800017 	ldw	r2,0(r2)
   14d70:	e0bfff15 	stw	r2,-4(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   14d74:	e0bffe17 	ldw	r2,-8(fp)
   14d78:	10800403 	ldbu	r2,16(r2)
   14d7c:	10803fcc 	andi	r2,r2,255
   14d80:	1005003a 	cmpeq	r2,r2,zero
   14d84:	1000051e 	bne	r2,zero,14d9c <alt_tick+0x5c>
   14d88:	d0a6a917 	ldw	r2,-25948(gp)
   14d8c:	1004c03a 	cmpne	r2,r2,zero
   14d90:	1000021e 	bne	r2,zero,14d9c <alt_tick+0x5c>
    {
      alarm->rollover = 0;
   14d94:	e0bffe17 	ldw	r2,-8(fp)
   14d98:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   14d9c:	e0bffe17 	ldw	r2,-8(fp)
   14da0:	10c00217 	ldw	r3,8(r2)
   14da4:	d0a6a917 	ldw	r2,-25948(gp)
   14da8:	10c01e36 	bltu	r2,r3,14e24 <alt_tick+0xe4>
   14dac:	e0bffe17 	ldw	r2,-8(fp)
   14db0:	10800403 	ldbu	r2,16(r2)
   14db4:	10803fcc 	andi	r2,r2,255
   14db8:	1004c03a 	cmpne	r2,r2,zero
   14dbc:	1000191e 	bne	r2,zero,14e24 <alt_tick+0xe4>
    {
      next_callback = alarm->callback (alarm->context);
   14dc0:	e0bffe17 	ldw	r2,-8(fp)
   14dc4:	10c00317 	ldw	r3,12(r2)
   14dc8:	e0bffe17 	ldw	r2,-8(fp)
   14dcc:	11000517 	ldw	r4,20(r2)
   14dd0:	183ee83a 	callr	r3
   14dd4:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   14dd8:	e0bffd17 	ldw	r2,-12(fp)
   14ddc:	1004c03a 	cmpne	r2,r2,zero
   14de0:	1000031e 	bne	r2,zero,14df0 <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
   14de4:	e13ffe17 	ldw	r4,-8(fp)
   14de8:	0014ca80 	call	14ca8 <alt_alarm_stop>
   14dec:	00000d06 	br	14e24 <alt_tick+0xe4>
      }
      else
      {
        alarm->time += next_callback;
   14df0:	e0bffe17 	ldw	r2,-8(fp)
   14df4:	10c00217 	ldw	r3,8(r2)
   14df8:	e0bffd17 	ldw	r2,-12(fp)
   14dfc:	1887883a 	add	r3,r3,r2
   14e00:	e0bffe17 	ldw	r2,-8(fp)
   14e04:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   14e08:	e0bffe17 	ldw	r2,-8(fp)
   14e0c:	10c00217 	ldw	r3,8(r2)
   14e10:	d0a6a917 	ldw	r2,-25948(gp)
   14e14:	1880032e 	bgeu	r3,r2,14e24 <alt_tick+0xe4>
        {
          alarm->rollover = 1;
   14e18:	e0fffe17 	ldw	r3,-8(fp)
   14e1c:	00800044 	movi	r2,1
   14e20:	18800405 	stb	r2,16(r3)
        }
      }
    }
    alarm = next;
   14e24:	e0bfff17 	ldw	r2,-4(fp)
   14e28:	e0bffe15 	stw	r2,-8(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   14e2c:	d0e00c04 	addi	r3,gp,-32720
   14e30:	e0bffe17 	ldw	r2,-8(fp)
   14e34:	10ffcc1e 	bne	r2,r3,14d68 <alt_tick+0x28>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
   14e38:	e037883a 	mov	sp,fp
   14e3c:	dfc00117 	ldw	ra,4(sp)
   14e40:	df000017 	ldw	fp,0(sp)
   14e44:	dec00204 	addi	sp,sp,8
   14e48:	f800283a 	ret

00014e4c <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
   14e4c:	deffff04 	addi	sp,sp,-4
   14e50:	df000015 	stw	fp,0(sp)
   14e54:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   14e58:	000170fa 	wrctl	ienable,zero
}
   14e5c:	e037883a 	mov	sp,fp
   14e60:	df000017 	ldw	fp,0(sp)
   14e64:	dec00104 	addi	sp,sp,4
   14e68:	f800283a 	ret

00014e6c <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   14e6c:	defff904 	addi	sp,sp,-28
   14e70:	dfc00615 	stw	ra,24(sp)
   14e74:	df000515 	stw	fp,20(sp)
   14e78:	df000504 	addi	fp,sp,20
   14e7c:	e13ffd15 	stw	r4,-12(fp)
   14e80:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
   14e84:	e0bffe17 	ldw	r2,-8(fp)
   14e88:	10800017 	ldw	r2,0(r2)
   14e8c:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   14e90:	e13ffd17 	ldw	r4,-12(fp)
   14e94:	001030c0 	call	1030c <strlen>
   14e98:	10800044 	addi	r2,r2,1
   14e9c:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   14ea0:	00000d06 	br	14ed8 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   14ea4:	e0bffc17 	ldw	r2,-16(fp)
   14ea8:	11000217 	ldw	r4,8(r2)
   14eac:	e1bffb17 	ldw	r6,-20(fp)
   14eb0:	e17ffd17 	ldw	r5,-12(fp)
   14eb4:	001513c0 	call	1513c <memcmp>
   14eb8:	1004c03a 	cmpne	r2,r2,zero
   14ebc:	1000031e 	bne	r2,zero,14ecc <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   14ec0:	e0bffc17 	ldw	r2,-16(fp)
   14ec4:	e0bfff15 	stw	r2,-4(fp)
   14ec8:	00000706 	br	14ee8 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   14ecc:	e0bffc17 	ldw	r2,-16(fp)
   14ed0:	10800017 	ldw	r2,0(r2)
   14ed4:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   14ed8:	e0fffe17 	ldw	r3,-8(fp)
   14edc:	e0bffc17 	ldw	r2,-16(fp)
   14ee0:	10fff01e 	bne	r2,r3,14ea4 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   14ee4:	e03fff15 	stw	zero,-4(fp)
   14ee8:	e0bfff17 	ldw	r2,-4(fp)
}
   14eec:	e037883a 	mov	sp,fp
   14ef0:	dfc00117 	ldw	ra,4(sp)
   14ef4:	df000017 	ldw	fp,0(sp)
   14ef8:	dec00204 	addi	sp,sp,8
   14efc:	f800283a 	ret

00014f00 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   14f00:	defffa04 	addi	sp,sp,-24
   14f04:	dfc00515 	stw	ra,20(sp)
   14f08:	df000415 	stw	fp,16(sp)
   14f0c:	df000404 	addi	fp,sp,16
   14f10:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   14f14:	00800074 	movhi	r2,1
   14f18:	109bd904 	addi	r2,r2,28516
   14f1c:	10800017 	ldw	r2,0(r2)
   14f20:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   14f24:	00003306 	br	14ff4 <alt_find_file+0xf4>
  {
    len = strlen(next->name);
   14f28:	e0bffd17 	ldw	r2,-12(fp)
   14f2c:	11000217 	ldw	r4,8(r2)
   14f30:	001030c0 	call	1030c <strlen>
   14f34:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
   14f38:	e0bffd17 	ldw	r2,-12(fp)
   14f3c:	10c00217 	ldw	r3,8(r2)
   14f40:	e0bffc17 	ldw	r2,-16(fp)
   14f44:	1885883a 	add	r2,r3,r2
   14f48:	10bfffc4 	addi	r2,r2,-1
   14f4c:	10800003 	ldbu	r2,0(r2)
   14f50:	10803fcc 	andi	r2,r2,255
   14f54:	1080201c 	xori	r2,r2,128
   14f58:	10bfe004 	addi	r2,r2,-128
   14f5c:	10800bd8 	cmpnei	r2,r2,47
   14f60:	1000031e 	bne	r2,zero,14f70 <alt_find_file+0x70>
    {
      len -= 1;
   14f64:	e0bffc17 	ldw	r2,-16(fp)
   14f68:	10bfffc4 	addi	r2,r2,-1
   14f6c:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   14f70:	e0bffc17 	ldw	r2,-16(fp)
   14f74:	1007883a 	mov	r3,r2
   14f78:	e0bffe17 	ldw	r2,-8(fp)
   14f7c:	1885883a 	add	r2,r3,r2
   14f80:	10800003 	ldbu	r2,0(r2)
   14f84:	10803fcc 	andi	r2,r2,255
   14f88:	1080201c 	xori	r2,r2,128
   14f8c:	10bfe004 	addi	r2,r2,-128
   14f90:	10800be0 	cmpeqi	r2,r2,47
   14f94:	10000a1e 	bne	r2,zero,14fc0 <alt_find_file+0xc0>
   14f98:	e0bffc17 	ldw	r2,-16(fp)
   14f9c:	1007883a 	mov	r3,r2
   14fa0:	e0bffe17 	ldw	r2,-8(fp)
   14fa4:	1885883a 	add	r2,r3,r2
   14fa8:	10800003 	ldbu	r2,0(r2)
   14fac:	10803fcc 	andi	r2,r2,255
   14fb0:	1080201c 	xori	r2,r2,128
   14fb4:	10bfe004 	addi	r2,r2,-128
   14fb8:	1004c03a 	cmpne	r2,r2,zero
   14fbc:	10000a1e 	bne	r2,zero,14fe8 <alt_find_file+0xe8>
   14fc0:	e0bffd17 	ldw	r2,-12(fp)
   14fc4:	11000217 	ldw	r4,8(r2)
   14fc8:	e1bffc17 	ldw	r6,-16(fp)
   14fcc:	e17ffe17 	ldw	r5,-8(fp)
   14fd0:	001513c0 	call	1513c <memcmp>
   14fd4:	1004c03a 	cmpne	r2,r2,zero
   14fd8:	1000031e 	bne	r2,zero,14fe8 <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   14fdc:	e0bffd17 	ldw	r2,-12(fp)
   14fe0:	e0bfff15 	stw	r2,-4(fp)
   14fe4:	00000806 	br	15008 <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
   14fe8:	e0bffd17 	ldw	r2,-12(fp)
   14fec:	10800017 	ldw	r2,0(r2)
   14ff0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   14ff4:	00c00074 	movhi	r3,1
   14ff8:	18dbd904 	addi	r3,r3,28516
   14ffc:	e0bffd17 	ldw	r2,-12(fp)
   15000:	10ffc91e 	bne	r2,r3,14f28 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   15004:	e03fff15 	stw	zero,-4(fp)
   15008:	e0bfff17 	ldw	r2,-4(fp)
}
   1500c:	e037883a 	mov	sp,fp
   15010:	dfc00117 	ldw	ra,4(sp)
   15014:	df000017 	ldw	fp,0(sp)
   15018:	dec00204 	addi	sp,sp,8
   1501c:	f800283a 	ret

00015020 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   15020:	defffa04 	addi	sp,sp,-24
   15024:	dfc00515 	stw	ra,20(sp)
   15028:	df000415 	stw	fp,16(sp)
   1502c:	dc000315 	stw	r16,12(sp)
   15030:	df000304 	addi	fp,sp,12
   15034:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
   15038:	00bffa04 	movi	r2,-24
   1503c:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   15040:	e03ffe15 	stw	zero,-8(fp)
   15044:	00002006 	br	150c8 <alt_get_fd+0xa8>
  {
    if (!alt_fd_list[i].dev)
   15048:	e13ffe17 	ldw	r4,-8(fp)
   1504c:	04000074 	movhi	r16,1
   15050:	84175d04 	addi	r16,r16,23924
   15054:	01400304 	movi	r5,12
   15058:	0012b9c0 	call	12b9c <__mulsi3>
   1505c:	1405883a 	add	r2,r2,r16
   15060:	10800017 	ldw	r2,0(r2)
   15064:	1004c03a 	cmpne	r2,r2,zero
   15068:	1000141e 	bne	r2,zero,150bc <alt_get_fd+0x9c>
    {
      alt_fd_list[i].dev = dev;
   1506c:	e13ffe17 	ldw	r4,-8(fp)
   15070:	04000074 	movhi	r16,1
   15074:	84175d04 	addi	r16,r16,23924
   15078:	01400304 	movi	r5,12
   1507c:	0012b9c0 	call	12b9c <__mulsi3>
   15080:	1407883a 	add	r3,r2,r16
   15084:	e0bfff17 	ldw	r2,-4(fp)
   15088:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
   1508c:	00800074 	movhi	r2,1
   15090:	109bdd04 	addi	r2,r2,28532
   15094:	10c00017 	ldw	r3,0(r2)
   15098:	e0bffe17 	ldw	r2,-8(fp)
   1509c:	1880040e 	bge	r3,r2,150b0 <alt_get_fd+0x90>
      {
        alt_max_fd = i;
   150a0:	00c00074 	movhi	r3,1
   150a4:	18dbdd04 	addi	r3,r3,28532
   150a8:	e0bffe17 	ldw	r2,-8(fp)
   150ac:	18800015 	stw	r2,0(r3)
      }
      rc = i;
   150b0:	e0bffe17 	ldw	r2,-8(fp)
   150b4:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
   150b8:	00000606 	br	150d4 <alt_get_fd+0xb4>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   150bc:	e0bffe17 	ldw	r2,-8(fp)
   150c0:	10800044 	addi	r2,r2,1
   150c4:	e0bffe15 	stw	r2,-8(fp)
   150c8:	e0bffe17 	ldw	r2,-8(fp)
   150cc:	10800810 	cmplti	r2,r2,32
   150d0:	103fdd1e 	bne	r2,zero,15048 <alt_get_fd+0x28>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   150d4:	e0bffd17 	ldw	r2,-12(fp)
}
   150d8:	e037883a 	mov	sp,fp
   150dc:	dfc00217 	ldw	ra,8(sp)
   150e0:	df000117 	ldw	fp,4(sp)
   150e4:	dc000017 	ldw	r16,0(sp)
   150e8:	dec00304 	addi	sp,sp,12
   150ec:	f800283a 	ret

000150f0 <atexit>:
   150f0:	200b883a 	mov	r5,r4
   150f4:	000d883a 	mov	r6,zero
   150f8:	0009883a 	mov	r4,zero
   150fc:	000f883a 	mov	r7,zero
   15100:	00151b01 	jmpi	151b0 <__register_exitproc>

00015104 <exit>:
   15104:	defffe04 	addi	sp,sp,-8
   15108:	000b883a 	mov	r5,zero
   1510c:	dc000015 	stw	r16,0(sp)
   15110:	dfc00115 	stw	ra,4(sp)
   15114:	2021883a 	mov	r16,r4
   15118:	00152e80 	call	152e8 <__call_exitprocs>
   1511c:	00800074 	movhi	r2,1
   15120:	109bd604 	addi	r2,r2,28504
   15124:	11000017 	ldw	r4,0(r2)
   15128:	20800f17 	ldw	r2,60(r4)
   1512c:	10000126 	beq	r2,zero,15134 <exit+0x30>
   15130:	103ee83a 	callr	r2
   15134:	8009883a 	mov	r4,r16
   15138:	00154d80 	call	154d8 <_exit>

0001513c <memcmp>:
   1513c:	00c000c4 	movi	r3,3
   15140:	1980032e 	bgeu	r3,r6,15150 <memcmp+0x14>
   15144:	2144b03a 	or	r2,r4,r5
   15148:	10c4703a 	and	r2,r2,r3
   1514c:	10000f26 	beq	r2,zero,1518c <memcmp+0x50>
   15150:	31ffffc4 	addi	r7,r6,-1
   15154:	3000061e 	bne	r6,zero,15170 <memcmp+0x34>
   15158:	00000a06 	br	15184 <memcmp+0x48>
   1515c:	39ffffc4 	addi	r7,r7,-1
   15160:	00bfffc4 	movi	r2,-1
   15164:	21000044 	addi	r4,r4,1
   15168:	29400044 	addi	r5,r5,1
   1516c:	38800526 	beq	r7,r2,15184 <memcmp+0x48>
   15170:	20c00003 	ldbu	r3,0(r4)
   15174:	28800003 	ldbu	r2,0(r5)
   15178:	18bff826 	beq	r3,r2,1515c <memcmp+0x20>
   1517c:	1885c83a 	sub	r2,r3,r2
   15180:	f800283a 	ret
   15184:	0005883a 	mov	r2,zero
   15188:	f800283a 	ret
   1518c:	180f883a 	mov	r7,r3
   15190:	20c00017 	ldw	r3,0(r4)
   15194:	28800017 	ldw	r2,0(r5)
   15198:	18bfed1e 	bne	r3,r2,15150 <memcmp+0x14>
   1519c:	31bfff04 	addi	r6,r6,-4
   151a0:	21000104 	addi	r4,r4,4
   151a4:	29400104 	addi	r5,r5,4
   151a8:	39bff936 	bltu	r7,r6,15190 <memcmp+0x54>
   151ac:	003fe806 	br	15150 <memcmp+0x14>

000151b0 <__register_exitproc>:
   151b0:	defffa04 	addi	sp,sp,-24
   151b4:	00800074 	movhi	r2,1
   151b8:	109bd604 	addi	r2,r2,28504
   151bc:	dc000015 	stw	r16,0(sp)
   151c0:	14000017 	ldw	r16,0(r2)
   151c4:	dd000415 	stw	r20,16(sp)
   151c8:	2829883a 	mov	r20,r5
   151cc:	81405217 	ldw	r5,328(r16)
   151d0:	dcc00315 	stw	r19,12(sp)
   151d4:	dc800215 	stw	r18,8(sp)
   151d8:	dc400115 	stw	r17,4(sp)
   151dc:	dfc00515 	stw	ra,20(sp)
   151e0:	2023883a 	mov	r17,r4
   151e4:	3027883a 	mov	r19,r6
   151e8:	3825883a 	mov	r18,r7
   151ec:	28002526 	beq	r5,zero,15284 <__register_exitproc+0xd4>
   151f0:	29000117 	ldw	r4,4(r5)
   151f4:	008007c4 	movi	r2,31
   151f8:	11002716 	blt	r2,r4,15298 <__register_exitproc+0xe8>
   151fc:	8800101e 	bne	r17,zero,15240 <__register_exitproc+0x90>
   15200:	2105883a 	add	r2,r4,r4
   15204:	1085883a 	add	r2,r2,r2
   15208:	20c00044 	addi	r3,r4,1
   1520c:	1145883a 	add	r2,r2,r5
   15210:	0009883a 	mov	r4,zero
   15214:	15000215 	stw	r20,8(r2)
   15218:	28c00115 	stw	r3,4(r5)
   1521c:	2005883a 	mov	r2,r4
   15220:	dfc00517 	ldw	ra,20(sp)
   15224:	dd000417 	ldw	r20,16(sp)
   15228:	dcc00317 	ldw	r19,12(sp)
   1522c:	dc800217 	ldw	r18,8(sp)
   15230:	dc400117 	ldw	r17,4(sp)
   15234:	dc000017 	ldw	r16,0(sp)
   15238:	dec00604 	addi	sp,sp,24
   1523c:	f800283a 	ret
   15240:	29802204 	addi	r6,r5,136
   15244:	00800044 	movi	r2,1
   15248:	110e983a 	sll	r7,r2,r4
   1524c:	30c04017 	ldw	r3,256(r6)
   15250:	2105883a 	add	r2,r4,r4
   15254:	1085883a 	add	r2,r2,r2
   15258:	1185883a 	add	r2,r2,r6
   1525c:	19c6b03a 	or	r3,r3,r7
   15260:	14802015 	stw	r18,128(r2)
   15264:	14c00015 	stw	r19,0(r2)
   15268:	00800084 	movi	r2,2
   1526c:	30c04015 	stw	r3,256(r6)
   15270:	88bfe31e 	bne	r17,r2,15200 <__register_exitproc+0x50>
   15274:	30804117 	ldw	r2,260(r6)
   15278:	11c4b03a 	or	r2,r2,r7
   1527c:	30804115 	stw	r2,260(r6)
   15280:	003fdf06 	br	15200 <__register_exitproc+0x50>
   15284:	008000b4 	movhi	r2,2
   15288:	10a2c904 	addi	r2,r2,-29916
   1528c:	100b883a 	mov	r5,r2
   15290:	80805215 	stw	r2,328(r16)
   15294:	003fd606 	br	151f0 <__register_exitproc+0x40>
   15298:	00800034 	movhi	r2,0
   1529c:	10800004 	addi	r2,r2,0
   152a0:	1000021e 	bne	r2,zero,152ac <__register_exitproc+0xfc>
   152a4:	013fffc4 	movi	r4,-1
   152a8:	003fdc06 	br	1521c <__register_exitproc+0x6c>
   152ac:	01006404 	movi	r4,400
   152b0:	103ee83a 	callr	r2
   152b4:	1007883a 	mov	r3,r2
   152b8:	103ffa26 	beq	r2,zero,152a4 <__register_exitproc+0xf4>
   152bc:	80805217 	ldw	r2,328(r16)
   152c0:	180b883a 	mov	r5,r3
   152c4:	18000115 	stw	zero,4(r3)
   152c8:	18800015 	stw	r2,0(r3)
   152cc:	80c05215 	stw	r3,328(r16)
   152d0:	18006215 	stw	zero,392(r3)
   152d4:	18006315 	stw	zero,396(r3)
   152d8:	0009883a 	mov	r4,zero
   152dc:	883fc826 	beq	r17,zero,15200 <__register_exitproc+0x50>
   152e0:	003fd706 	br	15240 <__register_exitproc+0x90>

000152e4 <register_fini>:
   152e4:	f800283a 	ret

000152e8 <__call_exitprocs>:
   152e8:	00800074 	movhi	r2,1
   152ec:	109bd604 	addi	r2,r2,28504
   152f0:	10800017 	ldw	r2,0(r2)
   152f4:	defff304 	addi	sp,sp,-52
   152f8:	df000b15 	stw	fp,44(sp)
   152fc:	d8800115 	stw	r2,4(sp)
   15300:	00800034 	movhi	r2,0
   15304:	10800004 	addi	r2,r2,0
   15308:	1005003a 	cmpeq	r2,r2,zero
   1530c:	d8800215 	stw	r2,8(sp)
   15310:	d8800117 	ldw	r2,4(sp)
   15314:	dd400815 	stw	r21,32(sp)
   15318:	dd000715 	stw	r20,28(sp)
   1531c:	10805204 	addi	r2,r2,328
   15320:	dfc00c15 	stw	ra,48(sp)
   15324:	ddc00a15 	stw	r23,40(sp)
   15328:	dd800915 	stw	r22,36(sp)
   1532c:	dcc00615 	stw	r19,24(sp)
   15330:	dc800515 	stw	r18,20(sp)
   15334:	dc400415 	stw	r17,16(sp)
   15338:	dc000315 	stw	r16,12(sp)
   1533c:	282b883a 	mov	r21,r5
   15340:	2039883a 	mov	fp,r4
   15344:	d8800015 	stw	r2,0(sp)
   15348:	2829003a 	cmpeq	r20,r5,zero
   1534c:	d8800117 	ldw	r2,4(sp)
   15350:	14405217 	ldw	r17,328(r2)
   15354:	88001026 	beq	r17,zero,15398 <__call_exitprocs+0xb0>
   15358:	ddc00017 	ldw	r23,0(sp)
   1535c:	88800117 	ldw	r2,4(r17)
   15360:	8c802204 	addi	r18,r17,136
   15364:	143fffc4 	addi	r16,r2,-1
   15368:	80000916 	blt	r16,zero,15390 <__call_exitprocs+0xa8>
   1536c:	05bfffc4 	movi	r22,-1
   15370:	a000151e 	bne	r20,zero,153c8 <__call_exitprocs+0xe0>
   15374:	8409883a 	add	r4,r16,r16
   15378:	2105883a 	add	r2,r4,r4
   1537c:	1485883a 	add	r2,r2,r18
   15380:	10c02017 	ldw	r3,128(r2)
   15384:	a8c01126 	beq	r21,r3,153cc <__call_exitprocs+0xe4>
   15388:	843fffc4 	addi	r16,r16,-1
   1538c:	85bff81e 	bne	r16,r22,15370 <__call_exitprocs+0x88>
   15390:	d8800217 	ldw	r2,8(sp)
   15394:	10003126 	beq	r2,zero,1545c <__call_exitprocs+0x174>
   15398:	dfc00c17 	ldw	ra,48(sp)
   1539c:	df000b17 	ldw	fp,44(sp)
   153a0:	ddc00a17 	ldw	r23,40(sp)
   153a4:	dd800917 	ldw	r22,36(sp)
   153a8:	dd400817 	ldw	r21,32(sp)
   153ac:	dd000717 	ldw	r20,28(sp)
   153b0:	dcc00617 	ldw	r19,24(sp)
   153b4:	dc800517 	ldw	r18,20(sp)
   153b8:	dc400417 	ldw	r17,16(sp)
   153bc:	dc000317 	ldw	r16,12(sp)
   153c0:	dec00d04 	addi	sp,sp,52
   153c4:	f800283a 	ret
   153c8:	8409883a 	add	r4,r16,r16
   153cc:	88c00117 	ldw	r3,4(r17)
   153d0:	2105883a 	add	r2,r4,r4
   153d4:	1445883a 	add	r2,r2,r17
   153d8:	18ffffc4 	addi	r3,r3,-1
   153dc:	11800217 	ldw	r6,8(r2)
   153e0:	1c001526 	beq	r3,r16,15438 <__call_exitprocs+0x150>
   153e4:	10000215 	stw	zero,8(r2)
   153e8:	303fe726 	beq	r6,zero,15388 <__call_exitprocs+0xa0>
   153ec:	00c00044 	movi	r3,1
   153f0:	1c06983a 	sll	r3,r3,r16
   153f4:	90804017 	ldw	r2,256(r18)
   153f8:	8cc00117 	ldw	r19,4(r17)
   153fc:	1884703a 	and	r2,r3,r2
   15400:	10001426 	beq	r2,zero,15454 <__call_exitprocs+0x16c>
   15404:	90804117 	ldw	r2,260(r18)
   15408:	1884703a 	and	r2,r3,r2
   1540c:	10000c1e 	bne	r2,zero,15440 <__call_exitprocs+0x158>
   15410:	2105883a 	add	r2,r4,r4
   15414:	1485883a 	add	r2,r2,r18
   15418:	11400017 	ldw	r5,0(r2)
   1541c:	e009883a 	mov	r4,fp
   15420:	303ee83a 	callr	r6
   15424:	88800117 	ldw	r2,4(r17)
   15428:	98bfc81e 	bne	r19,r2,1534c <__call_exitprocs+0x64>
   1542c:	b8800017 	ldw	r2,0(r23)
   15430:	147fd526 	beq	r2,r17,15388 <__call_exitprocs+0xa0>
   15434:	003fc506 	br	1534c <__call_exitprocs+0x64>
   15438:	8c000115 	stw	r16,4(r17)
   1543c:	003fea06 	br	153e8 <__call_exitprocs+0x100>
   15440:	2105883a 	add	r2,r4,r4
   15444:	1485883a 	add	r2,r2,r18
   15448:	11000017 	ldw	r4,0(r2)
   1544c:	303ee83a 	callr	r6
   15450:	003ff406 	br	15424 <__call_exitprocs+0x13c>
   15454:	303ee83a 	callr	r6
   15458:	003ff206 	br	15424 <__call_exitprocs+0x13c>
   1545c:	88800117 	ldw	r2,4(r17)
   15460:	1000081e 	bne	r2,zero,15484 <__call_exitprocs+0x19c>
   15464:	89000017 	ldw	r4,0(r17)
   15468:	20000726 	beq	r4,zero,15488 <__call_exitprocs+0x1a0>
   1546c:	b9000015 	stw	r4,0(r23)
   15470:	8809883a 	mov	r4,r17
   15474:	00000000 	call	0 <__reset-0x10000>
   15478:	bc400017 	ldw	r17,0(r23)
   1547c:	883fb71e 	bne	r17,zero,1535c <__call_exitprocs+0x74>
   15480:	003fc506 	br	15398 <__call_exitprocs+0xb0>
   15484:	89000017 	ldw	r4,0(r17)
   15488:	882f883a 	mov	r23,r17
   1548c:	2023883a 	mov	r17,r4
   15490:	883fb21e 	bne	r17,zero,1535c <__call_exitprocs+0x74>
   15494:	003fc006 	br	15398 <__call_exitprocs+0xb0>

00015498 <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
   15498:	defffd04 	addi	sp,sp,-12
   1549c:	df000215 	stw	fp,8(sp)
   154a0:	df000204 	addi	fp,sp,8
   154a4:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
   154a8:	e0bfff17 	ldw	r2,-4(fp)
   154ac:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   154b0:	e0bffe17 	ldw	r2,-8(fp)
   154b4:	1005003a 	cmpeq	r2,r2,zero
   154b8:	1000021e 	bne	r2,zero,154c4 <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
   154bc:	002af070 	cmpltui	zero,zero,43969
   154c0:	00000106 	br	154c8 <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
   154c4:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
   154c8:	e037883a 	mov	sp,fp
   154cc:	df000017 	ldw	fp,0(sp)
   154d0:	dec00104 	addi	sp,sp,4
   154d4:	f800283a 	ret

000154d8 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   154d8:	defffd04 	addi	sp,sp,-12
   154dc:	dfc00215 	stw	ra,8(sp)
   154e0:	df000115 	stw	fp,4(sp)
   154e4:	df000104 	addi	fp,sp,4
   154e8:	e13fff15 	stw	r4,-4(fp)
  ALT_OS_STOP();

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
   154ec:	e13fff17 	ldw	r4,-4(fp)
   154f0:	00154980 	call	15498 <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   154f4:	003fff06 	br	154f4 <_exit+0x1c>
   154f8:	000152e4 	muli	zero,zero,1355
